/*! For license information please see configPanel.js.LICENSE.txt */
(()=>{var e={345:(e,t,n)=>{"use strict";var i=n(649),r=n(710),o=n.n(r);function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var i,r,o=[],s=!0,a=!1;try{for(n=n.call(e);!(s=(i=n.next()).done)&&(o.push(i.value),!t||o.length!==t);s=!0);}catch(e){a=!0,r=e}finally{try{s||null==n.return||n.return()}finally{if(a)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var u=n(951),l=n(976);function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}const f=function(){function e(t){(0,u.Z)(this,e),(0,i.Z)(this,"state",void 0),(0,i.Z)(this,"customFunction",(function(){})),this.state=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},t),this.checkType()}return(0,l.Z)(e,[{key:"setState",value:function(e,t){if("type"===e&&(this.state.type=t,this.state.valueFrom=this.state.min),"orientation"===e&&(this.state.orientation=t),"scale"===e&&(this.state.scale=t),"toolTip"===e&&(this.state.toolTip=t),"step"===e&&(this.state.step=this.checkStep(t)),"valueTo"===e){var n=this.state.valueTo;this.state.valueTo=this.checkValueTo(t),this.state.valueTo!==n&&this.customFunction()}if("valueFrom"===e)if("single"!==this.state.type){var i=this.state.valueFrom;this.state.valueFrom=this.checkValueFrom(t),this.state.valueFrom!==i&&this.customFunction()}else this.state.valueFrom=this.state.min;"min"===e&&(this.state.min=this.checkMin(t),this.checkType()),"max"===e&&(this.state.max=this.checkMax(t))}},{key:"changeValues",value:function(e){var t=a(e,2),n=t[0],i=t[1],r=n,o=i;void 0!==n&&(r=this.findNextValue(this.state.valueFrom,n),this.setState("valueFrom",r)),void 0!==i&&(o=this.findNextValue(this.state.valueTo,i),this.setState("valueTo",o))}},{key:"getState",value:function(){return this.state}},{key:"setCustomFunction",value:function(e){this.customFunction=e}},{key:"checkType",value:function(){"single"===this.state.type&&this.setState("valueFrom",this.state.min)}},{key:"checkExtremumValues",value:function(e,t,n){var i=e;return e<t&&(i=t),e>n&&(i=n),i}},{key:"findNextValue",value:function(e,t){var n=Math.floor((t-e)/this.state.step);return e>t&&(n=Math.ceil((t-e)/this.state.step)),t<this.state.min?this.state.min:t>this.state.max?this.state.max:e+n*this.state.step}},{key:"checkValueFrom",value:function(e){var t=this.checkExtremumValues(e,this.state.min,this.state.valueTo);return+t.toFixed(5)}},{key:"checkValueTo",value:function(e){var t=this.checkExtremumValues(e,this.state.valueFrom,this.state.max);return+t.toFixed(5)}},{key:"checkMin",value:function(e){var t=this.checkExtremumValues(e,-1e10,this.state.valueFrom);return"single"===this.state.type&&(t=this.checkExtremumValues(e,-1e10,this.state.valueTo)),+t.toFixed(5)}},{key:"checkMax",value:function(e){var t=this.checkExtremumValues(e,this.state.valueTo,1e10);return+t.toFixed(5)}},{key:"checkStep",value:function(e){var t=this.state.step;return e>0&&e<=this.state.max-this.state.min&&(t=+e.toFixed(5)),t}}]),e}();function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const h=function(){function e(t,n){(0,u.Z)(this,e),(0,i.Z)(this,"slider",void 0),(0,i.Z)(this,"initOptions",void 0),(0,i.Z)(this,"scale",void 0),(0,i.Z)(this,"scaleValue",void 0),this.slider=t,this.initOptions=d({},n),this.init()}return(0,l.Z)(e,[{key:"updateObserver",value:function(e){var t=this.initOptions,n=t.min,i=t.max,r=t.orientation,o=t.scale;this.updateState(e),n===this.initOptions.min&&i===this.initOptions.max&&r===this.initOptions.orientation&&o===this.initOptions.scale||this.update()}},{key:"updateState",value:function(e){this.initOptions=d({},e)}},{key:"getScaleValues",value:function(e){var t=void 0;return e.classList.contains("slider__scale-marker-value")&&(t=Number(e.getAttribute("data-value"))),t}},{key:"init",value:function(){this.initOptions.scale&&(this.createElemets(),this.createScale())}},{key:"createElemets",value:function(){this.scale=document.createElement("div"),this.scale.classList.add("slider__scale"),this.slider.appendChild(this.scale),this.scaleValue=document.createElement("div"),this.scaleValue.classList.add("slider__scale-value"),this.slider.appendChild(this.scaleValue)}},{key:"createScale",value:function(){for(var e=this.initOptions,t=e.min,n=e.max,i=e.orientation,r=n-t,o=r/10,s=n.toString().length-1,a=0;a<=r/o*4;a+=1){var u=document.createElement("div");u.classList.add("slider__scale-marker");var l=+(a*o/4+t).toFixed(s),c=+(r-a*o/4+t).toFixed(s);if(a%4==0){u.classList.add("slider__scale-marker_large");var f=document.createElement("div");f.classList.add("slider__scale-marker-value");var p=a*o/4/r*100;"vertical"===i?(f.style.top="".concat(p,"%"),f.setAttribute("data-value","".concat(c)),f.innerHTML="".concat(c)):(f.style.left="".concat(p,"%"),f.setAttribute("data-value","".concat(l)),f.innerHTML="".concat(l)),this.scaleValue.appendChild(f)}this.scale.appendChild(u)}}},{key:"destroyScale",value:function(){this.scale&&this.scaleValue&&(this.scale.remove(),this.scaleValue.remove())}},{key:"update",value:function(){this.destroyScale(),this.init()}}]),e}();function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const m=function(){function e(t){(0,u.Z)(this,e),(0,i.Z)(this,"lowerCount",void 0),(0,i.Z)(this,"upperCount",void 0),(0,i.Z)(this,"initOptions",void 0),this.initOptions=g({},t),this.init()}return(0,l.Z)(e,[{key:"updateObserver",value:function(e){this.updateState(e),this.update([this.initOptions.valueFrom,this.initOptions.valueTo]),this.toggletoolTip()}},{key:"updateState",value:function(e){this.initOptions=g({},e)}},{key:"getElems",value:function(){return[this.lowerCount,this.upperCount]}},{key:"init",value:function(){this.createElements();var e=this.initOptions,t=e.valueFrom,n=e.valueTo;this.update([t,n]),this.toggletoolTip()}},{key:"createElements",value:function(){var e=document.createElement("div");e.classList.add("slider__handle-lower-count"),this.lowerCount=e;var t=document.createElement("div");t.classList.add("slider__handle-lower-count"),this.upperCount=t}},{key:"toggletoolTip",value:function(){this.initOptions.toolTip?(this.lowerCount.classList.remove("slider__handle-upper-count_hidden"),this.upperCount.classList.remove("slider__handle-upper-count_hidden")):(this.lowerCount.classList.add("slider__handle-upper-count_hidden"),this.upperCount.classList.add("slider__handle-upper-count_hidden"))}},{key:"update",value:function(e){var t=a(e,2),n=t[0],i=t[1];void 0!==n&&(this.lowerCount.innerHTML=n.toString()),void 0!==i&&(this.upperCount.innerHTML=i.toString()),this.upperCount.innerHTML===this.lowerCount.innerHTML?this.lowerCount.classList.add("slider__handle-lower-count_hidden"):this.lowerCount.classList.remove("slider__handle-lower-count_hidden")}}]),e}();function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const x=function(){function e(t,n){(0,u.Z)(this,e),(0,i.Z)(this,"slider",void 0),(0,i.Z)(this,"lower",void 0),(0,i.Z)(this,"upper",void 0),(0,i.Z)(this,"initOptions",void 0),this.slider=t,this.initOptions=b({},n),this.init()}return(0,l.Z)(e,[{key:"updateObserver",value:function(e){this.updateState(e),this.checkOrientation(),this.handlersUpdate(),this.checkType(),this.toggleHandlersOrder()}},{key:"getHandlerElems",value:function(){return[this.lower,this.upper]}},{key:"getHandlersCoords",value:function(e,t){var n=0;if(t instanceof MouseEvent&&(n="vertical"===this.initOptions.orientation?t.clientY:t.clientX),window.TouchEvent&&t instanceof TouchEvent&&(n="vertical"===this.initOptions.orientation?t.touches[0].clientY:t.touches[0].clientX),t instanceof KeyboardEvent){var i=e.getBoundingClientRect().height/2,r=this.convertFromCustom(this.initOptions.step);"ArrowLeft"===t.key&&(n="vertical"===this.initOptions.orientation?e.getBoundingClientRect().top+i+r:e.getBoundingClientRect().left-r),"ArrowRight"===t.key&&(n="vertical"===this.initOptions.orientation?e.getBoundingClientRect().top+i-r:e.getBoundingClientRect().right+r)}var o=this.slider.getBoundingClientRect(),s=[],a=s[0],u=s[1],l=n-o.left;return"vertical"===this.initOptions.orientation&&(l=o.height-n+o.top),e===this.lower&&(a=this.convertToCustom(l)),e===this.upper&&(u=this.convertToCustom(l)),[a,u]}},{key:"handlersUpdate",value:function(){var e=[this.initOptions.valueFrom,this.initOptions.valueTo],t=e[0],n=e[1];this.shiftLeftHandler(this.convertToPercent(t)),this.shiftRightHandler(this.convertToPercent(n))}},{key:"updateState",value:function(e){this.initOptions=b({},e)}},{key:"init",value:function(){this.createElements(),this.shiftLeftHandler(this.convertToPercent(this.initOptions.valueFrom)),this.shiftRightHandler(this.convertToPercent(this.initOptions.valueTo)),this.checkType()}},{key:"createElements",value:function(){var e=document.createElement("div");e.classList.add("slider__handle-lower"),e.setAttribute("tabindex","-1"),this.lower=e;var t=document.createElement("div");t.classList.add("slider__handle-upper"),t.setAttribute("tabindex","-1"),this.upper=t}},{key:"toggleHandlersOrder",value:function(){document.activeElement!==this.lower||this.lower.classList.contains("slider__handle-lower_z-index-up")||(this.lower.classList.add("slider__handle-lower_z-index-up"),this.upper.classList.remove("slider__handle-upper_z-index-up")),document.activeElement!==this.upper||this.upper.classList.contains("slider__handle-upper_z-index-up")||(this.upper.classList.add("slider__handle-upper_z-index-up"),this.lower.classList.remove("slider__handle-lower_z-index-up"))}},{key:"shiftLeftHandler",value:function(e){"horizontal"===this.initOptions.orientation&&(this.lower.style.left=e+"%"),"vertical"===this.initOptions.orientation&&(this.lower.style.top=100-e+"%")}},{key:"shiftRightHandler",value:function(e){"horizontal"===this.initOptions.orientation&&(this.upper.style.left=e+"%"),"vertical"===this.initOptions.orientation&&(this.upper.style.top=100-e+"%")}},{key:"convertToPercent",value:function(e){return 100/Math.abs(this.initOptions.max-this.initOptions.min)*(-this.initOptions.min+e)}},{key:"checkSliderOrientation",value:function(){return"vertical"===this.initOptions.orientation?this.slider.getBoundingClientRect().height:this.slider.getBoundingClientRect().width}},{key:"convertToCustom",value:function(e){return e*(Math.abs(this.initOptions.max-this.initOptions.min)/this.checkSliderOrientation())+this.initOptions.min}},{key:"convertFromCustom",value:function(e){return this.checkSliderOrientation()/Math.abs(this.initOptions.max-this.initOptions.min)*e}},{key:"checkOrientation",value:function(){"vertical"===this.initOptions.orientation&&(this.upper.style.left="",this.lower.style.left=""),"horizontal"===this.initOptions.orientation&&(this.upper.style.top="",this.lower.style.top="")}},{key:"checkType",value:function(){"single"===this.initOptions.type&&this.lower.classList.add("slider__handle-lower_hidden"),"range"===this.initOptions.type&&this.lower.classList.remove("slider__handle-lower_hidden")}}]),e}();function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function T(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const k=function(){function e(t){(0,u.Z)(this,e),(0,i.Z)(this,"progressBar",void 0),(0,i.Z)(this,"initOptions",void 0),this.initOptions=T({},t),this.init()}return(0,l.Z)(e,[{key:"updateObserver",value:function(e){this.updateState(e),this.progressBarUpdate()}},{key:"getElems",value:function(){return this.progressBar}},{key:"updateState",value:function(e){this.initOptions=T({},e)}},{key:"init",value:function(){this.createElements(),this.progressBarUpdate()}},{key:"createElements",value:function(){var e=document.createElement("div");e.classList.add("slider__highlight"),this.progressBar=e}},{key:"progressBarUpdate",value:function(){this.checkOrientation();var e=[this.initOptions.valueFrom,this.initOptions.valueTo],t=e[0],n=e[1],i=[this.convertToPercent(t),this.convertToPercent(n)],r=i[0],o=i[1],s=o-r;"horizontal"===this.initOptions.orientation&&s>=0&&(this.progressBar.style.width=s+"%",this.progressBar.style.left=r+"%"),"vertical"===this.initOptions.orientation&&s>=0&&(this.progressBar.style.height=s+"%",this.progressBar.style.top=100-o+"%")}},{key:"convertToPercent",value:function(e){var t=this.initOptions,n=t.max,i=t.min;return 100/Math.abs(n-i)*(-i+e)}},{key:"checkOrientation",value:function(){"vertical"===this.initOptions.orientation?(this.progressBar.style.width="",this.progressBar.style.left=""):(this.progressBar.style.height="",this.progressBar.style.top="")}}]),e}();function O(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function S(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?O(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):O(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const E=function(){function e(t,n,r){(0,u.Z)(this,e),(0,i.Z)(this,"rootElem",void 0),(0,i.Z)(this,"slider",void 0),(0,i.Z)(this,"initOptions",void 0),(0,i.Z)(this,"scale",void 0),(0,i.Z)(this,"toolTip",void 0),(0,i.Z)(this,"presenter",void 0),(0,i.Z)(this,"handlers",void 0),(0,i.Z)(this,"progressBar",void 0),(0,i.Z)(this,"observers",[]),(0,i.Z)(this,"tracker",void 0),this.initOptions=S({},r),this.rootElem=t,this.presenter=n,this.init()}return(0,l.Z)(e,[{key:"updateView",value:function(e){this.updateState(e),this.checkSliderOrientation(),this.updateObservers(e)}},{key:"subScribe",value:function(e){this.observers.push(e)}},{key:"subscriber",value:function(){this.subScribe(this.handlers),this.subScribe(this.toolTip),this.subScribe(this.scale),this.subScribe(this.progressBar)}},{key:"updateState",value:function(e){this.initOptions=S({},e)}},{key:"updateObservers",value:function(e){this.observers.forEach((function(t){t.updateObserver(e)}))}},{key:"createSlider",value:function(){var e=document.createElement("div");e.classList.add("slider"),this.slider=e,this.rootElem.appendChild(this.slider);var t=document.createElement("div");t.classList.add("slider__tracker"),this.tracker=t}},{key:"createElements",value:function(){this.handlers=new x(this.tracker,this.initOptions),this.toolTip=new m(this.initOptions),this.progressBar=new k(this.initOptions)}},{key:"createScale",value:function(){var e=document.createElement("div");e.classList.add("slider__scale-wrapper"),this.scale=new h(e,this.initOptions),this.slider.appendChild(e)}},{key:"appendElements",value:function(){var e=this,t=a(this.toolTip.getElems(),2),n=t[0],i=t[1],r=a(this.handlers.getHandlerElems(),2),o=r[0],s=r[1],u=this.progressBar.getElems();this.slider.appendChild(this.tracker),o.appendChild(n),s.appendChild(i),[o,s,u].forEach((function(t){return e.tracker.appendChild(t)}))}},{key:"init",value:function(){this.createSlider(),this.createElements(),this.appendElements(),this.createScale(),this.subscriber(),this.checkSliderOrientation(),this.addListeners()}},{key:"checkSliderOrientation",value:function(){"vertical"===this.initOptions.orientation?this.slider.classList.add("slider_vertical"):this.slider.classList.remove("slider_vertical")}},{key:"updateHandlers",value:function(e,t){var n=a(this.handlers.getHandlersCoords(e,t),2),i=n[0],r=n[1];this.presenter.changeValues([i,r])}},{key:"addEvents",value:function(e,t){t.preventDefault();var n=[this.updateHandlers.bind(this,e)],i=function e(){n.forEach((function(e){document.removeEventListener("mousemove",e),document.removeEventListener("touchmove",e)})),document.removeEventListener("mouseup",e),document.removeEventListener("touchend",e)};n.forEach((function(e){document.addEventListener("mousemove",e),document.addEventListener("touchmove",e)})),document.addEventListener("mouseup",i),document.addEventListener("touchend",i),document.ondragstart=function(){return!1}}},{key:"toSubscribeHandlersOnView",value:function(){var e=this;this.handlers.getHandlerElems().forEach((function(t){t.addEventListener("mousedown",(function(n){return e.addEvents(t,n)})),t.addEventListener("touchstart",(function(n){return e.addEvents(t,n)})),t.addEventListener("mousedown",(function(){return t.focus()})),t.addEventListener("touchstart",(function(){return t.focus()})),t.addEventListener("keydown",(function(n){"ArrowLeft"!==n.key&&"ArrowRight"!==n.key?n.preventDefault():e.updateHandlers(t,n)}))}))}},{key:"toSubscribeScaleOnView",value:function(){var e=this;this.slider.addEventListener("click",(function(t){var n=e.scale.getScaleValues(t.target);(n||0===n)&&(e.presenter.setSlider("valueFrom",e.initOptions.min),e.presenter.setSlider("valueTo",n))}))}},{key:"addListeners",value:function(){this.toSubscribeHandlersOnView(),this.toSubscribeScaleOnView()}}]),e}(),C=function(){function e(t,n){(0,u.Z)(this,e),(0,i.Z)(this,"model",void 0),(0,i.Z)(this,"view",void 0),this.model=new f(n),this.view=new E(t,this,this.getState())}return(0,l.Z)(e,[{key:"changeValues",value:function(e){var t=a(e,2),n=t[0],i=t[1];this.model.changeValues([n,i]),this.updateView()}},{key:"setSlider",value:function(e,t){this.model.setState(e,t),this.updateView()}},{key:"updateView",value:function(){var e=this.model.getState();this.view.updateView(e)}},{key:"getState",value:function(){return this.model.getState()}},{key:"onChange",value:function(e){this.model.setCustomFunction(e)}}]),e}(),j={min:-10,max:0,step:5e-4,valueFrom:-5,valueTo:0,type:"range",orientation:"horizontal",scale:!0,toolTip:!0};function L(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function A(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?L(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):L(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}!function(e){e.fn.sliderPlugin=function(e){var t=A(A({},j),e),n=new C(this[0],t);return this.setSlider=function(e,t){n.setSlider(e,t)},this.getState=function(){return n.getState()},this.sliderOnChange=function(e){n.onChange(e)},this}}(o())},710:(e,t,n)=>{var i=n(638);n(40).$=i,e.exports=i},40:(e,t,n)=>{"use strict";e.exports=function(){if("object"==typeof globalThis)return globalThis;var e;try{e=this||new Function("return this")()}catch(e){if("object"==typeof window)return window;if("object"==typeof self)return self;if(void 0!==n.g)return n.g}return e}()},638:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(i,r){"use strict";var o=[],s=Object.getPrototypeOf,a=o.slice,u=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},l=o.push,c=o.indexOf,f={},p=f.toString,d=f.hasOwnProperty,h=d.toString,v=h.call(Object),g={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},b=i.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var i,r,o=(n=n||b).createElement("script");if(o.text=e,t)for(i in x)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[p.call(e)]||"object":typeof e}var k="3.6.0",O=function(e,t){return new O.fn.init(e,t)};function S(e){var t=!!e&&"length"in e&&e.length,n=T(e);return!m(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}O.fn=O.prototype={jquery:k,constructor:O,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=O.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return O.each(this,e)},map:function(e){return this.pushStack(O.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(O.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(O.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},O.extend=O.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||m(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(l&&i&&(O.isPlainObject(i)||(r=Array.isArray(i)))?(n=s[t],o=r&&!Array.isArray(n)?[]:r||O.isPlainObject(n)?n:{},r=!1,s[t]=O.extend(l,o,i)):void 0!==i&&(s[t]=i));return s},O.extend({expando:"jQuery"+(k+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e)||(t=s(e))&&("function"!=typeof(n=d.call(t,"constructor")&&t.constructor)||h.call(n)!==v))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(S(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?O.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(S(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return u(s)},guid:1,support:g}),"function"==typeof Symbol&&(O.fn[Symbol.iterator]=o[Symbol.iterator]),O.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var E=function(e){var t,n,i,r,o,s,a,u,l,c,f,p,d,h,v,g,m,y,b,x="sizzle"+1*new Date,w=e.document,T=0,k=0,O=ue(),S=ue(),E=ue(),C=ue(),j=function(e,t){return e===t&&(f=!0),0},L={}.hasOwnProperty,A=[],D=A.pop,P=A.push,N=A.push,_=A.slice,q=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",M="\\[[\\x20\\t\\r\\n\\f]*("+F+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+I+"*\\]",R=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",B=new RegExp(I+"+","g"),V=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),Z=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),W=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),$=new RegExp(I+"|>"),z=new RegExp(R),U=new RegExp("^"+F+"$"),X={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){p()},se=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{N.apply(A=_.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){N={apply:A.length?function(e,t){P.apply(e,_.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ae(e,t,i,r){var o,a,l,c,f,h,m,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return i;if(!r&&(p(t),t=t||d,v)){if(11!==w&&(f=K.exec(e)))if(o=f[1]){if(9===w){if(!(l=t.getElementById(o)))return i;if(l.id===o)return i.push(l),i}else if(y&&(l=y.getElementById(o))&&b(t,l)&&l.id===o)return i.push(l),i}else{if(f[2])return N.apply(i,t.getElementsByTagName(e)),i;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return N.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!C[e+" "]&&(!g||!g.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(m=e,y=t,1===w&&($.test(e)||W.test(e))){for((y=ee.test(e)&&me(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(ie,re):t.setAttribute("id",c=x)),a=(h=s(e)).length;a--;)h[a]=(c?"#"+c:":scope")+" "+be(h[a]);m=h.join(",")}try{return N.apply(i,y.querySelectorAll(m)),i}catch(t){C(e,!0)}finally{c===x&&t.removeAttribute("id")}}}return u(e.replace(V,"$1"),t,i,r)}function ue(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function le(e){return e[x]=!0,e}function ce(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ve(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return le((function(t){return t=+t,le((function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))}))}))}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},o=ae.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},p=ae.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:w;return s!=d&&9===s.nodeType&&s.documentElement?(h=(d=s).documentElement,v=!o(d),w!=d&&(r=d.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",oe,!1):r.attachEvent&&r.attachEvent("onunload",oe)),n.scope=ce((function(e){return h.appendChild(e).appendChild(d.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(d.getElementsByClassName),n.getById=ce((function(e){return h.appendChild(e).id=x,!d.getElementsByName||!d.getElementsByName(x).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},m=[],g=[],(n.qsa=J.test(d.querySelectorAll))&&(ce((function(e){var t;h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+H+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),(t=d.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),m.push("!=",R)})),g=g.length&&new RegExp(g.join("|")),m=m.length&&new RegExp(m.join("|")),t=J.test(h.compareDocumentPosition),b=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return f=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==d||e.ownerDocument==w&&b(w,e)?-1:t==d||t.ownerDocument==w&&b(w,t)?1:c?q(c,e)-q(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e==d?-1:t==d?1:r?-1:o?1:c?q(c,e)-q(c,t):0;if(r===o)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?pe(s[i],a[i]):s[i]==w?-1:a[i]==w?1:0},d):d},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&v&&!C[t+" "]&&(!m||!m.test(t))&&(!g||!g.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){C(t,!0)}return ae(t,d,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=d&&p(e),b(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=d&&p(e);var r=i.attrHandle[t.toLowerCase()],o=r&&L.call(i.attrHandle,t.toLowerCase())?r(e,t,!v):void 0;return void 0!==o?o:n.attributes||!v?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},ae.escape=function(e){return(e+"").replace(ie,re)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],r=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(j),f){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return c=null,e},r=ae.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},i=ae.selectors={cacheLength:50,createPseudo:le,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=O[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+I+"|$)"))&&O(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=ae.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(B," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,v=o!==s?"nextSibling":"previousSibling",g=t.parentNode,m=a&&t.nodeName.toLowerCase(),y=!u&&!a,b=!1;if(g){if(o){for(;v;){for(p=t;p=p[v];)if(a?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&y){for(b=(d=(l=(c=(f=(p=g)[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],p=d&&g.childNodes[d];p=++d&&p&&p[v]||(b=d=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[T,d,b];break}}else if(y&&(b=d=(l=(c=(f=(p=t)[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===b)for(;(p=++d&&p&&p[v]||(b=d=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++b||(y&&((c=(f=p[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,b]),p!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?le((function(e,n){for(var i,o=r(e,t),s=o.length;s--;)e[i=q(e,o[s])]=!(n[i]=o[s])})):function(e){return r(e,0,n)}):r}},pseudos:{not:le((function(e){var t=[],n=[],i=a(e.replace(V,"$1"));return i[x]?le((function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))})):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}})),has:le((function(e){return function(t){return ae(e,t).length>0}})),contains:le((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:le((function(e){return U.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ve(!1),disabled:ve(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:ge((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}},i.pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=de(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function xe(e,t,n){var i=t.dir,r=t.next,o=r||i,s=n&&"parentNode"===o,a=k++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,u){var l,c,f,p=[T,a];if(u){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,u))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(c=(f=t[x]||(t[x]={}))[t.uniqueID]||(f[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((l=c[o])&&l[0]===T&&l[1]===a)return p[2]=l[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function we(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function Te(e,t,n,i,r){for(var o,s=[],a=0,u=e.length,l=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),l&&t.push(a)));return s}function ke(e,t,n,i,r,o){return i&&!i[x]&&(i=ke(i)),r&&!r[x]&&(r=ke(r,o)),le((function(o,s,a,u){var l,c,f,p=[],d=[],h=s.length,v=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)ae(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),g=!e||!o&&t?v:Te(v,p,e,a,u),m=n?r||(o?e:h||i)?[]:s:g;if(n&&n(g,m,a,u),i)for(l=Te(m,d),i(l,[],a,u),c=l.length;c--;)(f=l[c])&&(m[d[c]]=!(g[d[c]]=f));if(o){if(r||e){if(r){for(l=[],c=m.length;c--;)(f=m[c])&&l.push(g[c]=f);r(null,m=[],l,u)}for(c=m.length;c--;)(f=m[c])&&(l=r?q(o,f):p[c])>-1&&(o[l]=!(s[l]=f))}}else m=Te(m===s?m.splice(h,m.length):m),r?r(null,s,m,u):N.apply(s,m)}))}function Oe(e){for(var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],u=s?1:0,c=xe((function(e){return e===t}),a,!0),f=xe((function(e){return q(t,e)>-1}),a,!0),p=[function(e,n,i){var r=!s&&(i||n!==l)||((t=n).nodeType?c(e,n,i):f(e,n,i));return t=null,r}];u<o;u++)if(n=i.relative[e[u].type])p=[xe(we(p),n)];else{if((n=i.filter[e[u].type].apply(null,e[u].matches))[x]){for(r=++u;r<o&&!i.relative[e[r].type];r++);return ke(u>1&&we(p),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(V,"$1"),n,u<r&&Oe(e.slice(u,r)),r<o&&Oe(e=e.slice(r)),r<o&&be(e))}p.push(n)}return we(p)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,s=ae.tokenize=function(e,t){var n,r,o,s,a,u,l,c=S[e+" "];if(c)return t?0:c.slice(0);for(a=e,u=[],l=i.preFilter;a;){for(s in n&&!(r=Z.exec(a))||(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=W.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(V," ")}),a=a.slice(n.length)),i.filter)!(r=X[s].exec(a))||l[s]&&!(r=l[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):S(e,u).slice(0)},a=ae.compile=function(e,t){var n,r=[],o=[],a=E[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=Oe(t[n]))[x]?r.push(a):o.push(a);a=E(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,s,a,u,c){var f,h,g,m=0,y="0",b=o&&[],x=[],w=l,k=o||r&&i.find.TAG("*",c),O=T+=null==w?1:Math.random()||.1,S=k.length;for(c&&(l=s==d||s||c);y!==S&&null!=(f=k[y]);y++){if(r&&f){for(h=0,s||f.ownerDocument==d||(p(f),a=!v);g=e[h++];)if(g(f,s||d,a)){u.push(f);break}c&&(T=O)}n&&((f=!g&&f)&&m--,o&&b.push(f))}if(m+=y,n&&y!==m){for(h=0;g=t[h++];)g(b,x,s,a);if(o){if(m>0)for(;y--;)b[y]||x[y]||(x[y]=D.call(u));x=Te(x)}N.apply(u,x),c&&!o&&x.length>0&&m+t.length>1&&ae.uniqueSort(u)}return c&&(T=O,l=w),b};return n?le(o):o}(o,r)),a.selector=e}return a},u=ae.select=function(e,t,n,r){var o,u,l,c,f,p="function"==typeof e&&e,d=!r&&s(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&v&&i.relative[u[1].type]){if(!(t=(i.find.ID(l.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=X.needsContext.test(e)?0:u.length;o--&&(l=u[o],!i.relative[c=l.type]);)if((f=i.find[c])&&(r=f(l.matches[0].replace(te,ne),ee.test(u[0].type)&&me(t.parentNode)||t))){if(u.splice(o,1),!(e=r.length&&be(u)))return N.apply(n,r),n;break}}return(p||a(e,d))(r,t,!v,n,!t||ee.test(e)&&me(t.parentNode)||t),n},n.sortStable=x.split("").sort(j).join("")===x,n.detectDuplicates=!!f,p(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||fe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||fe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||fe(H,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),ae}(i);O.find=E,O.expr=E.selectors,O.expr[":"]=O.expr.pseudos,O.uniqueSort=O.unique=E.uniqueSort,O.text=E.getText,O.isXMLDoc=E.isXML,O.contains=E.contains,O.escapeSelector=E.escape;var C=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&O(e).is(n))break;i.push(e)}return i},j=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},L=O.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,t,n){return m(t)?O.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?O.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?O.grep(e,(function(e){return c.call(t,e)>-1!==n})):O.filter(t,e,n)}O.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?O.find.matchesSelector(i,e)?[i]:[]:O.find.matches(e,O.grep(t,(function(e){return 1===e.nodeType})))},O.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(O(e).filter((function(){for(t=0;t<i;t++)if(O.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)O.find(e,r[t],n);return i>1?O.uniqueSort(n):n},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&L.test(e)?O(e):e||[],!1).length}});var N,_=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(O.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||N,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:_.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof O?t[0]:t,O.merge(this,O.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),D.test(i[1])&&O.isPlainObject(t))for(i in t)m(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=b.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(O):O.makeArray(e,this)}).prototype=O.fn,N=O(b);var q=/^(?:parents|prev(?:Until|All))/,H={children:!0,contents:!0,next:!0,prev:!0};function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}O.fn.extend({has:function(e){var t=O(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(O.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&O(e);if(!L.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&O.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?O.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?c.call(O(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(O.uniqueSort(O.merge(this.get(),O(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),O.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return j((e.parentNode||{}).firstChild,e)},children:function(e){return j(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),O.merge([],e.childNodes))}},(function(e,t){O.fn[e]=function(n,i){var r=O.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=O.filter(i,r)),this.length>1&&(H[e]||O.uniqueSort(r),q.test(e)&&r.reverse()),this.pushStack(r)}}));var F=/[^\x20\t\r\n\f]+/g;function M(e){return e}function R(e){throw e}function B(e,t,n,i){var r;try{e&&m(r=e.promise)?r.call(e).done(t).fail(n):e&&m(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}O.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return O.each(e.match(F)||[],(function(e,n){t[n]=!0})),t}(e):O.extend({},e);var t,n,i,r,o=[],s=[],a=-1,u=function(){for(r=r||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){O.each(n,(function(n,i){m(i)?e.unique&&l.has(i)||o.push(i):i&&i.length&&"string"!==T(i)&&t(i)}))}(arguments),n&&!t&&u()),this},remove:function(){return O.each(arguments,(function(e,t){for(var n;(n=O.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--})),this},has:function(e){return e?O.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!i}};return l},O.extend({Deferred:function(e){var t=[["notify","progress",O.Callbacks("memory"),O.Callbacks("memory"),2],["resolve","done",O.Callbacks("once memory"),O.Callbacks("once memory"),0,"resolved"],["reject","fail",O.Callbacks("once memory"),O.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return O.Deferred((function(n){O.each(t,(function(t,i){var r=m(e[i[4]])&&e[i[4]];o[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&m(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,r){var o=0;function s(e,t,n,r){return function(){var a=this,u=arguments,l=function(){var i,l;if(!(e<o)){if((i=n.apply(a,u))===t.promise())throw new TypeError("Thenable self-resolution");l=i&&("object"==typeof i||"function"==typeof i)&&i.then,m(l)?r?l.call(i,s(o,t,M,r),s(o,t,R,r)):(o++,l.call(i,s(o,t,M,r),s(o,t,R,r),s(o,t,M,t.notifyWith))):(n!==M&&(a=void 0,u=[i]),(r||t.resolveWith)(a,u))}},c=r?l:function(){try{l()}catch(i){O.Deferred.exceptionHook&&O.Deferred.exceptionHook(i,c.stackTrace),e+1>=o&&(n!==R&&(a=void 0,u=[i]),t.rejectWith(a,u))}};e?c():(O.Deferred.getStackHook&&(c.stackTrace=O.Deferred.getStackHook()),i.setTimeout(c))}}return O.Deferred((function(i){t[0][3].add(s(0,i,m(r)?r:M,i.notifyWith)),t[1][3].add(s(0,i,m(e)?e:M)),t[2][3].add(s(0,i,m(n)?n:R))})).promise()},promise:function(e){return null!=e?O.extend(e,r):r}},o={};return O.each(t,(function(e,i){var s=i[2],a=i[5];r[i[1]]=s.add,a&&s.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(i[3].fire),o[i[0]]=function(){return o[i[0]+"With"](this===o?void 0:this,arguments),this},o[i[0]+"With"]=s.fireWith})),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=a.call(arguments),o=O.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?a.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(B(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||m(r[n]&&r[n].then)))return o.then();for(;n--;)B(r[n],s(n),o.reject);return o.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;O.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&V.test(e.name)&&i.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},O.readyException=function(e){i.setTimeout((function(){throw e}))};var Z=O.Deferred();function W(){b.removeEventListener("DOMContentLoaded",W),i.removeEventListener("load",W),O.ready()}O.fn.ready=function(e){return Z.then(e).catch((function(e){O.readyException(e)})),this},O.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--O.readyWait:O.isReady)||(O.isReady=!0,!0!==e&&--O.readyWait>0||Z.resolveWith(b,[O]))}}),O.ready.then=Z.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?i.setTimeout(O.ready):(b.addEventListener("DOMContentLoaded",W),i.addEventListener("load",W));var $=function(e,t,n,i,r,o,s){var a=0,u=e.length,l=null==n;if("object"===T(n))for(a in r=!0,n)$(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,m(i)||(s=!0),l&&(s?(t.call(e,i),t=null):(l=t,t=function(e,t,n){return l.call(O(e),n)})),t))for(;a<u;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(z,"ms-").replace(U,X)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=O.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[Y(t)]=n;else for(i in t)r[Y(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in i?[t]:t.match(F)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||O.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!O.isEmptyObject(t)}};var J=new Q,K=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}O.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),O.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=Y(i.slice(5)),ne(o,i,r[i]));J.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){K.set(this,e)})):$(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=K.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),O.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,O.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=O.queue(e,t),i=n.length,r=n.shift(),o=O._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,(function(){O.dequeue(e,t)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:O.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),O.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?O.queue(this[0],e):void 0===t?this:this.each((function(){var n=O.queue(this,e,t);O._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&O.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){O.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=O.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=J.get(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=b.documentElement,ae=function(e){return O.contains(e.ownerDocument,e)},ue={composed:!0};se.getRootNode&&(ae=function(e){return O.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===O.css(e,"display")};function ce(e,t,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return O.css(e,t,"")},u=a(),l=n&&n[3]||(O.cssNumber[t]?"":"px"),c=e.nodeType&&(O.cssNumber[t]||"px"!==l&&+u)&&re.exec(O.css(e,t));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;s--;)O.style(e,t,c+l),(1-o)*(1-(o=a()/u||.5))<=0&&(s=0),c/=o;c*=2,O.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=l,i.start=c,i.end=r)),r}var fe={};function pe(e){var t,n=e.ownerDocument,i=e.nodeName,r=fe[i];return r||(t=n.body.appendChild(n.createElement(i)),r=O.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),fe[i]=r,r)}function de(e,t){for(var n,i,r=[],o=0,s=e.length;o<s;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=J.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&le(i)&&(r[o]=pe(i))):"none"!==n&&(r[o]="none",J.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}O.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?O(this).show():O(this).hide()}))}});var he,ve,ge=/^(?:checkbox|radio)$/i,me=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;he=b.createDocumentFragment().appendChild(b.createElement("div")),(ve=b.createElement("input")).setAttribute("type","radio"),ve.setAttribute("checked","checked"),ve.setAttribute("name","t"),he.appendChild(ve),g.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",g.option=!!he.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function xe(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?O.merge([e],n):n}function we(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,g.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var Te=/<|&#?\w+;/;function ke(e,t,n,i,r){for(var o,s,a,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===T(o))O.merge(p,o.nodeType?[o]:o);else if(Te.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(me.exec(o)||["",""])[1].toLowerCase(),u=be[a]||be._default,s.innerHTML=u[1]+O.htmlPrefilter(o)+u[2],c=u[0];c--;)s=s.lastChild;O.merge(p,s.childNodes),(s=f.firstChild).textContent=""}else p.push(t.createTextNode(o));for(f.textContent="",d=0;o=p[d++];)if(i&&O.inArray(o,i)>-1)r&&r.push(o);else if(l=ae(o),s=xe(f.appendChild(o),"script"),l&&we(s),n)for(c=0;o=s[c++];)ye.test(o.type||"")&&n.push(o);return f}var Oe=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Ee(){return!1}function Ce(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function je(e,t,n,i,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)je(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ee;else if(!r)return e;return 1===o&&(s=r,r=function(e){return O().off(e),s.apply(this,arguments)},r.guid=s.guid||(s.guid=O.guid++)),e.each((function(){O.event.add(this,t,r,i,n)}))}function Le(e,t,n){n?(J.set(e,t,!1),O.event.add(e,t,{namespace:!1,handler:function(e){var i,r,o=J.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(O.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=a.call(arguments),J.set(this,t,o),i=n(this,t),this[t](),o!==(r=J.get(this,t))||i?J.set(this,t,!1):r={},o!==r)return e.stopImmediatePropagation(),e.preventDefault(),r&&r.value}else o.length&&(J.set(this,t,{value:O.event.trigger(O.extend(o[0],O.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&O.event.add(e,t,Se)}O.event={global:{},add:function(e,t,n,i,r){var o,s,a,u,l,c,f,p,d,h,v,g=J.get(e);if(G(e))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&O.find.matchesSelector(se,r),n.guid||(n.guid=O.guid++),(u=g.events)||(u=g.events=Object.create(null)),(s=g.handle)||(s=g.handle=function(t){return void 0!==O&&O.event.triggered!==t.type?O.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(F)||[""]).length;l--;)d=v=(a=Oe.exec(t[l])||[])[1],h=(a[2]||"").split(".").sort(),d&&(f=O.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,f=O.event.special[d]||{},c=O.extend({type:d,origType:v,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&O.expr.match.needsContext.test(r),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,i,h,s)||e.addEventListener&&e.addEventListener(d,s)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,c):p.push(c),O.event.global[d]=!0)},remove:function(e,t,n,i,r){var o,s,a,u,l,c,f,p,d,h,v,g=J.hasData(e)&&J.get(e);if(g&&(u=g.events)){for(l=(t=(t||"").match(F)||[""]).length;l--;)if(d=v=(a=Oe.exec(t[l])||[])[1],h=(a[2]||"").split(".").sort(),d){for(f=O.event.special[d]||{},p=u[d=(i?f.delegateType:f.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!r&&v!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));s&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||O.removeEvent(e,d,g.handle),delete u[d])}else for(d in u)O.event.remove(e,d+t[l],n,i,!0);O.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=new Array(arguments.length),u=O.event.fix(e),l=(J.get(this,"events")||Object.create(null))[u.type]||[],c=O.event.special[u.type]||{};for(a[0]=u,t=1;t<arguments.length;t++)a[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){for(s=O.event.handlers.call(this,u,l),t=0;(r=s[t++])&&!u.isPropagationStopped();)for(u.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(i=((O.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a))&&!1===(u.result=i)&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,i,r,o,s,a=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],s={},n=0;n<u;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?O(r,this).index(l)>-1:O.find(r,this,null,[l]).length),s[r]&&o.push(i);o.length&&a.push({elem:l,handlers:o})}return l=this,u<t.length&&a.push({elem:l,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(O.Event.prototype,e,{enumerable:!0,configurable:!0,get:m(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[O.expando]?e:new O.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&A(t,"input")&&Le(t,"click",Se),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&A(t,"input")&&Le(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&A(t,"input")&&J.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},O.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},O.Event=function(e,t){if(!(this instanceof O.Event))return new O.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&O.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[O.expando]=!0},O.Event.prototype={constructor:O.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},O.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},O.event.addProp),O.each({focus:"focusin",blur:"focusout"},(function(e,t){O.event.special[e]={setup:function(){return Le(this,e,Ce),!1},trigger:function(){return Le(this,e),!0},_default:function(){return!0},delegateType:t}})),O.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){O.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||O.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),O.fn.extend({on:function(e,t,n,i){return je(this,e,t,n,i)},one:function(e,t,n,i){return je(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,O(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ee),this.each((function(){O.event.remove(this,e,n,t)}))}});var Ae=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ne(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&O(e).children("tbody")[0]||e}function _e(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function qe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var n,i,r,o,s,a;if(1===t.nodeType){if(J.hasData(e)&&(a=J.get(e).events))for(r in J.remove(t,"handle events"),a)for(n=0,i=a[r].length;n<i;n++)O.event.add(t,r,a[r][n]);K.hasData(e)&&(o=K.access(e),s=O.extend({},o),K.set(t,s))}}function Ie(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,i){t=u(t);var r,o,s,a,l,c,f=0,p=e.length,d=p-1,h=t[0],v=m(h);if(v||p>1&&"string"==typeof h&&!g.checkClone&&De.test(h))return e.each((function(r){var o=e.eq(r);v&&(t[0]=h.call(this,r,o.html())),Fe(o,t,n,i)}));if(p&&(o=(r=ke(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=O.map(xe(r,"script"),_e)).length;f<p;f++)l=r,f!==d&&(l=O.clone(l,!0,!0),a&&O.merge(s,xe(l,"script"))),n.call(e[f],l,f);if(a)for(c=s[s.length-1].ownerDocument,O.map(s,qe),f=0;f<a;f++)l=s[f],ye.test(l.type||"")&&!J.access(l,"globalEval")&&O.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?O._evalUrl&&!l.noModule&&O._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):w(l.textContent.replace(Pe,""),l,c))}return e}function Me(e,t,n){for(var i,r=t?O.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||O.cleanData(xe(i)),i.parentNode&&(n&&ae(i)&&we(xe(i,"script")),i.parentNode.removeChild(i));return e}O.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,s,a=e.cloneNode(!0),u=ae(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||O.isXMLDoc(e)))for(s=xe(a),i=0,r=(o=xe(e)).length;i<r;i++)Ie(o[i],s[i]);if(t)if(n)for(o=o||xe(e),s=s||xe(a),i=0,r=o.length;i<r;i++)He(o[i],s[i]);else He(e,a);return(s=xe(a,"script")).length>0&&we(s,!u&&xe(e,"script")),a},cleanData:function(e){for(var t,n,i,r=O.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)r[i]?O.event.remove(n,i):O.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),O.fn.extend({detach:function(e){return Me(this,e,!0)},remove:function(e){return Me(this,e)},text:function(e){return $(this,(function(e){return void 0===e?O.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Fe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ne(this,e).appendChild(e)}))},prepend:function(){return Fe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ne(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(O.cleanData(xe(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return O.clone(this,e,t)}))},html:function(e){return $(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!be[(me.exec(e)||["",""])[1].toLowerCase()]){e=O.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(O.cleanData(xe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,(function(t){var n=this.parentNode;O.inArray(this,e)<0&&(O.cleanData(xe(this)),n&&n.replaceChild(t,this))}),e)}}),O.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){O.fn[e]=function(e){for(var n,i=[],r=O(e),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),O(r[s])[t](n),l.apply(i,n.get());return this.pushStack(i)}}));var Re=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),Be=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)},Ve=function(e,t,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=o[r];return i},Ze=new RegExp(oe.join("|"),"i");function We(e,t,n){var i,r,o,s,a=e.style;return(n=n||Be(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ae(e)||(s=O.style(e,t)),!g.pixelBoxStyles()&&Re.test(s)&&Ze.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(l).appendChild(c);var e=i.getComputedStyle(c);n="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",s=36===t(e.right),r=36===t(e.width),c.style.position="absolute",o=12===t(c.offsetWidth/3),se.removeChild(l),c=null}}function t(e){return Math.round(parseFloat(e))}var n,r,o,s,a,u,l=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===c.style.backgroundClip,O.extend(g,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",se.appendChild(e).appendChild(t).appendChild(n),r=i.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,se.removeChild(e)),a}}))}();var ze=["Webkit","Moz","ms"],Ue=b.createElement("div").style,Xe={};function Ye(e){return O.cssProps[e]||Xe[e]||(e in Ue?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=ze.length;n--;)if((e=ze[n]+t)in Ue)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function tt(e,t,n,i,r,o){var s="width"===t?1:0,a=0,u=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=O.css(e,n+oe[s],!0,r)),i?("content"===n&&(u-=O.css(e,"padding"+oe[s],!0,r)),"margin"!==n&&(u-=O.css(e,"border"+oe[s]+"Width",!0,r))):(u+=O.css(e,"padding"+oe[s],!0,r),"padding"!==n?u+=O.css(e,"border"+oe[s]+"Width",!0,r):a+=O.css(e,"border"+oe[s]+"Width",!0,r));return!i&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-a-.5))||0),u}function nt(e,t,n){var i=Be(e),r=(!g.boxSizingReliable()||n)&&"border-box"===O.css(e,"boxSizing",!1,i),o=r,s=We(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Re.test(s)){if(!n)return s;s="auto"}return(!g.boxSizingReliable()&&r||!g.reliableTrDimensions()&&A(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===O.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===O.css(e,"boxSizing",!1,i),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+tt(e,t,n||(r?"border":"content"),o,i,s)+"px"}function it(e,t,n,i,r){return new it.prototype.init(e,t,n,i,r)}O.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=Y(t),u=Qe.test(t),l=e.style;if(u||(t=Ye(a)),s=O.cssHooks[t]||O.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:l[t];"string"==(o=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ce(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=r&&r[3]||(O.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,i){var r,o,s,a=Y(t);return Qe.test(t)||(t=Ye(a)),(s=O.cssHooks[t]||O.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=We(e,t,i)),"normal"===r&&t in Ke&&(r=Ke[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),O.each(["height","width"],(function(e,t){O.cssHooks[t]={get:function(e,n,i){if(n)return!Ge.test(O.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,i):Ve(e,Je,(function(){return nt(e,t,i)}))},set:function(e,n,i){var r,o=Be(e),s=!g.scrollboxSize()&&"absolute"===o.position,a=(s||i)&&"border-box"===O.css(e,"boxSizing",!1,o),u=i?tt(e,t,i,a,o):0;return a&&s&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-tt(e,t,"border",!1,o)-.5)),u&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=O.css(e,t)),et(0,n,u)}}})),O.cssHooks.marginLeft=$e(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-Ve(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),O.each({margin:"",padding:"",border:"Width"},(function(e,t){O.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+oe[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(O.cssHooks[e+t].set=et)})),O.fn.extend({css:function(e,t){return $(this,(function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=Be(e),r=t.length;s<r;s++)o[t[s]]=O.css(e,t[s],!1,i);return o}return void 0!==n?O.style(e,t,n):O.css(e,t)}),e,t,arguments.length>1)}}),O.Tween=it,it.prototype={constructor:it,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||O.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(O.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=O.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=O.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){O.fx.step[e.prop]?O.fx.step[e.prop](e):1!==e.elem.nodeType||!O.cssHooks[e.prop]&&null==e.elem.style[Ye(e.prop)]?e.elem[e.prop]=e.now:O.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},O.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},O.fx=it.prototype.init,O.fx.step={};var rt,ot,st=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function ut(){ot&&(!1===b.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(ut):i.setTimeout(ut,O.fx.interval),O.fx.tick())}function lt(){return i.setTimeout((function(){rt=void 0})),rt=Date.now()}function ct(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=oe[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ft(e,t,n){for(var i,r=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function pt(e,t,n){var i,r,o=0,s=pt.prefilters.length,a=O.Deferred().always((function(){delete u.elem})),u=function(){if(r)return!1;for(var t=rt||lt(),n=Math.max(0,l.startTime+l.duration-t),i=1-(n/l.duration||0),o=0,s=l.tweens.length;o<s;o++)l.tweens[o].run(i);return a.notifyWith(e,[l,i,n]),i<1&&s?n:(s||a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:O.extend({},t),opts:O.extend(!0,{specialEasing:{},easing:O.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=O.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(i),i},stop:function(t){var n=0,i=t?l.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),c=l.props;for(function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=Y(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=O.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(c,l.opts.specialEasing);o<s;o++)if(i=pt.prefilters[o].call(l,e,c,l.opts))return m(i.stop)&&(O._queueHooks(l.elem,l.opts.queue).stop=i.stop.bind(i)),i;return O.map(c,ft,l),m(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),O.fx.timer(O.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}O.Animation=O.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match(F);for(var n,i=0,r=e.length;i<r;i++)n=e[i],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,v=e.nodeType&&le(e),g=J.get(e,"fxshow");for(i in n.queue||(null==(s=O._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,O.queue(e,"fx").length||s.empty.fire()}))}))),t)if(r=t[i],st.test(r)){if(delete t[i],o=o||"toggle"===r,r===(v?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;v=!0}d[i]=g&&g[i]||O.style(e,i)}if((u=!O.isEmptyObject(t))||!O.isEmptyObject(d))for(i in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=g&&g.display)&&(l=J.get(e,"display")),"none"===(c=O.css(e,"display"))&&(l?c=l:(de([e],!0),l=e.style.display||l,c=O.css(e,"display"),de([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===O.css(e,"float")&&(u||(p.done((function(){h.display=l})),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),u=!1,d)u||(g?"hidden"in g&&(v=g.hidden):g=J.access(e,"fxshow",{display:l}),o&&(g.hidden=!v),v&&de([e],!0),p.done((function(){for(i in v||de([e]),J.remove(e,"fxshow"),d)O.style(e,i,d[i])}))),u=ft(v?g[i]:0,i,p),i in g||(g[i]=u.start,v&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),O.speed=function(e,t,n){var i=e&&"object"==typeof e?O.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return O.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in O.fx.speeds?i.duration=O.fx.speeds[i.duration]:i.duration=O.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){m(i.old)&&i.old.call(this),i.queue&&O.dequeue(this,i.queue)},i},O.fn.extend({fadeTo:function(e,t,n,i){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=O.isEmptyObject(e),o=O.speed(t,n,i),s=function(){var t=pt(this,O.extend({},e),o);(r||J.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",o=O.timers,s=J.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&at.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||O.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=O.timers,s=i?i.length:0;for(n.finish=!0,O.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),O.each(["toggle","show","hide"],(function(e,t){var n=O.fn[t];O.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,i,r)}})),O.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){O.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),O.timers=[],O.fx.tick=function(){var e,t=0,n=O.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||O.fx.stop(),rt=void 0},O.fx.timer=function(e){O.timers.push(e),O.fx.start()},O.fx.interval=13,O.fx.start=function(){ot||(ot=!0,ut())},O.fx.stop=function(){ot=null},O.fx.speeds={slow:600,fast:200,_default:400},O.fn.delay=function(e,t){return e=O.fx&&O.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var r=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(r)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var dt,ht=O.expr.attrHandle;O.fn.extend({attr:function(e,t){return $(this,O.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){O.removeAttr(this,e)}))}}),O.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?O.prop(e,t,n):(1===o&&O.isXMLDoc(e)||(r=O.attrHooks[t.toLowerCase()]||(O.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void O.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=O.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(F);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?O.removeAttr(e,n):e.setAttribute(n,n),n}},O.each(O.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||O.find.attr;ht[t]=function(e,t,i){var r,o,s=t.toLowerCase();return i||(o=ht[s],ht[s]=r,r=null!=n(e,t,i)?s:null,ht[s]=o),r}}));var vt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function mt(e){return(e.match(F)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(F)||[]}O.fn.extend({prop:function(e,t){return $(this,O.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[O.propFix[e]||e]}))}}),O.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&O.isXMLDoc(e)||(t=O.propFix[t]||t,r=O.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=O.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(O.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),O.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){O.propFix[this.toLowerCase()]=this})),O.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,u=0;if(m(e))return this.each((function(t){O(this).addClass(e.call(this,t,yt(this)))}));if((t=bt(e)).length)for(;n=this[u++];)if(r=yt(n),i=1===n.nodeType&&" "+mt(r)+" "){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=mt(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,u=0;if(m(e))return this.each((function(t){O(this).removeClass(e.call(this,t,yt(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[u++];)if(r=yt(n),i=1===n.nodeType&&" "+mt(r)+" "){for(s=0;o=t[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=mt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):m(e)?this.each((function(n){O(this).toggleClass(e.call(this,n,yt(this),t),t)})):this.each((function(){var t,r,o,s;if(i)for(r=0,o=O(this),s=bt(e);t=s[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+mt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;O.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=m(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,O(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=O.map(r,(function(e){return null==e?"":e+""}))),(t=O.valHooks[this.type]||O.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=O.valHooks[r.type]||O.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(xt,""):null==n?"":n:void 0}}),O.extend({valHooks:{option:{get:function(e){var t=O.find.attr(e,"value");return null!=t?t:mt(O.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:r.length;for(i=o<0?u:s?o:0;i<u;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=O(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=O.makeArray(t),s=r.length;s--;)((i=r[s]).selected=O.inArray(O.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),O.each(["radio","checkbox"],(function(){O.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=O.inArray(O(e).val(),t)>-1}},g.checkOn||(O.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in i;var wt=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};O.extend(O.event,{trigger:function(e,t,n,r){var o,s,a,u,l,c,f,p,h=[n||b],v=d.call(e,"type")?e.type:e,g=d.call(e,"namespace")?e.namespace.split("."):[];if(s=p=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!wt.test(v+O.event.triggered)&&(v.indexOf(".")>-1&&(g=v.split("."),v=g.shift(),g.sort()),l=v.indexOf(":")<0&&"on"+v,(e=e[O.expando]?e:new O.Event(v,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:O.makeArray(t,[e]),f=O.event.special[v]||{},r||!f.trigger||!1!==f.trigger.apply(n,t))){if(!r&&!f.noBubble&&!y(n)){for(u=f.delegateType||v,wt.test(u+v)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(n.ownerDocument||b)&&h.push(a.defaultView||a.parentWindow||i)}for(o=0;(s=h[o++])&&!e.isPropagationStopped();)p=s,e.type=o>1?u:f.bindType||v,(c=(J.get(s,"events")||Object.create(null))[e.type]&&J.get(s,"handle"))&&c.apply(s,t),(c=l&&s[l])&&c.apply&&G(s)&&(e.result=c.apply(s,t),!1===e.result&&e.preventDefault());return e.type=v,r||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(h.pop(),t)||!G(n)||l&&m(n[v])&&!y(n)&&((a=n[l])&&(n[l]=null),O.event.triggered=v,e.isPropagationStopped()&&p.addEventListener(v,Tt),n[v](),e.isPropagationStopped()&&p.removeEventListener(v,Tt),O.event.triggered=void 0,a&&(n[l]=a)),e.result}},simulate:function(e,t,n){var i=O.extend(new O.Event,n,{type:e,isSimulated:!0});O.event.trigger(i,null,t)}}),O.fn.extend({trigger:function(e,t){return this.each((function(){O.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return O.event.trigger(e,t,n,!0)}}),g.focusin||O.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){O.event.simulate(t,e.target,O.event.fix(e))};O.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t);r||i.addEventListener(e,n,!0),J.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t)-1;r?J.access(i,t,r):(i.removeEventListener(e,n,!0),J.remove(i,t))}}}));var kt=i.location,Ot={guid:Date.now()},St=/\?/;O.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new i.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||O.error("Invalid XML: "+(n?O.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Et=/\[\]$/,Ct=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,Lt=/^(?:input|select|textarea|keygen)/i;function At(e,t,n,i){var r;if(Array.isArray(t))O.each(t,(function(t,r){n||Et.test(e)?i(e,r):At(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==T(t))i(e,t);else for(r in t)At(e+"["+r+"]",t[r],n,i)}O.param=function(e,t){var n,i=[],r=function(e,t){var n=m(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!O.isPlainObject(e))O.each(e,(function(){r(this.name,this.value)}));else for(n in e)At(n,e[n],t,r);return i.join("&")},O.fn.extend({serialize:function(){return O.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=O.prop(this,"elements");return e?O.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!O(this).is(":disabled")&&Lt.test(this.nodeName)&&!jt.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=O(this).val();return null==n?null:Array.isArray(n)?O.map(n,(function(e){return{name:t.name,value:e.replace(Ct,"\r\n")}})):{name:t.name,value:n.replace(Ct,"\r\n")}})).get()}});var Dt=/%20/g,Pt=/#.*$/,Nt=/([?&])_=[^&]*/,_t=/^(.*?):[ \t]*([^\r\n]*)$/gm,qt=/^(?:GET|HEAD)$/,Ht=/^\/\//,It={},Ft={},Mt="*/".concat("*"),Rt=b.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(F)||[];if(m(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Vt(e,t,n,i){var r={},o=e===Ft;function s(a){var u;return r[a]=!0,O.each(e[a]||[],(function(e,a){var l=a(t,n,i);return"string"!=typeof l||o||r[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),s(l),!1)})),u}return s(t.dataTypes[0])||!r["*"]&&s("*")}function Zt(e,t){var n,i,r=O.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&O.extend(!0,e,i),e}Rt.href=kt.href,O.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Mt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":O.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Zt(Zt(e,O.ajaxSettings),t):Zt(O.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,r,o,s,a,u,l,c,f,p,d=O.ajaxSetup({},t),h=d.context||d,v=d.context&&(h.nodeType||h.jquery)?O(h):O.event,g=O.Deferred(),m=O.Callbacks("once memory"),y=d.statusCode||{},x={},w={},T="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s)for(s={};t=_t.exec(o);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(e,t){return null==l&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==l&&(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)k.always(e[k.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||T;return n&&n.abort(t),S(0,t),this}};if(g.promise(k),d.url=((e||d.url||kt.href)+"").replace(Ht,kt.protocol+"//"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(F)||[""],null==d.crossDomain){u=b.createElement("a");try{u.href=d.url,u.href=u.href,d.crossDomain=Rt.protocol+"//"+Rt.host!=u.protocol+"//"+u.host}catch(e){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=O.param(d.data,d.traditional)),Vt(It,d,t,k),l)return k;for(f in(c=O.event&&d.global)&&0==O.active++&&O.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!qt.test(d.type),r=d.url.replace(Pt,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Dt,"+")):(p=d.url.slice(r.length),d.data&&(d.processData||"string"==typeof d.data)&&(r+=(St.test(r)?"&":"?")+d.data,delete d.data),!1===d.cache&&(r=r.replace(Nt,"$1"),p=(St.test(r)?"&":"?")+"_="+Ot.guid+++p),d.url=r+p),d.ifModified&&(O.lastModified[r]&&k.setRequestHeader("If-Modified-Since",O.lastModified[r]),O.etag[r]&&k.setRequestHeader("If-None-Match",O.etag[r])),(d.data&&d.hasContent&&!1!==d.contentType||t.contentType)&&k.setRequestHeader("Content-Type",d.contentType),k.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Mt+"; q=0.01":""):d.accepts["*"]),d.headers)k.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(h,k,d)||l))return k.abort();if(T="abort",m.add(d.complete),k.done(d.success),k.fail(d.error),n=Vt(Ft,d,t,k)){if(k.readyState=1,c&&v.trigger("ajaxSend",[k,d]),l)return k;d.async&&d.timeout>0&&(a=i.setTimeout((function(){k.abort("timeout")}),d.timeout));try{l=!1,n.send(x,S)}catch(e){if(l)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,s,u){var f,p,b,x,w,T=t;l||(l=!0,a&&i.clearTimeout(a),n=void 0,o=u||"",k.readyState=e>0?4:0,f=e>=200&&e<300||304===e,s&&(x=function(e,t,n){for(var i,r,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||e.converters[r+" "+u[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}(d,k,s)),!f&&O.inArray("script",d.dataTypes)>-1&&O.inArray("json",d.dataTypes)<0&&(d.converters["text script"]=function(){}),x=function(e,t,n,i){var r,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=l[u+" "+o]||l["* "+o]))for(r in l)if((a=r.split(" "))[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[r]:!0!==l[r]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(d,x,k,f),f?(d.ifModified&&((w=k.getResponseHeader("Last-Modified"))&&(O.lastModified[r]=w),(w=k.getResponseHeader("etag"))&&(O.etag[r]=w)),204===e||"HEAD"===d.type?T="nocontent":304===e?T="notmodified":(T=x.state,p=x.data,f=!(b=x.error))):(b=T,!e&&T||(T="error",e<0&&(e=0))),k.status=e,k.statusText=(t||T)+"",f?g.resolveWith(h,[p,T,k]):g.rejectWith(h,[k,T,b]),k.statusCode(y),y=void 0,c&&v.trigger(f?"ajaxSuccess":"ajaxError",[k,d,f?p:b]),m.fireWith(h,[k,T]),c&&(v.trigger("ajaxComplete",[k,d]),--O.active||O.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,n){return O.get(e,t,n,"json")},getScript:function(e,t){return O.get(e,void 0,t,"script")}}),O.each(["get","post"],(function(e,t){O[t]=function(e,n,i,r){return m(n)&&(r=r||i,i=n,n=void 0),O.ajax(O.extend({url:e,type:t,dataType:r,data:n,success:i},O.isPlainObject(e)&&e))}})),O.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),O._evalUrl=function(e,t,n){return O.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){O.globalEval(e,t,n)}})},O.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=O(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return m(e)?this.each((function(t){O(this).wrapInner(e.call(this,t))})):this.each((function(){var t=O(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=m(e);return this.each((function(n){O(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){O(this).replaceWith(this.childNodes)})),this}}),O.expr.pseudos.hidden=function(e){return!O.expr.pseudos.visible(e)},O.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},O.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},$t=O.ajaxSettings.xhr();g.cors=!!$t&&"withCredentials"in $t,g.ajax=$t=!!$t,O.ajaxTransport((function(e){var t,n;if(g.cors||$t&&!e.crossDomain)return{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Wt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),O.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),O.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return O.globalEval(e),e}}}),O.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),O.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=O("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var zt,Ut=[],Xt=/(=)\?(?=&|$)|\?\?/;O.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ut.pop()||O.expando+"_"+Ot.guid++;return this[e]=!0,e}}),O.ajaxPrefilter("json jsonp",(function(e,t,n){var r,o,s,a=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Xt,"$1"+r):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||O.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=i[r],i[r]=function(){s=arguments},n.always((function(){void 0===o?O(i).removeProp(r):i[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,Ut.push(r)),s&&m(o)&&o(s[0]),s=o=void 0})),"script"})),g.createHTMLDocument=((zt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===zt.childNodes.length),O.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((i=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(i)):t=b),o=!n&&[],(r=D.exec(e))?[t.createElement(r[1])]:(r=ke([e],t,o),o&&o.length&&O(o).remove(),O.merge([],r.childNodes)));var i,r,o},O.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=mt(e.slice(a)),e=e.slice(0,a)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&O.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){o=arguments,s.html(i?O("<div>").append(O.parseHTML(e)).find(i):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},O.expr.pseudos.animated=function(e){return O.grep(O.timers,(function(t){return e===t.elem})).length},O.offset={setOffset:function(e,t,n){var i,r,o,s,a,u,l=O.css(e,"position"),c=O(e),f={};"static"===l&&(e.style.position="relative"),a=c.offset(),o=O.css(e,"top"),u=O.css(e,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(s=(i=c.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(u)||0),m(t)&&(t=t.call(e,n,O.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+r),"using"in t?t.using.call(e,f):c.css(f)}},O.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){O.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===O.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===O.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=O(e).offset()).top+=O.css(e,"borderTopWidth",!0),r.left+=O.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-O.css(i,"marginTop",!0),left:t.left-r.left-O.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===O.css(e,"position");)e=e.offsetParent;return e||se}))}}),O.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;O.fn[e]=function(i){return $(this,(function(e,i,r){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r}),e,i,arguments.length)}})),O.each(["top","left"],(function(e,t){O.cssHooks[t]=$e(g.pixelPosition,(function(e,n){if(n)return n=We(e,t),Re.test(n)?O(e).position()[t]+"px":n}))})),O.each({Height:"height",Width:"width"},(function(e,t){O.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){O.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return $(this,(function(t,n,r){var o;return y(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?O.css(t,n,a):O.style(t,n,r,a)}),t,s?r:void 0,s)}}))})),O.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){O.fn[t]=function(e){return this.on(t,e)}})),O.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),O.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){O.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Yt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;O.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return i=a.call(arguments,2),r=function(){return e.apply(t||this,i.concat(a.call(arguments)))},r.guid=e.guid=e.guid||O.guid++,r},O.holdReady=function(e){e?O.readyWait++:O.ready(!0)},O.isArray=Array.isArray,O.parseJSON=JSON.parse,O.nodeName=A,O.isFunction=m,O.isWindow=y,O.camelCase=Y,O.type=T,O.now=Date.now,O.isNumeric=function(e){var t=O.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},O.trim=function(e){return null==e?"":(e+"").replace(Yt,"")},void 0===(n=function(){return O}.apply(t,[]))||(e.exports=n);var Gt=i.jQuery,Qt=i.$;return O.noConflict=function(e){return i.$===O&&(i.$=Qt),e&&i.jQuery===O&&(i.jQuery=Gt),O},void 0===r&&(i.jQuery=i.$=O),O}))},951:(e,t,n)=>{"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,{Z:()=>i})},976:(e,t,n)=>{"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}n.d(t,{Z:()=>r})},649:(e,t,n)=>{"use strict";function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>i})}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(951),t=n(976),i=n(649);function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}var o=function(){function n(t,r){(0,e.Z)(this,n),(0,i.Z)(this,"valueFromInput",void 0),(0,i.Z)(this,"valueToInput",void 0),(0,i.Z)(this,"minInput",void 0),(0,i.Z)(this,"maxInput",void 0),(0,i.Z)(this,"stepInput",void 0),(0,i.Z)(this,"orientation",void 0),(0,i.Z)(this,"type",void 0),(0,i.Z)(this,"toolTip",void 0),(0,i.Z)(this,"scale",void 0),(0,i.Z)(this,"rangeSlider",void 0),(0,i.Z)(this,"configPaneElement",void 0),(0,i.Z)(this,"rootElement",void 0),this.rangeSlider=t,this.rootElement=r,this.init()}return(0,t.Z)(n,[{key:"init",value:function(){this.createConfigPanel(),this.createInputsElems(),this.createBtnElems(),this.initElems(),this.initValues(),this.addListeners()}},{key:"createConfigPanel",value:function(){var e=document.createElement("div");e.classList.add("config","js-config"),this.configPaneElement=e,this.rootElement.appendChild(this.configPaneElement)}},{key:"getElemsClass",value:function(){return{valueFrom:"value-from",valueTo:"value-to",min:"min",max:"max",step:"step",orientation:"orientation",type:"type",toolTip:"tool-tip",scale:"scale"}}},{key:"initElems",value:function(){var e,t=this.configPaneElement.getElementsByTagName("input"),n=this.getElemsClass(),i=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0,o=function(){};return{s:o,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){u=!0,s=e},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw s}}}}(t);try{for(i.s();!(e=i.n()).done;){var o=e.value;o.matches(".js-config-".concat(n.valueFrom))&&(this.valueFromInput=o),o.matches(".js-config-".concat(n.valueTo))&&(this.valueToInput=o),o.matches(".js-config-".concat(n.min))&&(this.minInput=o),o.matches(".js-config-".concat(n.max))&&(this.maxInput=o),o.matches(".js-config-".concat(n.step))&&(this.stepInput=o),o.matches(".js-config-".concat(n.orientation))&&(this.orientation=o),o.matches(".js-config-".concat(n.type))&&(this.type=o),o.matches(".js-config-".concat(n.toolTip))&&(this.toolTip=o),o.matches(".js-config-".concat(n.scale))&&(this.scale=o)}}catch(e){i.e(e)}finally{i.f()}}},{key:"createInputsElems",value:function(){var e=document.createElement("div");e.classList.add("config__group");for(var t=this.getElemsClass(),n=[{name:"value from",class:t.valueFrom},{name:"value to",class:t.valueTo},{name:"min",class:t.min},{name:"max",class:t.max},{name:"step",class:t.step}],i=0;i<n.length;i+=1){var r=document.createElement("div");r.classList.add("config__input"),r.innerHTML='\n        <div class="config__input-name">\n          '.concat(n[i].name,':\n        </div>\n        <div class="config__inputs">\n          <div class="config__dec"></div>\n            <input type="number" class="config__input-value js-config-').concat(n[i].class,'">\n          <div class="config__inc"></div>\n        </div>\n      '),e.appendChild(r)}this.configPaneElement.appendChild(e)}},{key:"createBtnElems",value:function(){var e=document.createElement("div");e.classList.add("config__group");for(var t=this.getElemsClass(),n=[{name:"horizontal",class:t.orientation},{name:"range",class:t.type},{name:"tool-tip",class:t.toolTip},{name:"scale",class:t.scale}],i=0;i<n.length;i+=1){var r=document.createElement("div");r.classList.add("config__input","config__input_btn"),r.innerHTML='\n        <div class="config__input-name">\n          '.concat(n[i].name,'\n        </div>\n        <label class="config__button">\n          <input type="checkbox" class="js-config-').concat(n[i].class,'">\n          <div class="config__button-on"></div>\n        </label>\n      '),e.appendChild(r)}this.configPaneElement.appendChild(e)}},{key:"addAttributes",value:function(){var e=this.rangeSlider.getState(),t=e.min,n=e.max,i=e.step;[this.valueFromInput,this.valueToInput,this.minInput,this.maxInput].forEach((function(e){e.setAttribute("max","".concat(n)),e.setAttribute("min","".concat(t))})),this.stepInput.setAttribute("max","".concat(n-t)),this.stepInput.setAttribute("min","".concat(i))}},{key:"initValues",value:function(){var e=this.rangeSlider.getState(),t=e.min,n=e.max,i=e.valueFrom,r=e.valueTo,o=e.step;this.valueFromInput.value="".concat(i),this.valueToInput.value="".concat(r),this.minInput.value="".concat(t),this.maxInput.value="".concat(n),this.stepInput.value="".concat(o),this.addAttributes(),this.isBtnActive()}},{key:"isBtnActive",value:function(){var e=this.rangeSlider.getState(),t=e.orientation,n=e.type,i=e.scale,r=e.toolTip;this.orientation.checked="horizontal"===t,this.toolTip.checked=!0===r,this.type.checked="range"===n,this.scale.checked=!0===i}},{key:"setValue",value:function(e,t){this.rangeSlider.setSlider(e,t);var n=this.rangeSlider.getState()[e];switch(e){case"valueFrom":this.valueFromInput.value="".concat(n);break;case"valueTo":this.valueToInput.value="".concat(n);break;case"min":this.minInput.value="".concat(n);break;case"max":this.maxInput.value="".concat(n);break;case"step":this.stepInput.value="".concat(n)}}},{key:"changeValues",value:function(e){var t=e.target,n=this.rangeSlider.getState(),i=n.min,r=n.max,o=n.valueFrom,s=n.valueTo,a=n.step,u=n.type;if(t.classList.contains("config__inc")||t.classList.contains("config__dec")){var l=t.parentNode.querySelector("input"),c=t.classList.contains("config__inc")?a:-a;if(l===this.valueFromInput&&"single"!==u&&this.setValue("valueFrom",o+c),l===this.valueToInput&&this.setValue("valueTo",s+c),l===this.minInput&&(this.setValue("min",i+c),"single"===u&&(i=this.rangeSlider.getState().min,this.valueFromInput.value="".concat(i))),l===this.maxInput&&this.setValue("max",r+c),l===this.stepInput){var f=(r-i)/100;t.classList.contains("config__inc")&&this.setValue("step",a+f),t.classList.contains("config__dec")&&this.setValue("step",a-f)}}}},{key:"setValues",value:function(){var e=this.rangeSlider.getState(),t=e.valueFrom,n=e.valueTo;this.valueFromInput.value=t.toString(),this.valueToInput.value=n.toString()}},{key:"setType",value:function(){var e=this.rangeSlider.getState().min;this.type.checked?this.rangeSlider.setSlider("type","range"):(this.rangeSlider.setSlider("type","single"),this.valueFromInput.value="".concat(e))}},{key:"setToolTip",value:function(){this.toolTip.checked?this.rangeSlider.setSlider("toolTip",!0):this.rangeSlider.setSlider("toolTip",!1)}},{key:"setScale",value:function(){this.scale.checked?this.rangeSlider.setSlider("scale",!0):this.rangeSlider.setSlider("scale",!1)}},{key:"setOrientation",value:function(){this.orientation.checked?this.rangeSlider.setSlider("orientation","horizontal"):this.rangeSlider.setSlider("orientation","vertical")}},{key:"setSlider",value:function(e){switch(e.target){case this.orientation:this.setOrientation();break;case this.scale:this.setScale();break;case this.toolTip:this.setToolTip();break;case this.type:this.setType()}}},{key:"setSliderValues",value:function(e){switch(e.target){case this.valueFromInput:this.setValue("valueFrom",+this.valueFromInput.value);break;case this.valueToInput:this.setValue("valueTo",+this.valueToInput.value);break;case this.minInput:this.setValue("min",+this.minInput.value);break;case this.maxInput:this.setValue("max",+this.maxInput.value);break;case this.stepInput:this.setValue("step",+this.stepInput.value)}}},{key:"addListeners",value:function(){var e=this,t=this.setValues.bind(this);this.rangeSlider.sliderOnChange((function(){return t()})),this.configPaneElement.addEventListener("click",(function(t){return e.changeValues(t)})),this.configPaneElement.addEventListener("click",(function(t){return e.setSlider(t)})),this.configPaneElement.addEventListener("change",(function(t){return e.setSliderValues(t)}))}}]),n}();const s=o;n(345);var a=document.querySelector(".slider-first"),u=document.querySelector(".config-first");new s($(a).sliderPlugin({max:10,step:1}),u);var l=document.querySelector(".slider-second");$(l).sliderPlugin({min:-.1,max:.1,step:5e-4,valueFrom:-.05,valueTo:.05,type:"range",scale:!1});var c=document.querySelector(".slider-third");$(c).sliderPlugin({min:-10,max:10,step:1,valueFrom:-5,valueTo:5,type:"range",orientation:"vertical",scale:!0,toolTip:!0});var f=document.querySelector(".slider-fourth");$(f).sliderPlugin({min:-.1,max:.1,step:5e-4,valueFrom:-.05,valueTo:.05,type:"single",orientation:"vertical",toolTip:!1})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,