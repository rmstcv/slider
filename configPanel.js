/*! For license information please see configPanel.js.LICENSE.txt */
(()=>{var e={345:(e,t,n)=>{"use strict";var i=n(649),r=n(710),o=n.n(r);function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var i,r,o=[],s=!0,a=!1;try{for(n=n.call(e);!(s=(i=n.next()).done)&&(o.push(i.value),!t||o.length!==t);s=!0);}catch(e){a=!0,r=e}finally{try{s||null==n.return||n.return()}finally{if(a)throw r}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var u=n(951),l=n(976);function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}const f=function(){function e(t){(0,u.Z)(this,e),(0,i.Z)(this,"state",void 0),(0,i.Z)(this,"customFunction",(function(){})),this.state=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},t),this.checkType()}return(0,l.Z)(e,[{key:"setState",value:function(e,t){if("type"===e&&(this.state.type=t,this.state.valueFrom=this.state.min),"orientation"===e&&(this.state.orientation=t),"scale"===e&&(this.state.scale=t),"toolTip"===e&&(this.state.toolTip=t),"step"===e&&(this.state.step=this.checkStep(t)),"valueTo"===e){var n=this.state.valueTo;this.state.valueTo=this.checkValueTo(t),this.state.valueTo!==n&&this.customFunction()}if("valueFrom"===e)if("single"!==this.state.type){var i=this.state.valueFrom;this.state.valueFrom=this.checkValueFrom(t),this.state.valueFrom!==i&&this.customFunction()}else this.state.valueFrom=this.state.min;"min"===e&&(this.state.min=this.checkMin(t),this.checkType()),"max"===e&&(this.state.max=this.checkMax(t))}},{key:"changeValues",value:function(e){var t=a(e,2),n=t[0],i=t[1],r=n,o=i;void 0!==n&&(r=this.findNextValue(this.state.valueFrom,n),this.setState("valueFrom",r)),void 0!==i&&(o=this.findNextValue(this.state.valueTo,i),this.setState("valueTo",o))}},{key:"getState",value:function(){return this.state}},{key:"setCustomFunction",value:function(e){this.customFunction=e}},{key:"checkType",value:function(){"single"===this.state.type&&this.setState("valueFrom",this.state.min)}},{key:"checkExtremumValues",value:function(e,t,n){var i=e;return e<t&&(i=t),e>n&&(i=n),i}},{key:"findNextValue",value:function(e,t){var n=Math.floor((t-e)/this.state.step);return e>t&&(n=Math.ceil((t-e)/this.state.step)),t<this.state.min?this.state.min:t>this.state.max?this.state.max:e+n*this.state.step}},{key:"checkValueFrom",value:function(e){var t=this.checkExtremumValues(e,this.state.min,this.state.valueTo);return+t.toFixed(5)}},{key:"checkValueTo",value:function(e){var t=this.checkExtremumValues(e,this.state.valueFrom,this.state.max);return+t.toFixed(5)}},{key:"checkMin",value:function(e){var t=this.checkExtremumValues(e,-1e10,this.state.valueFrom);return"single"===this.state.type&&(t=this.checkExtremumValues(e,-1e10,this.state.valueTo)),+t.toFixed(5)}},{key:"checkMax",value:function(e){var t=this.checkExtremumValues(e,this.state.valueTo,1e10);return+t.toFixed(5)}},{key:"checkStep",value:function(e){var t=this.state.step;return e>0&&e<=this.state.max-this.state.min&&(t=+e.toFixed(5)),t}}]),e}();function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const h=function(){function e(t,n){(0,u.Z)(this,e),(0,i.Z)(this,"slider",void 0),(0,i.Z)(this,"initOptions",void 0),(0,i.Z)(this,"scale",void 0),(0,i.Z)(this,"scaleValue",void 0),this.slider=t,this.initOptions=d({},n),this.init()}return(0,l.Z)(e,[{key:"updateObserver",value:function(e){var t=this.initOptions,n=t.min,i=t.max,r=t.orientation,o=t.scale;this.updateState(e),n===this.initOptions.min&&i===this.initOptions.max&&r===this.initOptions.orientation&&o===this.initOptions.scale||this.update()}},{key:"updateState",value:function(e){this.initOptions=d({},e)}},{key:"init",value:function(){this.initOptions.scale&&(this.createElemets(),this.createScale())}},{key:"createElemets",value:function(){this.scale=document.createElement("div"),this.scale.classList.add("slider__scale"),this.slider.appendChild(this.scale),this.scaleValue=document.createElement("div"),this.scaleValue.classList.add("slider__scale-value"),this.slider.appendChild(this.scaleValue)}},{key:"createScale",value:function(){for(var e=this.initOptions,t=e.min,n=e.max,i=e.orientation,r=n-t,o=r/10,s=n.toString().length-1,a=0;a<=r/o*4;a+=1){var u=document.createElement("div");u.classList.add("slider__scale-marker");var l=+(a*o/4+t).toFixed(s),c=+(r-a*o/4+t).toFixed(s);if(a%4==0){u.classList.add("slider__scale-marker_large");var f=document.createElement("div");f.classList.add("slider__scale-marker-value");var p=a*o/4/r*100;"vertical"===i?(f.style.top="".concat(p,"%"),f.setAttribute("data-value","".concat(c)),f.innerHTML="".concat(c)):(f.style.left="".concat(p,"%"),f.setAttribute("data-value","".concat(l)),f.innerHTML="".concat(l)),this.scaleValue.appendChild(f)}this.scale.appendChild(u)}}},{key:"destroyScale",value:function(){this.scale&&this.scaleValue&&(this.scale.remove(),this.scaleValue.remove())}},{key:"update",value:function(){this.destroyScale(),this.init()}},{key:"getScaleValues",value:function(e){var t=void 0;return e.classList.contains("slider__scale-marker-value")&&(t=Number(e.getAttribute("data-value"))),t}}]),e}();function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const m=function(){function e(t){(0,u.Z)(this,e),(0,i.Z)(this,"lowerCount",void 0),(0,i.Z)(this,"upperCount",void 0),(0,i.Z)(this,"initOptions",void 0),this.initOptions=g({},t),this.init()}return(0,l.Z)(e,[{key:"updateObserver",value:function(e){this.updateState(e),this.update([this.initOptions.valueFrom,this.initOptions.valueTo]),this.toggletoolTip()}},{key:"updateState",value:function(e){this.initOptions=g({},e)}},{key:"getElems",value:function(){return[this.lowerCount,this.upperCount]}},{key:"init",value:function(){this.createElements();var e=this.initOptions,t=e.valueFrom,n=e.valueTo;this.update([t,n]),this.toggletoolTip()}},{key:"createElements",value:function(){var e=document.createElement("div");e.classList.add("slider__handle-lower-count"),this.lowerCount=e;var t=document.createElement("div");t.classList.add("slider__handle-lower-count"),this.upperCount=t}},{key:"toggletoolTip",value:function(){this.initOptions.toolTip?(this.lowerCount.classList.remove("slider__handle-upper-count_hidden"),this.upperCount.classList.remove("slider__handle-upper-count_hidden")):(this.lowerCount.classList.add("slider__handle-upper-count_hidden"),this.upperCount.classList.add("slider__handle-upper-count_hidden"))}},{key:"update",value:function(e){var t=a(e,2),n=t[0],i=t[1];void 0!==n&&(this.lowerCount.innerHTML=n.toString()),void 0!==i&&(this.upperCount.innerHTML=i.toString()),this.upperCount.innerHTML===this.lowerCount.innerHTML?this.lowerCount.classList.add("slider__handle-lower-count_hidden"):this.lowerCount.classList.remove("slider__handle-lower-count_hidden")}}]),e}();function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const x=function(){function e(t,n){(0,u.Z)(this,e),(0,i.Z)(this,"slider",void 0),(0,i.Z)(this,"lower",void 0),(0,i.Z)(this,"upper",void 0),(0,i.Z)(this,"initOptions",void 0),this.slider=t,this.initOptions=b({},n),this.init()}return(0,l.Z)(e,[{key:"updateObserver",value:function(e){this.updateState(e),this.checkOrientation(),this.handlersUpdate(),this.checkType(),this.toggleHandlersOrder()}},{key:"getHandlerElems",value:function(){return[this.lower,this.upper]}},{key:"handlersUpdate",value:function(){var e=[this.initOptions.valueFrom,this.initOptions.valueTo],t=e[0],n=e[1];this.shiftLeftHandler(this.convertToPercent(t)),this.shiftRightHandler(this.convertToPercent(n))}},{key:"getHandlersCoords",value:function(e,t){var n=0;if(t instanceof MouseEvent&&(n="vertical"===this.initOptions.orientation?t.clientY:t.pageX),window.TouchEvent&&t instanceof TouchEvent&&(n="vertical"===this.initOptions.orientation?t.touches[0].clientY:t.touches[0].pageX),t instanceof KeyboardEvent){var i=e.getBoundingClientRect().height/2,r=this.convertFromCustom(this.initOptions.step);"ArrowLeft"===t.key&&(n="vertical"===this.initOptions.orientation?e.getBoundingClientRect().top+i+r:e.getBoundingClientRect().left-r),"ArrowRight"===t.key&&(n="vertical"===this.initOptions.orientation?e.getBoundingClientRect().top+i-r:e.getBoundingClientRect().right+r)}var o=this.slider.getBoundingClientRect(),s=[],a=s[0],u=s[1],l=n-o.left;return"vertical"===this.initOptions.orientation&&(l=o.height-n+o.top),e===this.lower&&(a=this.convertToCustom(l)),e===this.upper&&(u=this.convertToCustom(l)),[a,u]}},{key:"updateState",value:function(e){this.initOptions=b({},e)}},{key:"init",value:function(){this.createElements(),this.shiftLeftHandler(this.convertToPercent(this.initOptions.valueFrom)),this.shiftRightHandler(this.convertToPercent(this.initOptions.valueTo)),this.checkType()}},{key:"createElements",value:function(){var e=document.createElement("div");e.classList.add("slider__handle-lower"),e.setAttribute("tabindex","-1"),this.lower=e;var t=document.createElement("div");t.classList.add("slider__handle-upper"),t.setAttribute("tabindex","-1"),this.upper=t}},{key:"toggleHandlersOrder",value:function(){document.activeElement!==this.lower||this.lower.classList.contains("slider__handle-lower_z-index-up")||(this.lower.classList.add("slider__handle-lower_z-index-up"),this.upper.classList.remove("slider__handle-upper_z-index-up")),document.activeElement!==this.upper||this.upper.classList.contains("slider__handle-upper_z-index-up")||(this.upper.classList.add("slider__handle-upper_z-index-up"),this.lower.classList.remove("slider__handle-lower_z-index-up"))}},{key:"shiftLeftHandler",value:function(e){"horizontal"===this.initOptions.orientation&&(this.lower.style.left=e+"%"),"vertical"===this.initOptions.orientation&&(this.lower.style.top=100-e+"%")}},{key:"shiftRightHandler",value:function(e){"horizontal"===this.initOptions.orientation&&(this.upper.style.left=e+"%"),"vertical"===this.initOptions.orientation&&(this.upper.style.top=100-e+"%")}},{key:"convertToPercent",value:function(e){return 100/Math.abs(this.initOptions.max-this.initOptions.min)*(-this.initOptions.min+e)}},{key:"checkSliderOrientation",value:function(){return"vertical"===this.initOptions.orientation?this.slider.getBoundingClientRect().height:this.slider.getBoundingClientRect().width}},{key:"convertToCustom",value:function(e){return e*(Math.abs(this.initOptions.max-this.initOptions.min)/this.checkSliderOrientation())+this.initOptions.min}},{key:"convertFromCustom",value:function(e){return this.checkSliderOrientation()/Math.abs(this.initOptions.max-this.initOptions.min)*e}},{key:"checkOrientation",value:function(){"vertical"===this.initOptions.orientation&&(this.upper.style.left="",this.lower.style.left=""),"horizontal"===this.initOptions.orientation&&(this.upper.style.top="",this.lower.style.top="")}},{key:"checkType",value:function(){"single"===this.initOptions.type&&this.lower.classList.add("slider__handle-lower_hidden"),"range"===this.initOptions.type&&this.lower.classList.remove("slider__handle-lower_hidden")}}]),e}();function w(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function T(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?w(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):w(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const k=function(){function e(t){(0,u.Z)(this,e),(0,i.Z)(this,"progressBar",void 0),(0,i.Z)(this,"initOptions",void 0),this.initOptions=T({},t),this.init()}return(0,l.Z)(e,[{key:"updateObserver",value:function(e){this.updateState(e),this.progressBarUpdate()}},{key:"getElems",value:function(){return this.progressBar}},{key:"updateState",value:function(e){this.initOptions=T({},e)}},{key:"init",value:function(){this.createElements(),this.progressBarUpdate()}},{key:"createElements",value:function(){var e=document.createElement("div");e.classList.add("slider__highlight"),this.progressBar=e}},{key:"progressBarUpdate",value:function(){this.checkOrientation();var e=[this.initOptions.valueFrom,this.initOptions.valueTo],t=e[0],n=e[1],i=[this.convertToPercent(t),this.convertToPercent(n)],r=i[0],o=i[1],s=o-r;"horizontal"===this.initOptions.orientation&&s>=0&&(this.progressBar.style.width=s+"%",this.progressBar.style.left=r+"%"),"vertical"===this.initOptions.orientation&&s>=0&&(this.progressBar.style.height=s+"%",this.progressBar.style.top=100-o+"%")}},{key:"convertToPercent",value:function(e){var t=this.initOptions,n=t.max,i=t.min;return 100/Math.abs(n-i)*(-i+e)}},{key:"checkOrientation",value:function(){"vertical"===this.initOptions.orientation?(this.progressBar.style.width="",this.progressBar.style.left=""):(this.progressBar.style.height="",this.progressBar.style.top="")}}]),e}();function O(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function S(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?O(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):O(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const E=function(){function e(t,n,r){(0,u.Z)(this,e),(0,i.Z)(this,"rootElem",void 0),(0,i.Z)(this,"slider",void 0),(0,i.Z)(this,"initOptions",void 0),(0,i.Z)(this,"scale",void 0),(0,i.Z)(this,"toolTip",void 0),(0,i.Z)(this,"presenter",void 0),(0,i.Z)(this,"handlers",void 0),(0,i.Z)(this,"progressBar",void 0),(0,i.Z)(this,"observers",[]),(0,i.Z)(this,"tracker",void 0),this.initOptions=S({},r),this.rootElem=t,this.presenter=n,this.init()}return(0,l.Z)(e,[{key:"updateView",value:function(e){this.updateState(e),this.checkSliderOrientation(),this.updateObservers(e)}},{key:"subScribe",value:function(e){this.observers.push(e)}},{key:"subscriber",value:function(){this.subScribe(this.handlers),this.subScribe(this.toolTip),this.subScribe(this.scale),this.subScribe(this.progressBar)}},{key:"updateState",value:function(e){this.initOptions=S({},e)}},{key:"updateObservers",value:function(e){this.observers.forEach((function(t){t.updateObserver(e)}))}},{key:"createSlider",value:function(){var e=document.createElement("div");e.classList.add("slider"),this.slider=e,this.rootElem.appendChild(this.slider);var t=document.createElement("div");t.classList.add("slider__tracker"),this.tracker=t}},{key:"createElements",value:function(){this.handlers=new x(this.tracker,this.initOptions),this.toolTip=new m(this.initOptions),this.progressBar=new k(this.initOptions)}},{key:"createScale",value:function(){var e=document.createElement("div");e.classList.add("slider__scale-wrapper"),this.scale=new h(e,this.initOptions),this.slider.appendChild(e)}},{key:"appendElements",value:function(){var e=this,t=a(this.toolTip.getElems(),2),n=t[0],i=t[1],r=a(this.handlers.getHandlerElems(),2),o=r[0],s=r[1],u=this.progressBar.getElems();this.slider.appendChild(this.tracker),o.appendChild(n),s.appendChild(i),[o,s,u].forEach((function(t){return e.tracker.appendChild(t)}))}},{key:"init",value:function(){this.createSlider(),this.createElements(),this.appendElements(),this.createScale(),this.subscriber(),this.checkSliderOrientation(),this.addListeners()}},{key:"checkSliderOrientation",value:function(){"vertical"===this.initOptions.orientation?this.slider.classList.add("slider_vertical"):this.slider.classList.remove("slider_vertical")}},{key:"updateHandlers",value:function(e,t){var n=a(this.handlers.getHandlersCoords(e,t),2),i=n[0],r=n[1];this.presenter.changeValues([i,r])}},{key:"addEvents",value:function(e,t){t.preventDefault();var n=[this.updateHandlers.bind(this,e)],i=function e(){n.forEach((function(e){document.removeEventListener("mousemove",e),document.removeEventListener("touchmove",e)})),document.removeEventListener("mouseup",e),document.removeEventListener("touchend",e)};n.forEach((function(e){document.addEventListener("mousemove",e),document.addEventListener("touchmove",e)})),document.addEventListener("mouseup",i),document.addEventListener("touchend",i),document.ondragstart=function(){return!1}}},{key:"toSubscribeHandlersOnView",value:function(){var e=this;this.handlers.getHandlerElems().forEach((function(t){t.addEventListener("mousedown",(function(n){return e.addEvents(t,n)})),t.addEventListener("touchstart",(function(n){return e.addEvents(t,n)})),t.addEventListener("mousedown",(function(){return t.focus()})),t.addEventListener("touchstart",(function(){return t.focus()})),t.addEventListener("keydown",(function(n){"ArrowLeft"!==n.key&&"ArrowRight"!==n.key?n.preventDefault():e.updateHandlers(t,n)}))}))}},{key:"toSubscribeScaleOnView",value:function(){var e=this;this.slider.addEventListener("click",(function(t){var n=e.scale.getScaleValues(t.target);(n||0===n)&&(e.presenter.setSlider("valueFrom",e.initOptions.min),e.presenter.setSlider("valueTo",n))}))}},{key:"addListeners",value:function(){this.toSubscribeHandlersOnView(),this.toSubscribeScaleOnView()}}]),e}(),C=function(){function e(t,n){(0,u.Z)(this,e),(0,i.Z)(this,"model",void 0),(0,i.Z)(this,"view",void 0),this.model=new f(n),this.view=new E(t,this,this.getState())}return(0,l.Z)(e,[{key:"changeValues",value:function(e){var t=a(e,2),n=t[0],i=t[1];this.model.changeValues([n,i]),this.updateView()}},{key:"setSlider",value:function(e,t){this.model.setState(e,t),this.updateView()}},{key:"updateView",value:function(){var e=this.model.getState();this.view.updateView(e)}},{key:"getState",value:function(){return this.model.getState()}},{key:"onChange",value:function(e){this.model.setCustomFunction(e)}}]),e}(),j={min:-10,max:0,step:5e-4,valueFrom:-5,valueTo:0,type:"range",orientation:"horizontal",scale:!0,toolTip:!0};function L(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function A(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?L(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):L(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}!function(e){e.fn.sliderPlugin=function(e){var t=A(A({},j),e),n=new C(this[0],t);return this.setSlider=function(e,t){n.setSlider(e,t)},this.getState=function(){return n.getState()},this.sliderOnChange=function(e){n.onChange(e)},this}}(o())},710:(e,t,n)=>{var i=n(638);n(40).$=i,e.exports=i},40:(e,t,n)=>{"use strict";e.exports=function(){if("object"==typeof globalThis)return globalThis;var e;try{e=this||new Function("return this")()}catch(e){if("object"==typeof window)return window;if("object"==typeof self)return self;if(void 0!==n.g)return n.g}return e}()},638:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(i,r){"use strict";var o=[],s=Object.getPrototypeOf,a=o.slice,u=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},l=o.push,c=o.indexOf,f={},p=f.toString,d=f.hasOwnProperty,h=d.toString,v=h.call(Object),g={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},y=function(e){return null!=e&&e===e.window},b=i.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var i,r,o=(n=n||b).createElement("script");if(o.text=e,t)for(i in x)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[p.call(e)]||"object":typeof e}var k="3.6.0",O=function(e,t){return new O.fn.init(e,t)};function S(e){var t=!!e&&"length"in e&&e.length,n=T(e);return!m(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}O.fn=O.prototype={jquery:k,constructor:O,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=O.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return O.each(this,e)},map:function(e){return this.pushStack(O.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(O.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(O.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},O.extend=O.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for("boolean"==typeof s&&(l=s,s=arguments[a]||{},a++),"object"==typeof s||m(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(l&&i&&(O.isPlainObject(i)||(r=Array.isArray(i)))?(n=s[t],o=r&&!Array.isArray(n)?[]:r||O.isPlainObject(n)?n:{},r=!1,s[t]=O.extend(l,o,i)):void 0!==i&&(s[t]=i));return s},O.extend({expando:"jQuery"+(k+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e)||(t=s(e))&&("function"!=typeof(n=d.call(t,"constructor")&&t.constructor)||h.call(n)!==v))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(S(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?O.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(S(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return u(s)},guid:1,support:g}),"function"==typeof Symbol&&(O.fn[Symbol.iterator]=o[Symbol.iterator]),O.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var E=function(e){var t,n,i,r,o,s,a,u,l,c,f,p,d,h,v,g,m,y,b,x="sizzle"+1*new Date,w=e.document,T=0,k=0,O=ue(),S=ue(),E=ue(),C=ue(),j=function(e,t){return e===t&&(f=!0),0},L={}.hasOwnProperty,A=[],D=A.pop,P=A.push,N=A.push,_=A.slice,H=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},q="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",F="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",M="\\[[\\x20\\t\\r\\n\\f]*("+F+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+I+"*\\]",R=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",B=new RegExp(I+"+","g"),V=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),Z=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),W=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),$=new RegExp(I+"|>"),z=new RegExp(R),U=new RegExp("^"+F+"$"),X={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+q+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){p()},se=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{N.apply(A=_.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){N={apply:A.length?function(e,t){P.apply(e,_.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ae(e,t,i,r){var o,a,l,c,f,h,m,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return i;if(!r&&(p(t),t=t||d,v)){if(11!==w&&(f=K.exec(e)))if(o=f[1]){if(9===w){if(!(l=t.getElementById(o)))return i;if(l.id===o)return i.push(l),i}else if(y&&(l=y.getElementById(o))&&b(t,l)&&l.id===o)return i.push(l),i}else{if(f[2])return N.apply(i,t.getElementsByTagName(e)),i;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return N.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!C[e+" "]&&(!g||!g.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(m=e,y=t,1===w&&($.test(e)||W.test(e))){for((y=ee.test(e)&&me(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(ie,re):t.setAttribute("id",c=x)),a=(h=s(e)).length;a--;)h[a]=(c?"#"+c:":scope")+" "+be(h[a]);m=h.join(",")}try{return N.apply(i,y.querySelectorAll(m)),i}catch(t){C(e,!0)}finally{c===x&&t.removeAttribute("id")}}}return u(e.replace(V,"$1"),t,i,r)}function ue(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function le(e){return e[x]=!0,e}function ce(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ve(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return le((function(t){return t=+t,le((function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))}))}))}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},o=ae.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},p=ae.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:w;return s!=d&&9===s.nodeType&&s.documentElement?(h=(d=s).documentElement,v=!o(d),w!=d&&(r=d.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",oe,!1):r.attachEvent&&r.attachEvent("onunload",oe)),n.scope=ce((function(e){return h.appendChild(e).appendChild(d.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(d.getElementsByClassName),n.getById=ce((function(e){return h.appendChild(e).id=x,!d.getElementsByName||!d.getElementsByName(x).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},m=[],g=[],(n.qsa=J.test(d.querySelectorAll))&&(ce((function(e){var t;h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+q+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),(t=d.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=J.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),m.push("!=",R)})),g=g.length&&new RegExp(g.join("|")),m=m.length&&new RegExp(m.join("|")),t=J.test(h.compareDocumentPosition),b=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},j=t?function(e,t){if(e===t)return f=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==d||e.ownerDocument==w&&b(w,e)?-1:t==d||t.ownerDocument==w&&b(w,t)?1:c?H(c,e)-H(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e==d?-1:t==d?1:r?-1:o?1:c?H(c,e)-H(c,t):0;if(r===o)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?pe(s[i],a[i]):s[i]==w?-1:a[i]==w?1:0},d):d},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&v&&!C[t+" "]&&(!m||!m.test(t))&&(!g||!g.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){C(t,!0)}return ae(t,d,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=d&&p(e),b(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=d&&p(e);var r=i.attrHandle[t.toLowerCase()],o=r&&L.call(i.attrHandle,t.toLowerCase())?r(e,t,!v):void 0;return void 0!==o?o:n.attributes||!v?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},ae.escape=function(e){return(e+"").replace(ie,re)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],r=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(j),f){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return c=null,e},r=ae.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},i=ae.selectors={cacheLength:50,createPseudo:le,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=O[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+I+"|$)"))&&O(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=ae.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(B," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,v=o!==s?"nextSibling":"previousSibling",g=t.parentNode,m=a&&t.nodeName.toLowerCase(),y=!u&&!a,b=!1;if(g){if(o){for(;v;){for(p=t;p=p[v];)if(a?p.nodeName.toLowerCase()===m:1===p.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&y){for(b=(d=(l=(c=(f=(p=g)[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],p=d&&g.childNodes[d];p=++d&&p&&p[v]||(b=d=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[T,d,b];break}}else if(y&&(b=d=(l=(c=(f=(p=t)[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===b)for(;(p=++d&&p&&p[v]||(b=d=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==m:1!==p.nodeType)||!++b||(y&&((c=(f=p[x]||(p[x]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,b]),p!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?le((function(e,n){for(var i,o=r(e,t),s=o.length;s--;)e[i=H(e,o[s])]=!(n[i]=o[s])})):function(e){return r(e,0,n)}):r}},pseudos:{not:le((function(e){var t=[],n=[],i=a(e.replace(V,"$1"));return i[x]?le((function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))})):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}})),has:le((function(e){return function(t){return ae(e,t).length>0}})),contains:le((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:le((function(e){return U.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ve(!1),disabled:ve(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:ge((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}},i.pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=de(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function ye(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function xe(e,t,n){var i=t.dir,r=t.next,o=r||i,s=n&&"parentNode"===o,a=k++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,u){var l,c,f,p=[T,a];if(u){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,u))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(c=(f=t[x]||(t[x]={}))[t.uniqueID]||(f[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((l=c[o])&&l[0]===T&&l[1]===a)return p[2]=l[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function we(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function Te(e,t,n,i,r){for(var o,s=[],a=0,u=e.length,l=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),l&&t.push(a)));return s}function ke(e,t,n,i,r,o){return i&&!i[x]&&(i=ke(i)),r&&!r[x]&&(r=ke(r,o)),le((function(o,s,a,u){var l,c,f,p=[],d=[],h=s.length,v=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)ae(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),g=!e||!o&&t?v:Te(v,p,e,a,u),m=n?r||(o?e:h||i)?[]:s:g;if(n&&n(g,m,a,u),i)for(l=Te(m,d),i(l,[],a,u),c=l.length;c--;)(f=l[c])&&(m[d[c]]=!(g[d[c]]=f));if(o){if(r||e){if(r){for(l=[],c=m.length;c--;)(f=m[c])&&l.push(g[c]=f);r(null,m=[],l,u)}for(c=m.length;c--;)(f=m[c])&&(l=r?H(o,f):p[c])>-1&&(o[l]=!(s[l]=f))}}else m=Te(m===s?m.splice(h,m.length):m),r?r(null,s,m,u):N.apply(s,m)}))}function Oe(e){for(var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],u=s?1:0,c=xe((function(e){return e===t}),a,!0),f=xe((function(e){return H(t,e)>-1}),a,!0),p=[function(e,n,i){var r=!s&&(i||n!==l)||((t=n).nodeType?c(e,n,i):f(e,n,i));return t=null,r}];u<o;u++)if(n=i.relative[e[u].type])p=[xe(we(p),n)];else{if((n=i.filter[e[u].type].apply(null,e[u].matches))[x]){for(r=++u;r<o&&!i.relative[e[r].type];r++);return ke(u>1&&we(p),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(V,"$1"),n,u<r&&Oe(e.slice(u,r)),r<o&&Oe(e=e.slice(r)),r<o&&be(e))}p.push(n)}return we(p)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,s=ae.tokenize=function(e,t){var n,r,o,s,a,u,l,c=S[e+" "];if(c)return t?0:c.slice(0);for(a=e,u=[],l=i.preFilter;a;){for(s in n&&!(r=Z.exec(a))||(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=W.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(V," ")}),a=a.slice(n.length)),i.filter)!(r=X[s].exec(a))||l[s]&&!(r=l[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):S(e,u).slice(0)},a=ae.compile=function(e,t){var n,r=[],o=[],a=E[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=Oe(t[n]))[x]?r.push(a):o.push(a);a=E(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,s,a,u,c){var f,h,g,m=0,y="0",b=o&&[],x=[],w=l,k=o||r&&i.find.TAG("*",c),O=T+=null==w?1:Math.random()||.1,S=k.length;for(c&&(l=s==d||s||c);y!==S&&null!=(f=k[y]);y++){if(r&&f){for(h=0,s||f.ownerDocument==d||(p(f),a=!v);g=e[h++];)if(g(f,s||d,a)){u.push(f);break}c&&(T=O)}n&&((f=!g&&f)&&m--,o&&b.push(f))}if(m+=y,n&&y!==m){for(h=0;g=t[h++];)g(b,x,s,a);if(o){if(m>0)for(;y--;)b[y]||x[y]||(x[y]=D.call(u));x=Te(x)}N.apply(u,x),c&&!o&&x.length>0&&m+t.length>1&&ae.uniqueSort(u)}return c&&(T=O,l=w),b};return n?le(o):o}(o,r)),a.selector=e}return a},u=ae.select=function(e,t,n,r){var o,u,l,c,f,p="function"==typeof e&&e,d=!r&&s(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&v&&i.relative[u[1].type]){if(!(t=(i.find.ID(l.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=X.needsContext.test(e)?0:u.length;o--&&(l=u[o],!i.relative[c=l.type]);)if((f=i.find[c])&&(r=f(l.matches[0].replace(te,ne),ee.test(u[0].type)&&me(t.parentNode)||t))){if(u.splice(o,1),!(e=r.length&&be(u)))return N.apply(n,r),n;break}}return(p||a(e,d))(r,t,!v,n,!t||ee.test(e)&&me(t.parentNode)||t),n},n.sortStable=x.split("").sort(j).join("")===x,n.detectDuplicates=!!f,p(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||fe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||fe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||fe(q,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),ae}(i);O.find=E,O.expr=E.selectors,O.expr[":"]=O.expr.pseudos,O.uniqueSort=O.unique=E.uniqueSort,O.text=E.getText,O.isXMLDoc=E.isXML,O.contains=E.contains,O.escapeSelector=E.escape;var C=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&O(e).is(n))break;i.push(e)}return i},j=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},L=O.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,t,n){return m(t)?O.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?O.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?O.grep(e,(function(e){return c.call(t,e)>-1!==n})):O.filter(t,e,n)}O.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?O.find.matchesSelector(i,e)?[i]:[]:O.find.matches(e,O.grep(t,(function(e){return 1===e.nodeType})))},O.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(O(e).filter((function(){for(t=0;t<i;t++)if(O.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)O.find(e,r[t],n);return i>1?O.uniqueSort(n):n},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&L.test(e)?O(e):e||[],!1).length}});var N,_=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(O.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||N,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:_.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof O?t[0]:t,O.merge(this,O.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),D.test(i[1])&&O.isPlainObject(t))for(i in t)m(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=b.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(O):O.makeArray(e,this)}).prototype=O.fn,N=O(b);var H=/^(?:parents|prev(?:Until|All))/,q={children:!0,contents:!0,next:!0,prev:!0};function I(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}O.fn.extend({has:function(e){var t=O(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(O.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&O(e);if(!L.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&O.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?O.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?c.call(O(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(O.uniqueSort(O.merge(this.get(),O(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),O.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return I(e,"nextSibling")},prev:function(e){return I(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return j((e.parentNode||{}).firstChild,e)},children:function(e){return j(e.firstChild)},contents:function(e){return null!=e.contentDocument&&s(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),O.merge([],e.childNodes))}},(function(e,t){O.fn[e]=function(n,i){var r=O.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=O.filter(i,r)),this.length>1&&(q[e]||O.uniqueSort(r),H.test(e)&&r.reverse()),this.pushStack(r)}}));var F=/[^\x20\t\r\n\f]+/g;function M(e){return e}function R(e){throw e}function B(e,t,n,i){var r;try{e&&m(r=e.promise)?r.call(e).done(t).fail(n):e&&m(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}O.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return O.each(e.match(F)||[],(function(e,n){t[n]=!0})),t}(e):O.extend({},e);var t,n,i,r,o=[],s=[],a=-1,u=function(){for(r=r||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){O.each(n,(function(n,i){m(i)?e.unique&&l.has(i)||o.push(i):i&&i.length&&"string"!==T(i)&&t(i)}))}(arguments),n&&!t&&u()),this},remove:function(){return O.each(arguments,(function(e,t){for(var n;(n=O.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--})),this},has:function(e){return e?O.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!i}};return l},O.extend({Deferred:function(e){var t=[["notify","progress",O.Callbacks("memory"),O.Callbacks("memory"),2],["resolve","done",O.Callbacks("once memory"),O.Callbacks("once memory"),0,"resolved"],["reject","fail",O.Callbacks("once memory"),O.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return O.Deferred((function(n){O.each(t,(function(t,i){var r=m(e[i[4]])&&e[i[4]];o[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&m(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,r){var o=0;function s(e,t,n,r){return function(){var a=this,u=arguments,l=function(){var i,l;if(!(e<o)){if((i=n.apply(a,u))===t.promise())throw new TypeError("Thenable self-resolution");l=i&&("object"==typeof i||"function"==typeof i)&&i.then,m(l)?r?l.call(i,s(o,t,M,r),s(o,t,R,r)):(o++,l.call(i,s(o,t,M,r),s(o,t,R,r),s(o,t,M,t.notifyWith))):(n!==M&&(a=void 0,u=[i]),(r||t.resolveWith)(a,u))}},c=r?l:function(){try{l()}catch(i){O.Deferred.exceptionHook&&O.Deferred.exceptionHook(i,c.stackTrace),e+1>=o&&(n!==R&&(a=void 0,u=[i]),t.rejectWith(a,u))}};e?c():(O.Deferred.getStackHook&&(c.stackTrace=O.Deferred.getStackHook()),i.setTimeout(c))}}return O.Deferred((function(i){t[0][3].add(s(0,i,m(r)?r:M,i.notifyWith)),t[1][3].add(s(0,i,m(e)?e:M)),t[2][3].add(s(0,i,m(n)?n:R))})).promise()},promise:function(e){return null!=e?O.extend(e,r):r}},o={};return O.each(t,(function(e,i){var s=i[2],a=i[5];r[i[1]]=s.add,a&&s.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(i[3].fire),o[i[0]]=function(){return o[i[0]+"With"](this===o?void 0:this,arguments),this},o[i[0]+"With"]=s.fireWith})),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=a.call(arguments),o=O.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?a.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(B(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||m(r[n]&&r[n].then)))return o.then();for(;n--;)B(r[n],s(n),o.reject);return o.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;O.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&V.test(e.name)&&i.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},O.readyException=function(e){i.setTimeout((function(){throw e}))};var Z=O.Deferred();function W(){b.removeEventListener("DOMContentLoaded",W),i.removeEventListener("load",W),O.ready()}O.fn.ready=function(e){return Z.then(e).catch((function(e){O.readyException(e)})),this},O.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--O.readyWait:O.isReady)||(O.isReady=!0,!0!==e&&--O.readyWait>0||Z.resolveWith(b,[O]))}}),O.ready.then=Z.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?i.setTimeout(O.ready):(b.addEventListener("DOMContentLoaded",W),i.addEventListener("load",W));var $=function(e,t,n,i,r,o,s){var a=0,u=e.length,l=null==n;if("object"===T(n))for(a in r=!0,n)$(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,m(i)||(s=!0),l&&(s?(t.call(e,i),t=null):(l=t,t=function(e,t,n){return l.call(O(e),n)})),t))for(;a<u;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(z,"ms-").replace(U,X)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=O.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[Y(t)]=n;else for(i in t)r[Y(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in i?[t]:t.match(F)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||O.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!O.isEmptyObject(t)}};var J=new Q,K=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}O.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),O.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=Y(i.slice(5)),ne(o,i,r[i]));J.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){K.set(this,e)})):$(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=K.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),O.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,O.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=O.queue(e,t),i=n.length,r=n.shift(),o=O._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,(function(){O.dequeue(e,t)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:O.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),O.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?O.queue(this[0],e):void 0===t?this:this.each((function(){var n=O.queue(this,e,t);O._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&O.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){O.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=O.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=J.get(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=b.documentElement,ae=function(e){return O.contains(e.ownerDocument,e)},ue={composed:!0};se.getRootNode&&(ae=function(e){return O.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===O.css(e,"display")};function ce(e,t,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return O.css(e,t,"")},u=a(),l=n&&n[3]||(O.cssNumber[t]?"":"px"),c=e.nodeType&&(O.cssNumber[t]||"px"!==l&&+u)&&re.exec(O.css(e,t));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;s--;)O.style(e,t,c+l),(1-o)*(1-(o=a()/u||.5))<=0&&(s=0),c/=o;c*=2,O.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=l,i.start=c,i.end=r)),r}var fe={};function pe(e){var t,n=e.ownerDocument,i=e.nodeName,r=fe[i];return r||(t=n.body.appendChild(n.createElement(i)),r=O.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),fe[i]=r,r)}function de(e,t){for(var n,i,r=[],o=0,s=e.length;o<s;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=J.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&le(i)&&(r[o]=pe(i))):"none"!==n&&(r[o]="none",J.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}O.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?O(this).show():O(this).hide()}))}});var he,ve,ge=/^(?:checkbox|radio)$/i,me=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i;he=b.createDocumentFragment().appendChild(b.createElement("div")),(ve=b.createElement("input")).setAttribute("type","radio"),ve.setAttribute("checked","checked"),ve.setAttribute("name","t"),he.appendChild(ve),g.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",g.option=!!he.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function xe(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?O.merge([e],n):n}function we(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,g.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var Te=/<|&#?\w+;/;function ke(e,t,n,i,r){for(var o,s,a,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===T(o))O.merge(p,o.nodeType?[o]:o);else if(Te.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(me.exec(o)||["",""])[1].toLowerCase(),u=be[a]||be._default,s.innerHTML=u[1]+O.htmlPrefilter(o)+u[2],c=u[0];c--;)s=s.lastChild;O.merge(p,s.childNodes),(s=f.firstChild).textContent=""}else p.push(t.createTextNode(o));for(f.textContent="",d=0;o=p[d++];)if(i&&O.inArray(o,i)>-1)r&&r.push(o);else if(l=ae(o),s=xe(f.appendChild(o),"script"),l&&we(s),n)for(c=0;o=s[c++];)ye.test(o.type||"")&&n.push(o);return f}var Oe=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Ee(){return!1}function Ce(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function je(e,t,n,i,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)je(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ee;else if(!r)return e;return 1===o&&(s=r,r=function(e){return O().off(e),s.apply(this,arguments)},r.guid=s.guid||(s.guid=O.guid++)),e.each((function(){O.event.add(this,t,r,i,n)}))}function Le(e,t,n){n?(J.set(e,t,!1),O.event.add(e,t,{namespace:!1,handler:function(e){var i,r,o=J.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(O.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=a.call(arguments),J.set(this,t,o),i=n(this,t),this[t](),o!==(r=J.get(this,t))||i?J.set(this,t,!1):r={},o!==r)return e.stopImmediatePropagation(),e.preventDefault(),r&&r.value}else o.length&&(J.set(this,t,{value:O.event.trigger(O.extend(o[0],O.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&O.event.add(e,t,Se)}O.event={global:{},add:function(e,t,n,i,r){var o,s,a,u,l,c,f,p,d,h,v,g=J.get(e);if(G(e))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&O.find.matchesSelector(se,r),n.guid||(n.guid=O.guid++),(u=g.events)||(u=g.events=Object.create(null)),(s=g.handle)||(s=g.handle=function(t){return void 0!==O&&O.event.triggered!==t.type?O.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(F)||[""]).length;l--;)d=v=(a=Oe.exec(t[l])||[])[1],h=(a[2]||"").split(".").sort(),d&&(f=O.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,f=O.event.special[d]||{},c=O.extend({type:d,origType:v,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&O.expr.match.needsContext.test(r),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,i,h,s)||e.addEventListener&&e.addEventListener(d,s)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,c):p.push(c),O.event.global[d]=!0)},remove:function(e,t,n,i,r){var o,s,a,u,l,c,f,p,d,h,v,g=J.hasData(e)&&J.get(e);if(g&&(u=g.events)){for(l=(t=(t||"").match(F)||[""]).length;l--;)if(d=v=(a=Oe.exec(t[l])||[])[1],h=(a[2]||"").split(".").sort(),d){for(f=O.event.special[d]||{},p=u[d=(i?f.delegateType:f.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!r&&v!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));s&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||O.removeEvent(e,d,g.handle),delete u[d])}else for(d in u)O.event.remove(e,d+t[l],n,i,!0);O.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=new Array(arguments.length),u=O.event.fix(e),l=(J.get(this,"events")||Object.create(null))[u.type]||[],c=O.event.special[u.type]||{};for(a[0]=u,t=1;t<arguments.length;t++)a[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){for(s=O.event.handlers.call(this,u,l),t=0;(r=s[t++])&&!u.isPropagationStopped();)for(u.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(i=((O.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,a))&&!1===(u.result=i)&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,i,r,o,s,a=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],s={},n=0;n<u;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?O(r,this).index(l)>-1:O.find(r,this,null,[l]).length),s[r]&&o.push(i);o.length&&a.push({elem:l,handlers:o})}return l=this,u<t.length&&a.push({elem:l,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(O.Event.prototype,e,{enumerable:!0,configurable:!0,get:m(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[O.expando]?e:new O.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&A(t,"input")&&Le(t,"click",Se),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&A(t,"input")&&Le(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&A(t,"input")&&J.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},O.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},O.Event=function(e,t){if(!(this instanceof O.Event))return new O.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Ee,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&O.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[O.expando]=!0},O.Event.prototype={constructor:O.Event,isDefaultPrevented:Ee,isPropagationStopped:Ee,isImmediatePropagationStopped:Ee,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},O.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},O.event.addProp),O.each({focus:"focusin",blur:"focusout"},(function(e,t){O.event.special[e]={setup:function(){return Le(this,e,Ce),!1},trigger:function(){return Le(this,e),!0},_default:function(){return!0},delegateType:t}})),O.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){O.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||O.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),O.fn.extend({on:function(e,t,n,i){return je(this,e,t,n,i)},one:function(e,t,n,i){return je(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,O(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ee),this.each((function(){O.event.remove(this,e,n,t)}))}});var Ae=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Pe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ne(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&O(e).children("tbody")[0]||e}function _e(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function He(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function qe(e,t){var n,i,r,o,s,a;if(1===t.nodeType){if(J.hasData(e)&&(a=J.get(e).events))for(r in J.remove(t,"handle events"),a)for(n=0,i=a[r].length;n<i;n++)O.event.add(t,r,a[r][n]);K.hasData(e)&&(o=K.access(e),s=O.extend({},o),K.set(t,s))}}function Ie(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,i){t=u(t);var r,o,s,a,l,c,f=0,p=e.length,d=p-1,h=t[0],v=m(h);if(v||p>1&&"string"==typeof h&&!g.checkClone&&De.test(h))return e.each((function(r){var o=e.eq(r);v&&(t[0]=h.call(this,r,o.html())),Fe(o,t,n,i)}));if(p&&(o=(r=ke(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=O.map(xe(r,"script"),_e)).length;f<p;f++)l=r,f!==d&&(l=O.clone(l,!0,!0),a&&O.merge(s,xe(l,"script"))),n.call(e[f],l,f);if(a)for(c=s[s.length-1].ownerDocument,O.map(s,He),f=0;f<a;f++)l=s[f],ye.test(l.type||"")&&!J.access(l,"globalEval")&&O.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?O._evalUrl&&!l.noModule&&O._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):w(l.textContent.replace(Pe,""),l,c))}return e}function Me(e,t,n){for(var i,r=t?O.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||O.cleanData(xe(i)),i.parentNode&&(n&&ae(i)&&we(xe(i,"script")),i.parentNode.removeChild(i));return e}O.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,s,a=e.cloneNode(!0),u=ae(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||O.isXMLDoc(e)))for(s=xe(a),i=0,r=(o=xe(e)).length;i<r;i++)Ie(o[i],s[i]);if(t)if(n)for(o=o||xe(e),s=s||xe(a),i=0,r=o.length;i<r;i++)qe(o[i],s[i]);else qe(e,a);return(s=xe(a,"script")).length>0&&we(s,!u&&xe(e,"script")),a},cleanData:function(e){for(var t,n,i,r=O.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)r[i]?O.event.remove(n,i):O.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),O.fn.extend({detach:function(e){return Me(this,e,!0)},remove:function(e){return Me(this,e)},text:function(e){return $(this,(function(e){return void 0===e?O.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Fe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ne(this,e).appendChild(e)}))},prepend:function(){return Fe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ne(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(O.cleanData(xe(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return O.clone(this,e,t)}))},html:function(e){return $(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!be[(me.exec(e)||["",""])[1].toLowerCase()]){e=O.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(O.cleanData(xe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,(function(t){var n=this.parentNode;O.inArray(this,e)<0&&(O.cleanData(xe(this)),n&&n.replaceChild(t,this))}),e)}}),O.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){O.fn[e]=function(e){for(var n,i=[],r=O(e),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),O(r[s])[t](n),l.apply(i,n.get());return this.pushStack(i)}}));var Re=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),Be=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)},Ve=function(e,t,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=o[r];return i},Ze=new RegExp(oe.join("|"),"i");function We(e,t,n){var i,r,o,s,a=e.style;return(n=n||Be(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ae(e)||(s=O.style(e,t)),!g.pixelBoxStyles()&&Re.test(s)&&Ze.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(l).appendChild(c);var e=i.getComputedStyle(c);n="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",s=36===t(e.right),r=36===t(e.width),c.style.position="absolute",o=12===t(c.offsetWidth/3),se.removeChild(l),c=null}}function t(e){return Math.round(parseFloat(e))}var n,r,o,s,a,u,l=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===c.style.backgroundClip,O.extend(g,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",se.appendChild(e).appendChild(t).appendChild(n),r=i.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,se.removeChild(e)),a}}))}();var ze=["Webkit","Moz","ms"],Ue=b.createElement("div").style,Xe={};function Ye(e){return O.cssProps[e]||Xe[e]||(e in Ue?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=ze.length;n--;)if((e=ze[n]+t)in Ue)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function tt(e,t,n,i,r,o){var s="width"===t?1:0,a=0,u=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=O.css(e,n+oe[s],!0,r)),i?("content"===n&&(u-=O.css(e,"padding"+oe[s],!0,r)),"margin"!==n&&(u-=O.css(e,"border"+oe[s]+"Width",!0,r))):(u+=O.css(e,"padding"+oe[s],!0,r),"padding"!==n?u+=O.css(e,"border"+oe[s]+"Width",!0,r):a+=O.css(e,"border"+oe[s]+"Width",!0,r));return!i&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-a-.5))||0),u}function nt(e,t,n){var i=Be(e),r=(!g.boxSizingReliable()||n)&&"border-box"===O.css(e,"boxSizing",!1,i),o=r,s=We(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Re.test(s)){if(!n)return s;s="auto"}return(!g.boxSizingReliable()&&r||!g.reliableTrDimensions()&&A(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===O.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===O.css(e,"boxSizing",!1,i),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+tt(e,t,n||(r?"border":"content"),o,i,s)+"px"}function it(e,t,n,i,r){return new it.prototype.init(e,t,n,i,r)}O.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=Y(t),u=Qe.test(t),l=e.style;if(u||(t=Ye(a)),s=O.cssHooks[t]||O.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:l[t];"string"==(o=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ce(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=r&&r[3]||(O.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,i){var r,o,s,a=Y(t);return Qe.test(t)||(t=Ye(a)),(s=O.cssHooks[t]||O.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=We(e,t,i)),"normal"===r&&t in Ke&&(r=Ke[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),O.each(["height","width"],(function(e,t){O.cssHooks[t]={get:function(e,n,i){if(n)return!Ge.test(O.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,i):Ve(e,Je,(function(){return nt(e,t,i)}))},set:function(e,n,i){var r,o=Be(e),s=!g.scrollboxSize()&&"absolute"===o.position,a=(s||i)&&"border-box"===O.css(e,"boxSizing",!1,o),u=i?tt(e,t,i,a,o):0;return a&&s&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-tt(e,t,"border",!1,o)-.5)),u&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=O.css(e,t)),et(0,n,u)}}})),O.cssHooks.marginLeft=$e(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-Ve(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),O.each({margin:"",padding:"",border:"Width"},(function(e,t){O.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+oe[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(O.cssHooks[e+t].set=et)})),O.fn.extend({css:function(e,t){return $(this,(function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=Be(e),r=t.length;s<r;s++)o[t[s]]=O.css(e,t[s],!1,i);return o}return void 0!==n?O.style(e,t,n):O.css(e,t)}),e,t,arguments.length>1)}}),O.Tween=it,it.prototype={constructor:it,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||O.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(O.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=O.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=O.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){O.fx.step[e.prop]?O.fx.step[e.prop](e):1!==e.elem.nodeType||!O.cssHooks[e.prop]&&null==e.elem.style[Ye(e.prop)]?e.elem[e.prop]=e.now:O.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},O.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},O.fx=it.prototype.init,O.fx.step={};var rt,ot,st=/^(?:toggle|show|hide)$/,at=/queueHooks$/;function ut(){ot&&(!1===b.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(ut):i.setTimeout(ut,O.fx.interval),O.fx.tick())}function lt(){return i.setTimeout((function(){rt=void 0})),rt=Date.now()}function ct(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=oe[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ft(e,t,n){for(var i,r=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function pt(e,t,n){var i,r,o=0,s=pt.prefilters.length,a=O.Deferred().always((function(){delete u.elem})),u=function(){if(r)return!1;for(var t=rt||lt(),n=Math.max(0,l.startTime+l.duration-t),i=1-(n/l.duration||0),o=0,s=l.tweens.length;o<s;o++)l.tweens[o].run(i);return a.notifyWith(e,[l,i,n]),i<1&&s?n:(s||a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:O.extend({},t),opts:O.extend(!0,{specialEasing:{},easing:O.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||lt(),duration:n.duration,tweens:[],createTween:function(t,n){var i=O.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(i),i},stop:function(t){var n=0,i=t?l.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)l.tweens[n].run(1);return t?(a.notifyWith(e,[l,1,0]),a.resolveWith(e,[l,t])):a.rejectWith(e,[l,t]),this}}),c=l.props;for(function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=Y(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=O.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(c,l.opts.specialEasing);o<s;o++)if(i=pt.prefilters[o].call(l,e,c,l.opts))return m(i.stop)&&(O._queueHooks(l.elem,l.opts.queue).stop=i.stop.bind(i)),i;return O.map(c,ft,l),m(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),O.fx.timer(O.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}O.Animation=O.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match(F);for(var n,i=0,r=e.length;i<r;i++)n=e[i],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,v=e.nodeType&&le(e),g=J.get(e,"fxshow");for(i in n.queue||(null==(s=O._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,O.queue(e,"fx").length||s.empty.fire()}))}))),t)if(r=t[i],st.test(r)){if(delete t[i],o=o||"toggle"===r,r===(v?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;v=!0}d[i]=g&&g[i]||O.style(e,i)}if((u=!O.isEmptyObject(t))||!O.isEmptyObject(d))for(i in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=g&&g.display)&&(l=J.get(e,"display")),"none"===(c=O.css(e,"display"))&&(l?c=l:(de([e],!0),l=e.style.display||l,c=O.css(e,"display"),de([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===O.css(e,"float")&&(u||(p.done((function(){h.display=l})),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),u=!1,d)u||(g?"hidden"in g&&(v=g.hidden):g=J.access(e,"fxshow",{display:l}),o&&(g.hidden=!v),v&&de([e],!0),p.done((function(){for(i in v||de([e]),J.remove(e,"fxshow"),d)O.style(e,i,d[i])}))),u=ft(v?g[i]:0,i,p),i in g||(g[i]=u.start,v&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),O.speed=function(e,t,n){var i=e&&"object"==typeof e?O.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return O.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in O.fx.speeds?i.duration=O.fx.speeds[i.duration]:i.duration=O.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){m(i.old)&&i.old.call(this),i.queue&&O.dequeue(this,i.queue)},i},O.fn.extend({fadeTo:function(e,t,n,i){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=O.isEmptyObject(e),o=O.speed(t,n,i),s=function(){var t=pt(this,O.extend({},e),o);(r||J.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",o=O.timers,s=J.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&at.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||O.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=O.timers,s=i?i.length:0;for(n.finish=!0,O.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),O.each(["toggle","show","hide"],(function(e,t){var n=O.fn[t];O.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,i,r)}})),O.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){O.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),O.timers=[],O.fx.tick=function(){var e,t=0,n=O.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||O.fx.stop(),rt=void 0},O.fx.timer=function(e){O.timers.push(e),O.fx.start()},O.fx.interval=13,O.fx.start=function(){ot||(ot=!0,ut())},O.fx.stop=function(){ot=null},O.fx.speeds={slow:600,fast:200,_default:400},O.fn.delay=function(e,t){return e=O.fx&&O.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var r=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(r)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var dt,ht=O.expr.attrHandle;O.fn.extend({attr:function(e,t){return $(this,O.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){O.removeAttr(this,e)}))}}),O.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?O.prop(e,t,n):(1===o&&O.isXMLDoc(e)||(r=O.attrHooks[t.toLowerCase()]||(O.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void O.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=O.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(F);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?O.removeAttr(e,n):e.setAttribute(n,n),n}},O.each(O.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||O.find.attr;ht[t]=function(e,t,i){var r,o,s=t.toLowerCase();return i||(o=ht[s],ht[s]=r,r=null!=n(e,t,i)?s:null,ht[s]=o),r}}));var vt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function mt(e){return(e.match(F)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(F)||[]}O.fn.extend({prop:function(e,t){return $(this,O.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[O.propFix[e]||e]}))}}),O.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&O.isXMLDoc(e)||(t=O.propFix[t]||t,r=O.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=O.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(O.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),O.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){O.propFix[this.toLowerCase()]=this})),O.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,u=0;if(m(e))return this.each((function(t){O(this).addClass(e.call(this,t,yt(this)))}));if((t=bt(e)).length)for(;n=this[u++];)if(r=yt(n),i=1===n.nodeType&&" "+mt(r)+" "){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=mt(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,u=0;if(m(e))return this.each((function(t){O(this).removeClass(e.call(this,t,yt(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[u++];)if(r=yt(n),i=1===n.nodeType&&" "+mt(r)+" "){for(s=0;o=t[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=mt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):m(e)?this.each((function(n){O(this).toggleClass(e.call(this,n,yt(this),t),t)})):this.each((function(){var t,r,o,s;if(i)for(r=0,o=O(this),s=bt(e);t=s[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+mt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var xt=/\r/g;O.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=m(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,O(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=O.map(r,(function(e){return null==e?"":e+""}))),(t=O.valHooks[this.type]||O.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=O.valHooks[r.type]||O.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(xt,""):null==n?"":n:void 0}}),O.extend({valHooks:{option:{get:function(e){var t=O.find.attr(e,"value");return null!=t?t:mt(O.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:r.length;for(i=o<0?u:s?o:0;i<u;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=O(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=O.makeArray(t),s=r.length;s--;)((i=r[s]).selected=O.inArray(O.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),O.each(["radio","checkbox"],(function(){O.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=O.inArray(O(e).val(),t)>-1}},g.checkOn||(O.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in i;var wt=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};O.extend(O.event,{trigger:function(e,t,n,r){var o,s,a,u,l,c,f,p,h=[n||b],v=d.call(e,"type")?e.type:e,g=d.call(e,"namespace")?e.namespace.split("."):[];if(s=p=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!wt.test(v+O.event.triggered)&&(v.indexOf(".")>-1&&(g=v.split("."),v=g.shift(),g.sort()),l=v.indexOf(":")<0&&"on"+v,(e=e[O.expando]?e:new O.Event(v,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:O.makeArray(t,[e]),f=O.event.special[v]||{},r||!f.trigger||!1!==f.trigger.apply(n,t))){if(!r&&!f.noBubble&&!y(n)){for(u=f.delegateType||v,wt.test(u+v)||(s=s.parentNode);s;s=s.parentNode)h.push(s),a=s;a===(n.ownerDocument||b)&&h.push(a.defaultView||a.parentWindow||i)}for(o=0;(s=h[o++])&&!e.isPropagationStopped();)p=s,e.type=o>1?u:f.bindType||v,(c=(J.get(s,"events")||Object.create(null))[e.type]&&J.get(s,"handle"))&&c.apply(s,t),(c=l&&s[l])&&c.apply&&G(s)&&(e.result=c.apply(s,t),!1===e.result&&e.preventDefault());return e.type=v,r||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(h.pop(),t)||!G(n)||l&&m(n[v])&&!y(n)&&((a=n[l])&&(n[l]=null),O.event.triggered=v,e.isPropagationStopped()&&p.addEventListener(v,Tt),n[v](),e.isPropagationStopped()&&p.removeEventListener(v,Tt),O.event.triggered=void 0,a&&(n[l]=a)),e.result}},simulate:function(e,t,n){var i=O.extend(new O.Event,n,{type:e,isSimulated:!0});O.event.trigger(i,null,t)}}),O.fn.extend({trigger:function(e,t){return this.each((function(){O.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return O.event.trigger(e,t,n,!0)}}),g.focusin||O.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){O.event.simulate(t,e.target,O.event.fix(e))};O.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t);r||i.addEventListener(e,n,!0),J.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t)-1;r?J.access(i,t,r):(i.removeEventListener(e,n,!0),J.remove(i,t))}}}));var kt=i.location,Ot={guid:Date.now()},St=/\?/;O.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new i.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||O.error("Invalid XML: "+(n?O.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Et=/\[\]$/,Ct=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,Lt=/^(?:input|select|textarea|keygen)/i;function At(e,t,n,i){var r;if(Array.isArray(t))O.each(t,(function(t,r){n||Et.test(e)?i(e,r):At(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==T(t))i(e,t);else for(r in t)At(e+"["+r+"]",t[r],n,i)}O.param=function(e,t){var n,i=[],r=function(e,t){var n=m(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!O.isPlainObject(e))O.each(e,(function(){r(this.name,this.value)}));else for(n in e)At(n,e[n],t,r);return i.join("&")},O.fn.extend({serialize:function(){return O.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=O.prop(this,"elements");return e?O.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!O(this).is(":disabled")&&Lt.test(this.nodeName)&&!jt.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=O(this).val();return null==n?null:Array.isArray(n)?O.map(n,(function(e){return{name:t.name,value:e.replace(Ct,"\r\n")}})):{name:t.name,value:n.replace(Ct,"\r\n")}})).get()}});var Dt=/%20/g,Pt=/#.*$/,Nt=/([?&])_=[^&]*/,_t=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ht=/^(?:GET|HEAD)$/,qt=/^\/\//,It={},Ft={},Mt="*/".concat("*"),Rt=b.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(F)||[];if(m(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Vt(e,t,n,i){var r={},o=e===Ft;function s(a){var u;return r[a]=!0,O.each(e[a]||[],(function(e,a){var l=a(t,n,i);return"string"!=typeof l||o||r[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),s(l),!1)})),u}return s(t.dataTypes[0])||!r["*"]&&s("*")}function Zt(e,t){var n,i,r=O.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&O.extend(!0,e,i),e}Rt.href=kt.href,O.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Mt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":O.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Zt(Zt(e,O.ajaxSettings),t):Zt(O.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,r,o,s,a,u,l,c,f,p,d=O.ajaxSetup({},t),h=d.context||d,v=d.context&&(h.nodeType||h.jquery)?O(h):O.event,g=O.Deferred(),m=O.Callbacks("once memory"),y=d.statusCode||{},x={},w={},T="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s)for(s={};t=_t.exec(o);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(e,t){return null==l&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==l&&(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)k.always(e[k.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||T;return n&&n.abort(t),S(0,t),this}};if(g.promise(k),d.url=((e||d.url||kt.href)+"").replace(qt,kt.protocol+"//"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(F)||[""],null==d.crossDomain){u=b.createElement("a");try{u.href=d.url,u.href=u.href,d.crossDomain=Rt.protocol+"//"+Rt.host!=u.protocol+"//"+u.host}catch(e){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=O.param(d.data,d.traditional)),Vt(It,d,t,k),l)return k;for(f in(c=O.event&&d.global)&&0==O.active++&&O.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Ht.test(d.type),r=d.url.replace(Pt,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Dt,"+")):(p=d.url.slice(r.length),d.data&&(d.processData||"string"==typeof d.data)&&(r+=(St.test(r)?"&":"?")+d.data,delete d.data),!1===d.cache&&(r=r.replace(Nt,"$1"),p=(St.test(r)?"&":"?")+"_="+Ot.guid+++p),d.url=r+p),d.ifModified&&(O.lastModified[r]&&k.setRequestHeader("If-Modified-Since",O.lastModified[r]),O.etag[r]&&k.setRequestHeader("If-None-Match",O.etag[r])),(d.data&&d.hasContent&&!1!==d.contentType||t.contentType)&&k.setRequestHeader("Content-Type",d.contentType),k.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Mt+"; q=0.01":""):d.accepts["*"]),d.headers)k.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(h,k,d)||l))return k.abort();if(T="abort",m.add(d.complete),k.done(d.success),k.fail(d.error),n=Vt(Ft,d,t,k)){if(k.readyState=1,c&&v.trigger("ajaxSend",[k,d]),l)return k;d.async&&d.timeout>0&&(a=i.setTimeout((function(){k.abort("timeout")}),d.timeout));try{l=!1,n.send(x,S)}catch(e){if(l)throw e;S(-1,e)}}else S(-1,"No Transport");function S(e,t,s,u){var f,p,b,x,w,T=t;l||(l=!0,a&&i.clearTimeout(a),n=void 0,o=u||"",k.readyState=e>0?4:0,f=e>=200&&e<300||304===e,s&&(x=function(e,t,n){for(var i,r,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||e.converters[r+" "+u[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}(d,k,s)),!f&&O.inArray("script",d.dataTypes)>-1&&O.inArray("json",d.dataTypes)<0&&(d.converters["text script"]=function(){}),x=function(e,t,n,i){var r,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=l[u+" "+o]||l["* "+o]))for(r in l)if((a=r.split(" "))[1]===o&&(s=l[u+" "+a[0]]||l["* "+a[0]])){!0===s?s=l[r]:!0!==l[r]&&(o=a[0],c.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(d,x,k,f),f?(d.ifModified&&((w=k.getResponseHeader("Last-Modified"))&&(O.lastModified[r]=w),(w=k.getResponseHeader("etag"))&&(O.etag[r]=w)),204===e||"HEAD"===d.type?T="nocontent":304===e?T="notmodified":(T=x.state,p=x.data,f=!(b=x.error))):(b=T,!e&&T||(T="error",e<0&&(e=0))),k.status=e,k.statusText=(t||T)+"",f?g.resolveWith(h,[p,T,k]):g.rejectWith(h,[k,T,b]),k.statusCode(y),y=void 0,c&&v.trigger(f?"ajaxSuccess":"ajaxError",[k,d,f?p:b]),m.fireWith(h,[k,T]),c&&(v.trigger("ajaxComplete",[k,d]),--O.active||O.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,n){return O.get(e,t,n,"json")},getScript:function(e,t){return O.get(e,void 0,t,"script")}}),O.each(["get","post"],(function(e,t){O[t]=function(e,n,i,r){return m(n)&&(r=r||i,i=n,n=void 0),O.ajax(O.extend({url:e,type:t,dataType:r,data:n,success:i},O.isPlainObject(e)&&e))}})),O.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),O._evalUrl=function(e,t,n){return O.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){O.globalEval(e,t,n)}})},O.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=O(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return m(e)?this.each((function(t){O(this).wrapInner(e.call(this,t))})):this.each((function(){var t=O(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=m(e);return this.each((function(n){O(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){O(this).replaceWith(this.childNodes)})),this}}),O.expr.pseudos.hidden=function(e){return!O.expr.pseudos.visible(e)},O.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},O.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},$t=O.ajaxSettings.xhr();g.cors=!!$t&&"withCredentials"in $t,g.ajax=$t=!!$t,O.ajaxTransport((function(e){var t,n;if(g.cors||$t&&!e.crossDomain)return{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Wt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),O.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),O.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return O.globalEval(e),e}}}),O.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),O.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=O("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var zt,Ut=[],Xt=/(=)\?(?=&|$)|\?\?/;O.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Ut.pop()||O.expando+"_"+Ot.guid++;return this[e]=!0,e}}),O.ajaxPrefilter("json jsonp",(function(e,t,n){var r,o,s,a=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Xt,"$1"+r):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||O.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=i[r],i[r]=function(){s=arguments},n.always((function(){void 0===o?O(i).removeProp(r):i[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,Ut.push(r)),s&&m(o)&&o(s[0]),s=o=void 0})),"script"})),g.createHTMLDocument=((zt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===zt.childNodes.length),O.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((i=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(i)):t=b),o=!n&&[],(r=D.exec(e))?[t.createElement(r[1])]:(r=ke([e],t,o),o&&o.length&&O(o).remove(),O.merge([],r.childNodes)));var i,r,o},O.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=mt(e.slice(a)),e=e.slice(0,a)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&O.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){o=arguments,s.html(i?O("<div>").append(O.parseHTML(e)).find(i):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},O.expr.pseudos.animated=function(e){return O.grep(O.timers,(function(t){return e===t.elem})).length},O.offset={setOffset:function(e,t,n){var i,r,o,s,a,u,l=O.css(e,"position"),c=O(e),f={};"static"===l&&(e.style.position="relative"),a=c.offset(),o=O.css(e,"top"),u=O.css(e,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(s=(i=c.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(u)||0),m(t)&&(t=t.call(e,n,O.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+r),"using"in t?t.using.call(e,f):c.css(f)}},O.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){O.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===O.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===O.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=O(e).offset()).top+=O.css(e,"borderTopWidth",!0),r.left+=O.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-O.css(i,"marginTop",!0),left:t.left-r.left-O.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===O.css(e,"position");)e=e.offsetParent;return e||se}))}}),O.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;O.fn[e]=function(i){return $(this,(function(e,i,r){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r}),e,i,arguments.length)}})),O.each(["top","left"],(function(e,t){O.cssHooks[t]=$e(g.pixelPosition,(function(e,n){if(n)return n=We(e,t),Re.test(n)?O(e).position()[t]+"px":n}))})),O.each({Height:"height",Width:"width"},(function(e,t){O.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){O.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return $(this,(function(t,n,r){var o;return y(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?O.css(t,n,a):O.style(t,n,r,a)}),t,s?r:void 0,s)}}))})),O.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){O.fn[t]=function(e){return this.on(t,e)}})),O.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),O.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){O.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Yt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;O.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return i=a.call(arguments,2),r=function(){return e.apply(t||this,i.concat(a.call(arguments)))},r.guid=e.guid=e.guid||O.guid++,r},O.holdReady=function(e){e?O.readyWait++:O.ready(!0)},O.isArray=Array.isArray,O.parseJSON=JSON.parse,O.nodeName=A,O.isFunction=m,O.isWindow=y,O.camelCase=Y,O.type=T,O.now=Date.now,O.isNumeric=function(e){var t=O.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},O.trim=function(e){return null==e?"":(e+"").replace(Yt,"")},void 0===(n=function(){return O}.apply(t,[]))||(e.exports=n);var Gt=i.jQuery,Qt=i.$;return O.noConflict=function(e){return i.$===O&&(i.$=Qt),e&&i.jQuery===O&&(i.jQuery=Gt),O},void 0===r&&(i.jQuery=i.$=O),O}))},951:(e,t,n)=>{"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,{Z:()=>i})},976:(e,t,n)=>{"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}n.d(t,{Z:()=>r})},649:(e,t,n)=>{"use strict";function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>i})}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(951),t=n(976),i=n(649);function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}var o=function(){function n(t,r){(0,e.Z)(this,n),(0,i.Z)(this,"valueFromInput",void 0),(0,i.Z)(this,"valueToInput",void 0),(0,i.Z)(this,"minInput",void 0),(0,i.Z)(this,"maxInput",void 0),(0,i.Z)(this,"stepInput",void 0),(0,i.Z)(this,"orientation",void 0),(0,i.Z)(this,"type",void 0),(0,i.Z)(this,"toolTip",void 0),(0,i.Z)(this,"scale",void 0),(0,i.Z)(this,"rangeSlider",void 0),(0,i.Z)(this,"configPaneElement",void 0),(0,i.Z)(this,"rootElement",void 0),this.rangeSlider=t,this.rootElement=r,this.init()}return(0,t.Z)(n,[{key:"init",value:function(){this.createConfigPanel(),this.createInputsElems(),this.createBtnElems(),this.initElems(),this.initValues(),this.addListeners()}},{key:"createConfigPanel",value:function(){var e=document.createElement("div");e.classList.add("config","js-config"),this.configPaneElement=e,this.rootElement.appendChild(this.configPaneElement)}},{key:"getElemsClass",value:function(){return{valueFrom:"value-from",valueTo:"value-to",min:"min",max:"max",step:"step",orientation:"orientation",type:"type",toolTip:"tool-tip",scale:"scale"}}},{key:"initElems",value:function(){var e,t=this.configPaneElement.getElementsByTagName("input"),n=this.getElemsClass(),i=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0,o=function(){};return{s:o,n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){u=!0,s=e},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw s}}}}(t);try{for(i.s();!(e=i.n()).done;){var o=e.value;o.matches(".js-config-".concat(n.valueFrom))&&(this.valueFromInput=o),o.matches(".js-config-".concat(n.valueTo))&&(this.valueToInput=o),o.matches(".js-config-".concat(n.min))&&(this.minInput=o),o.matches(".js-config-".concat(n.max))&&(this.maxInput=o),o.matches(".js-config-".concat(n.step))&&(this.stepInput=o),o.matches(".js-config-".concat(n.orientation))&&(this.orientation=o),o.matches(".js-config-".concat(n.type))&&(this.type=o),o.matches(".js-config-".concat(n.toolTip))&&(this.toolTip=o),o.matches(".js-config-".concat(n.scale))&&(this.scale=o)}}catch(e){i.e(e)}finally{i.f()}}},{key:"createInputsElems",value:function(){var e=document.createElement("div");e.classList.add("config__group");for(var t=this.getElemsClass(),n=[{name:"value from",class:t.valueFrom},{name:"value to",class:t.valueTo},{name:"min",class:t.min},{name:"max",class:t.max},{name:"step",class:t.step}],i=0;i<n.length;i+=1){var r=document.createElement("div");r.classList.add("config__input"),r.innerHTML='\n        <div class="config__input-name">\n          '.concat(n[i].name,':\n        </div>\n        <div class="config__inputs">\n          <div class="config__dec"></div>\n            <input type="number" class="config__input-value js-config-').concat(n[i].class,'">\n          <div class="config__inc"></div>\n        </div>\n      '),e.appendChild(r)}this.configPaneElement.appendChild(e)}},{key:"createBtnElems",value:function(){var e=document.createElement("div");e.classList.add("config__group");for(var t=this.getElemsClass(),n=[{name:"horizontal",class:t.orientation},{name:"range",class:t.type},{name:"tool-tip",class:t.toolTip},{name:"scale",class:t.scale}],i=0;i<n.length;i+=1){var r=document.createElement("div");r.classList.add("config__input","config__input_btn"),r.innerHTML='\n        <div class="config__input-name">\n          '.concat(n[i].name,'\n        </div>\n        <label class="config__button">\n          <input type="checkbox" class="js-config-').concat(n[i].class,'">\n          <div class="config__button-on"></div>\n        </label>\n      '),e.appendChild(r)}this.configPaneElement.appendChild(e)}},{key:"addAttributes",value:function(){var e=this.rangeSlider.getState(),t=e.min,n=e.max,i=e.step;[this.valueFromInput,this.valueToInput,this.minInput,this.maxInput].forEach((function(e){e.setAttribute("max","".concat(n)),e.setAttribute("min","".concat(t))})),this.stepInput.setAttribute("max","".concat(n-t)),this.stepInput.setAttribute("min","".concat(i))}},{key:"initValues",value:function(){var e=this.rangeSlider.getState(),t=e.min,n=e.max,i=e.valueFrom,r=e.valueTo,o=e.step;this.valueFromInput.value="".concat(i),this.valueToInput.value="".concat(r),this.minInput.value="".concat(t),this.maxInput.value="".concat(n),this.stepInput.value="".concat(o),this.addAttributes(),this.isBtnActive()}},{key:"isBtnActive",value:function(){var e=this.rangeSlider.getState(),t=e.orientation,n=e.type,i=e.scale,r=e.toolTip;this.orientation.checked="horizontal"===t,this.toolTip.checked=!0===r,this.type.checked="range"===n,this.scale.checked=!0===i}},{key:"setValue",value:function(e,t){this.rangeSlider.setSlider(e,t);var n=this.rangeSlider.getState()[e];switch(e){case"valueFrom":this.valueFromInput.value="".concat(n);break;case"valueTo":this.valueToInput.value="".concat(n);break;case"min":this.minInput.value="".concat(n);break;case"max":this.maxInput.value="".concat(n);break;case"step":this.stepInput.value="".concat(n)}}},{key:"changeValues",value:function(e){var t=e.target,n=this.rangeSlider.getState(),i=n.min,r=n.max,o=n.valueFrom,s=n.valueTo,a=n.step,u=n.type;if(t.classList.contains("config__inc")||t.classList.contains("config__dec")){var l=t.parentNode.querySelector("input"),c=t.classList.contains("config__inc")?a:-a;if(l===this.valueFromInput&&"single"!==u&&this.setValue("valueFrom",o+c),l===this.valueToInput&&this.setValue("valueTo",s+c),l===this.minInput&&(this.setValue("min",i+c),"single"===u&&(i=this.rangeSlider.getState().min,this.valueFromInput.value="".concat(i))),l===this.maxInput&&this.setValue("max",r+c),l===this.stepInput){var f=(r-i)/100;t.classList.contains("config__inc")&&this.setValue("step",a+f),t.classList.contains("config__dec")&&this.setValue("step",a-f)}}}},{key:"setValues",value:function(){var e=this.rangeSlider.getState(),t=e.valueFrom,n=e.valueTo;this.valueFromInput.value=t.toString(),this.valueToInput.value=n.toString()}},{key:"setType",value:function(){var e=this.rangeSlider.getState().min;this.type.checked?this.rangeSlider.setSlider("type","range"):(this.rangeSlider.setSlider("type","single"),this.valueFromInput.value="".concat(e))}},{key:"setToolTip",value:function(){this.toolTip.checked?this.rangeSlider.setSlider("toolTip",!0):this.rangeSlider.setSlider("toolTip",!1)}},{key:"setScale",value:function(){this.scale.checked?this.rangeSlider.setSlider("scale",!0):this.rangeSlider.setSlider("scale",!1)}},{key:"setOrientation",value:function(){this.orientation.checked?this.rangeSlider.setSlider("orientation","horizontal"):this.rangeSlider.setSlider("orientation","vertical")}},{key:"setSlider",value:function(e){switch(e.target){case this.orientation:this.setOrientation();break;case this.scale:this.setScale();break;case this.toolTip:this.setToolTip();break;case this.type:this.setType()}}},{key:"setSliderValues",value:function(e){switch(e.target){case this.valueFromInput:this.setValue("valueFrom",+this.valueFromInput.value);break;case this.valueToInput:this.setValue("valueTo",+this.valueToInput.value);break;case this.minInput:this.setValue("min",+this.minInput.value);break;case this.maxInput:this.setValue("max",+this.maxInput.value);break;case this.stepInput:this.setValue("step",+this.stepInput.value)}}},{key:"addListeners",value:function(){var e=this,t=this.setValues.bind(this);this.rangeSlider.sliderOnChange((function(){return t()})),this.configPaneElement.addEventListener("click",(function(t){return e.changeValues(t)})),this.configPaneElement.addEventListener("click",(function(t){return e.setSlider(t)})),this.configPaneElement.addEventListener("change",(function(t){return e.setSliderValues(t)}))}}]),n}();const s=o;n(345);var a=document.querySelector(".slider-first"),u=document.querySelector(".config-first");new s($(a).sliderPlugin({max:10,step:1}),u)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SixNQUMxQ0EsS0FBS3V5QyxZQUFZeG5DLGdCQUFlLGtCQUFNMHBDLE9BQ3RDejBDLEtBQUsreUMsa0JBQWtCenBDLGlCQUFpQixTQUFTLFNBQUNqRSxHQUFELE9BQU8sRUFBS3lELGFBQWF6RCxNQUMxRXJGLEtBQUsreUMsa0JBQWtCenBDLGlCQUFpQixTQUFTLFNBQUNqRSxHQUFELE9BQU8sRUFBS3NFLFVBQVV0RSxNQUN2RXJGLEtBQUsreUMsa0JBQWtCenBDLGlCQUFpQixVQUFVLFNBQUNqRSxHQUFELE9BQU8sRUFBS3N2QyxnQkFBZ0J0dkMsWUE3VjVFaXRDLEdBaVdOLHFCQzdWTXNDLEVBQWtCL3hDLFNBQVNveEMsY0FBYyxpQkFDekNZLEVBQWNoeUMsU0FBU294QyxjQUFjLGlCQVFwQyxJQUFJM0IsRUFGUzluQyxFQUFFb3FDLEdBQWlCbHFDLGFBTEosQ0FDakN2SixJQUFLLEdBQ0xULEtBQU0sSUFLNEJtMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovLy8uL1NsaWRlci9Nb2RlbC9Nb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9TbGlkZXIvVmlldy9zdWJWaWV3cy9TY2FsZS50cyIsIndlYnBhY2s6Ly8vLi9TbGlkZXIvVmlldy9zdWJWaWV3cy9Ub29sVGlwLnRzIiwid2VicGFjazovLy8uL1NsaWRlci9WaWV3L3N1YlZpZXdzL0hhbmRsZXJzLnRzIiwid2VicGFjazovLy8uL1NsaWRlci9WaWV3L3N1YlZpZXdzL1Byb2dyZXNzQmFyLnRzIiwid2VicGFjazovLy8uL1NsaWRlci9WaWV3L1ZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vU2xpZGVyL1ByZXNlbnRlci9QcmVzZW50ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vU2xpZGVyL3NsaWRlckluaXRDb25maWcudHMiLCJ3ZWJwYWNrOi8vLy4vU2xpZGVyL2pxdWVyeS5zbGlkZXItcGx1Z2luLnRzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LWV4cG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9leHBvc2UtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRHbG9iYWxUaGlzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vLi9jb25maWdQYW5lbC9jb25maWdQYW5lbC50cyIsIndlYnBhY2s6Ly8vLi9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59IiwiaW1wb3J0IGFycmF5V2l0aEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5TGltaXQgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5TGltaXQuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlUmVzdCBmcm9tIFwiLi9ub25JdGVyYWJsZVJlc3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgbm9uSXRlcmFibGVSZXN0KCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdO1xuXG4gIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuXG4gIHZhciBfcywgX2U7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiY2xhc3MgU2xpZGVyTW9kZWwge1xyXG5cclxuICByZWFkb25seSBzdGF0ZTogSW5pdDtcclxuXHJcbiAgcHJpdmF0ZSBjdXN0b21GdW5jdGlvbjogKCkgPT4gdm9pZCA9ICgpID0+IHt9O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihpbml0OiBJbml0KSB7XHJcbiAgICB0aGlzLnN0YXRlID0geyAuLi5pbml0IH07XHJcbiAgICB0aGlzLmNoZWNrVHlwZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldFN0YXRlKHBhcmFtOiBBY3Rpb25zLCB2YWx1ZTogUGFyYW1zKSB7XHJcbiAgICBpZiAocGFyYW0gPT09ICd0eXBlJykge1xyXG4gICAgICB0aGlzLnN0YXRlLnR5cGUgPSA8SW5pdFsndHlwZSddPnZhbHVlO1xyXG4gICAgICB0aGlzLnN0YXRlLnZhbHVlRnJvbSA9IHRoaXMuc3RhdGUubWluO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwYXJhbSA9PT0gJ29yaWVudGF0aW9uJykge1xyXG4gICAgICB0aGlzLnN0YXRlLm9yaWVudGF0aW9uID0gPEluaXRbJ29yaWVudGF0aW9uJ10+dmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBhcmFtID09PSAnc2NhbGUnKSB7XHJcbiAgICAgIHRoaXMuc3RhdGUuc2NhbGUgPSA8Ym9vbGVhbj52YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGFyYW0gPT09ICd0b29sVGlwJykge1xyXG4gICAgICB0aGlzLnN0YXRlLnRvb2xUaXAgPSA8Ym9vbGVhbj52YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGFyYW0gPT09ICdzdGVwJykge1xyXG4gICAgICB0aGlzLnN0YXRlLnN0ZXAgPSB0aGlzLmNoZWNrU3RlcCg8bnVtYmVyPnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGFyYW0gPT09ICd2YWx1ZVRvJykge1xyXG4gICAgICBjb25zdCBwcmV2VmFsdWVUbyA9IHRoaXMuc3RhdGUudmFsdWVUbztcclxuICAgICAgdGhpcy5zdGF0ZS52YWx1ZVRvID0gdGhpcy5jaGVja1ZhbHVlVG8oPG51bWJlcj52YWx1ZSk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAodGhpcy5zdGF0ZS52YWx1ZVRvICE9PSBwcmV2VmFsdWVUbykgdGhpcy5jdXN0b21GdW5jdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwYXJhbSA9PT0gJ3ZhbHVlRnJvbScpIHtcclxuICAgICAgXHJcbiAgICAgIGlmICh0aGlzLnN0YXRlLnR5cGUgIT09ICdzaW5nbGUnKSB7XHJcbiAgICAgICAgY29uc3QgcHJldlZhbHVlRnJvbSA9IHRoaXMuc3RhdGUudmFsdWVGcm9tO1xyXG4gICAgICAgIHRoaXMuc3RhdGUudmFsdWVGcm9tID0gdGhpcy5jaGVja1ZhbHVlRnJvbSg8bnVtYmVyPnZhbHVlKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS52YWx1ZUZyb20gIT09IHByZXZWYWx1ZUZyb20pIHRoaXMuY3VzdG9tRnVuY3Rpb24oKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnN0YXRlLnZhbHVlRnJvbSA9IHRoaXMuc3RhdGUubWluO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBhcmFtID09PSAnbWluJykge1xyXG4gICAgICB0aGlzLnN0YXRlLm1pbiA9IHRoaXMuY2hlY2tNaW4oPG51bWJlcj52YWx1ZSk7XHJcbiAgICAgIHRoaXMuY2hlY2tUeXBlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBhcmFtID09PSAnbWF4Jykge1xyXG4gICAgICB0aGlzLnN0YXRlLm1heCA9IHRoaXMuY2hlY2tNYXgoPG51bWJlcj52YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2hhbmdlVmFsdWVzKFttaW4sIG1heF06IG51bWJlcltdKTogdm9pZCB7XHJcbiAgICBsZXQgW21pbk5ldywgbWF4TmV3XSA9IFttaW4sIG1heF07XHJcbiAgICBcclxuICAgIGlmIChtaW4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBtaW5OZXcgPSB0aGlzLmZpbmROZXh0VmFsdWUodGhpcy5zdGF0ZS52YWx1ZUZyb20sIG1pbik7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoJ3ZhbHVlRnJvbScsIG1pbk5ldyk7XHJcbiAgICB9XHJcbiAgICBpZiAobWF4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgbWF4TmV3ID0gdGhpcy5maW5kTmV4dFZhbHVlKHRoaXMuc3RhdGUudmFsdWVUbywgbWF4KTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSgndmFsdWVUbycsIG1heE5ldyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0U3RhdGUoKTogSW5pdCB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0ZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRDdXN0b21GdW5jdGlvbihjdXN0b21GdW5jdGlvbjogKCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5jdXN0b21GdW5jdGlvbiA9IGN1c3RvbUZ1bmN0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGVja1R5cGUoKTogdm9pZCB7ICBcclxuICAgIGlmICh0aGlzLnN0YXRlLnR5cGUgPT09ICdzaW5nbGUnKSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoJ3ZhbHVlRnJvbScsIHRoaXMuc3RhdGUubWluKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tFeHRyZW11bVZhbHVlcyhjdXJyZW50OiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBsZXQgY3VycmVudFZhbHVlID0gY3VycmVudDtcclxuICAgIFxyXG4gICAgaWYgKGN1cnJlbnQgPCBtaW4pIHtcclxuICAgICAgY3VycmVudFZhbHVlID0gbWluO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjdXJyZW50ID4gbWF4KSB7XHJcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IG1heDtcclxuICAgIH0gICAgXHJcbiAgICByZXR1cm4gY3VycmVudFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBmaW5kTmV4dFZhbHVlKGN1cnJlbnRWYWx1ZTogbnVtYmVyLCBjdXJzb3JDb29yZDogbnVtYmVyKTogbnVtYmVyIHsgICBcclxuICAgIFxyXG4gICAgbGV0IG5ld0N1cnJlbnRWYWx1ZSA9IGN1cnJlbnRWYWx1ZTtcclxuICAgIGxldCBzdGVwSW5jciA9IE1hdGguZmxvb3IoKGN1cnNvckNvb3JkIC0gY3VycmVudFZhbHVlKSAvIHRoaXMuc3RhdGUuc3RlcCk7XHJcblxyXG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA+IGN1cnNvckNvb3JkKSB7XHJcbiAgICAgIHN0ZXBJbmNyID0gTWF0aC5jZWlsKChjdXJzb3JDb29yZCAtIGN1cnJlbnRWYWx1ZSkgLyB0aGlzLnN0YXRlLnN0ZXApO1xyXG4gICAgfVxyXG4gICAgbmV3Q3VycmVudFZhbHVlID0gY3Vyc29yQ29vcmQgPCB0aGlzLnN0YXRlLm1pbiBcclxuICAgICAgPyB0aGlzLnN0YXRlLm1pbiBcclxuICAgICAgOiBjdXJzb3JDb29yZCA+IHRoaXMuc3RhdGUubWF4IFxyXG4gICAgICAgID8gdGhpcy5zdGF0ZS5tYXhcclxuICAgICAgICA6IGN1cnJlbnRWYWx1ZSArIHN0ZXBJbmNyICogdGhpcy5zdGF0ZS5zdGVwO1xyXG4gICAgcmV0dXJuIG5ld0N1cnJlbnRWYWx1ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tWYWx1ZUZyb20obWluOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgbGV0IG5ld01pbiA9IHRoaXMuY2hlY2tFeHRyZW11bVZhbHVlcyhtaW4sIHRoaXMuc3RhdGUubWluLCB0aGlzLnN0YXRlLnZhbHVlVG8pO1xyXG4gICAgbmV3TWluID0gK25ld01pbi50b0ZpeGVkKDUpO1xyXG4gICAgcmV0dXJuIG5ld01pbjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tWYWx1ZVRvKG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGxldCBuZXdNYXggPSB0aGlzLmNoZWNrRXh0cmVtdW1WYWx1ZXMobWF4LCB0aGlzLnN0YXRlLnZhbHVlRnJvbSwgdGhpcy5zdGF0ZS5tYXgpO1xyXG4gICAgbmV3TWF4ID0gK25ld01heC50b0ZpeGVkKDUpO1xyXG4gICAgcmV0dXJuIG5ld01heDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tNaW4obWluOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgbGV0IG5ld01pbiA9IHRoaXMuY2hlY2tFeHRyZW11bVZhbHVlcyhtaW4sIC0xZTEwLCB0aGlzLnN0YXRlLnZhbHVlRnJvbSk7XHJcblxyXG4gICAgaWYgKHRoaXMuc3RhdGUudHlwZSA9PT0gJ3NpbmdsZScpICBuZXdNaW4gPSB0aGlzLmNoZWNrRXh0cmVtdW1WYWx1ZXMobWluLCAtMWUxMCwgdGhpcy5zdGF0ZS52YWx1ZVRvKTtcclxuICAgIG5ld01pbiA9ICtuZXdNaW4udG9GaXhlZCg1KTtcclxuICAgIHJldHVybiBuZXdNaW47XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrTWF4KG1heDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGxldCBuZXdNYXggPSB0aGlzLmNoZWNrRXh0cmVtdW1WYWx1ZXMobWF4LCB0aGlzLnN0YXRlLnZhbHVlVG8sIDFlMTApO1xyXG4gICAgbmV3TWF4ID0gK25ld01heC50b0ZpeGVkKDUpO1xyXG4gICAgcmV0dXJuIG5ld01heDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tTdGVwKHN0ZXA6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBsZXQgbmV3U3RlcCA9IHRoaXMuc3RhdGUuc3RlcDtcclxuICAgIFxyXG4gICAgaWYgKHN0ZXAgPiAwICYmIHN0ZXAgPD0gdGhpcy5zdGF0ZS5tYXggLSB0aGlzLnN0YXRlLm1pbikge1xyXG4gICAgICBuZXdTdGVwID0gK3N0ZXAudG9GaXhlZCg1KTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdTdGVwO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2xpZGVyTW9kZWw7IiwiY2xhc3MgU2xpZGVyU2NhbGUge1xyXG4gIHByaXZhdGUgc2xpZGVyOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSBpbml0T3B0aW9uczogSW5pdDtcclxuXHJcbiAgcHJpdmF0ZSBzY2FsZSE6IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIHNjYWxlVmFsdWUhOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3Ioc2xpZGVyOiBIVE1MRWxlbWVudCwgaW5pdE9wdGlvbnM6IEluaXQpIHtcclxuICAgIHRoaXMuc2xpZGVyID0gc2xpZGVyO1xyXG4gICAgdGhpcy5pbml0T3B0aW9ucyA9IHsgLi4uaW5pdE9wdGlvbnMgfTtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZU9ic2VydmVyKHN0YXRlOiBJbml0KTogdm9pZCB7XHJcbiAgICBjb25zdCB7IG1pbiwgbWF4LCBvcmllbnRhdGlvbiwgc2NhbGUgfSA9IHRoaXMuaW5pdE9wdGlvbnM7XHJcbiAgICB0aGlzLnVwZGF0ZVN0YXRlKHN0YXRlKTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIG1pbiAhPT0gdGhpcy5pbml0T3B0aW9ucy5taW4gfHxcclxuICAgICAgbWF4ICE9PSB0aGlzLmluaXRPcHRpb25zLm1heCB8fFxyXG4gICAgICBvcmllbnRhdGlvbiAhPT0gdGhpcy5pbml0T3B0aW9ucy5vcmllbnRhdGlvbiB8fFxyXG4gICAgICBzY2FsZSAhPT0gdGhpcy5pbml0T3B0aW9ucy5zY2FsZVxyXG4gICAgKSB0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZVN0YXRlKHN0YXRlOiBJbml0KTogdm9pZCB7XHJcbiAgICB0aGlzLmluaXRPcHRpb25zID0geyAuLi5zdGF0ZSB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaW5pdE9wdGlvbnMuc2NhbGUpIHtcclxuICAgICAgdGhpcy5jcmVhdGVFbGVtZXRzKCk7XHJcbiAgICAgIHRoaXMuY3JlYXRlU2NhbGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlRWxlbWV0cygpOiB2b2lkIHtcclxuICAgIHRoaXMuc2NhbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRoaXMuc2NhbGUuY2xhc3NMaXN0LmFkZCgnc2xpZGVyX19zY2FsZScpO1xyXG4gICAgdGhpcy5zbGlkZXIuYXBwZW5kQ2hpbGQodGhpcy5zY2FsZSk7XHJcbiAgICB0aGlzLnNjYWxlVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHRoaXMuc2NhbGVWYWx1ZS5jbGFzc0xpc3QuYWRkKCdzbGlkZXJfX3NjYWxlLXZhbHVlJyk7XHJcbiAgICB0aGlzLnNsaWRlci5hcHBlbmRDaGlsZCh0aGlzLnNjYWxlVmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVTY2FsZSgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHNjYWxlTXVsdGlwbGllciA9IDQ7XHJcbiAgICBjb25zdCB7IG1pbiwgbWF4LCBvcmllbnRhdGlvbiB9ID0gdGhpcy5pbml0T3B0aW9ucztcclxuICAgIGNvbnN0IHNsaWRlclNpemUgPSBtYXggLSBtaW47XHJcbiAgICBjb25zdCBzdGVwQ3VzdG9tID0gc2xpZGVyU2l6ZSAvIDEwO1xyXG4gICAgY29uc3QgbnVtT2ZEaWdpdHMgPSBtYXgudG9TdHJpbmcoKS5sZW5ndGggLSAxO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IChzbGlkZXJTaXplIC8gc3RlcEN1c3RvbSkgKiBzY2FsZU11bHRpcGxpZXI7IGkgKz0gMSkge1xyXG4gICAgICBjb25zdCBlbGVtU2NhbGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGVsZW1TY2FsZS5jbGFzc0xpc3QuYWRkKCdzbGlkZXJfX3NjYWxlLW1hcmtlcicpO1xyXG4gICAgICBjb25zdCB2YWx1ZUhvcml6b250YWwgPSArKGkgKiBzdGVwQ3VzdG9tIC8gc2NhbGVNdWx0aXBsaWVyICsgbWluKS50b0ZpeGVkKG51bU9mRGlnaXRzKTtcclxuICAgICAgY29uc3QgdmFsdWVWZXJ0aWNhbCA9ICsoc2xpZGVyU2l6ZSAtIGkgKiBzdGVwQ3VzdG9tIC8gc2NhbGVNdWx0aXBsaWVyICsgbWluKS50b0ZpeGVkKG51bU9mRGlnaXRzKTtcclxuICAgICAgXHJcbiAgICAgIGlmIChpICUgc2NhbGVNdWx0aXBsaWVyID09PSAwKSB7ICAgXHJcbiAgICAgICAgZWxlbVNjYWxlLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9fc2NhbGUtbWFya2VyX2xhcmdlJyk7XHJcbiAgICAgICAgY29uc3QgZWxlbVNjYWxlVmFsdWU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZWxlbVNjYWxlVmFsdWUuY2xhc3NMaXN0LmFkZCgnc2xpZGVyX19zY2FsZS1tYXJrZXItdmFsdWUnKTtcclxuICAgICAgICBjb25zdCBwZXJjZW50YWdPZmZzZXQgPSAxMDAgKiAoKGkgKiBzdGVwQ3VzdG9tIC8gc2NhbGVNdWx0aXBsaWVyKSAvIHNsaWRlclNpemUpO1xyXG5cclxuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHsgICBcclxuICAgICAgICAgIGVsZW1TY2FsZVZhbHVlLnN0eWxlLnRvcCA9IGAke3BlcmNlbnRhZ09mZnNldH0lYDtcclxuICAgICAgICAgIGVsZW1TY2FsZVZhbHVlLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIGAke3ZhbHVlVmVydGljYWx9YCk7XHJcbiAgICAgICAgICBlbGVtU2NhbGVWYWx1ZS5pbm5lckhUTUwgPSBgJHt2YWx1ZVZlcnRpY2FsfWA7ICBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZWxlbVNjYWxlVmFsdWUuc3R5bGUubGVmdCA9IGAke3BlcmNlbnRhZ09mZnNldH0lYDtcclxuICAgICAgICAgIGVsZW1TY2FsZVZhbHVlLnNldEF0dHJpYnV0ZSgnZGF0YS12YWx1ZScsIGAke3ZhbHVlSG9yaXpvbnRhbH1gKTtcclxuICAgICAgICAgIGVsZW1TY2FsZVZhbHVlLmlubmVySFRNTCA9IGAke3ZhbHVlSG9yaXpvbnRhbH1gO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNjYWxlVmFsdWUuYXBwZW5kQ2hpbGQoZWxlbVNjYWxlVmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2NhbGUuYXBwZW5kQ2hpbGQoZWxlbVNjYWxlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGVzdHJveVNjYWxlKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuc2NhbGUgJiYgdGhpcy5zY2FsZVZhbHVlKSB7XHJcbiAgICAgIHRoaXMuc2NhbGUucmVtb3ZlKCk7XHJcbiAgICAgIHRoaXMuc2NhbGVWYWx1ZS5yZW1vdmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7ICAgIFxyXG4gICAgdGhpcy5kZXN0cm95U2NhbGUoKTtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFNjYWxlVmFsdWVzKHRhcmdldDogSFRNTEVsZW1lbnQpOiBudW1iZXIgfCB1bmRlZmluZWQge1xyXG4gICAgbGV0IHNjYWxlVmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVyX19zY2FsZS1tYXJrZXItdmFsdWUnKSkge1xyXG4gICAgICBzY2FsZVZhbHVlID0gTnVtYmVyKHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmFsdWUnKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2NhbGVWYWx1ZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNsaWRlclNjYWxlOyIsImNsYXNzIFRvb2xUaXAge1xyXG4gIHByaXZhdGUgbG93ZXJDb3VudCE6IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIHVwcGVyQ291bnQhOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSBpbml0T3B0aW9uczogSW5pdDtcclxuICAgIFxyXG4gIGNvbnN0cnVjdG9yKGluaXRPcHRpb25zOiBJbml0KSB7XHJcbiAgICB0aGlzLmluaXRPcHRpb25zID0geyAuLi5pbml0T3B0aW9ucyB9O1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlT2JzZXJ2ZXIoc3RhdGU6IEluaXQpOiB2b2lkIHtcclxuICAgIHRoaXMudXBkYXRlU3RhdGUoc3RhdGUpO1xyXG4gICAgdGhpcy51cGRhdGUoW3RoaXMuaW5pdE9wdGlvbnMudmFsdWVGcm9tLCB0aGlzLmluaXRPcHRpb25zLnZhbHVlVG9dKTtcclxuICAgIHRoaXMudG9nZ2xldG9vbFRpcCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZVN0YXRlKHN0YXRlOiBJbml0KTogdm9pZCB7XHJcbiAgICB0aGlzLmluaXRPcHRpb25zID0geyAuLi5zdGF0ZSB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEVsZW1zKCk6IEhUTUxFbGVtZW50W10ge1xyXG4gICAgcmV0dXJuIFt0aGlzLmxvd2VyQ291bnQsIHRoaXMudXBwZXJDb3VudF07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNyZWF0ZUVsZW1lbnRzKCk7XHJcbiAgICBjb25zdCB7IHZhbHVlRnJvbSwgdmFsdWVUbyB9ID0gdGhpcy5pbml0T3B0aW9ucztcclxuICAgIHRoaXMudXBkYXRlKFt2YWx1ZUZyb20sIHZhbHVlVG9dKTsgXHJcbiAgICB0aGlzLnRvZ2dsZXRvb2xUaXAoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlRWxlbWVudHMoKTogdm9pZCB7XHJcbiAgICBjb25zdCBsb3dlckNvdW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBsb3dlckNvdW50LmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9faGFuZGxlLWxvd2VyLWNvdW50Jyk7XHJcbiAgICB0aGlzLmxvd2VyQ291bnQgPSBsb3dlckNvdW50O1xyXG4gICAgY29uc3QgdXBwZXJDb3VudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgdXBwZXJDb3VudC5jbGFzc0xpc3QuYWRkKCdzbGlkZXJfX2hhbmRsZS1sb3dlci1jb3VudCcpO1xyXG4gICAgdGhpcy51cHBlckNvdW50ID0gdXBwZXJDb3VudDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdG9nZ2xldG9vbFRpcCgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHsgdG9vbFRpcCB9ID0gdGhpcy5pbml0T3B0aW9ucztcclxuICAgIGlmICghdG9vbFRpcCkge1xyXG4gICAgICB0aGlzLmxvd2VyQ291bnQuY2xhc3NMaXN0LmFkZCgnc2xpZGVyX19oYW5kbGUtdXBwZXItY291bnRfaGlkZGVuJyk7XHJcbiAgICAgIHRoaXMudXBwZXJDb3VudC5jbGFzc0xpc3QuYWRkKCdzbGlkZXJfX2hhbmRsZS11cHBlci1jb3VudF9oaWRkZW4nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMubG93ZXJDb3VudC5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZXJfX2hhbmRsZS11cHBlci1jb3VudF9oaWRkZW4nKTtcclxuICAgICAgdGhpcy51cHBlckNvdW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlcl9faGFuZGxlLXVwcGVyLWNvdW50X2hpZGRlbicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGUoW21pbiwgbWF4XTogbnVtYmVyW10pOiB2b2lkIHsgXHJcblxyXG4gICAgaWYgKG1pbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMubG93ZXJDb3VudC5pbm5lckhUTUwgPSBtaW4udG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWF4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy51cHBlckNvdW50LmlubmVySFRNTCA9IG1heC50b1N0cmluZygpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodGhpcy51cHBlckNvdW50LmlubmVySFRNTCA9PT0gdGhpcy5sb3dlckNvdW50LmlubmVySFRNTCkge1xyXG4gICAgICB0aGlzLmxvd2VyQ291bnQuY2xhc3NMaXN0LmFkZCgnc2xpZGVyX19oYW5kbGUtbG93ZXItY291bnRfaGlkZGVuJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmxvd2VyQ291bnQuY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGVyX19oYW5kbGUtbG93ZXItY291bnRfaGlkZGVuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb29sVGlwOyIsImNsYXNzIFNsaWRlckhhbmRsZXJzIHtcclxuXHJcbiAgcHJpdmF0ZSBzbGlkZXI6IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIGxvd2VyITogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHByaXZhdGUgdXBwZXIhOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSBpbml0T3B0aW9uczogSW5pdDtcclxuICAgIFxyXG4gIGNvbnN0cnVjdG9yKHNsaWRlcjogSFRNTEVsZW1lbnQsIGluaXRPcHRpb25zOiBJbml0KSB7XHJcbiAgICB0aGlzLnNsaWRlciA9IHNsaWRlcjtcclxuICAgIHRoaXMuaW5pdE9wdGlvbnMgPSB7IC4uLmluaXRPcHRpb25zIH07XHJcbiAgICB0aGlzLmluaXQoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGVPYnNlcnZlcihzdGF0ZTogSW5pdCk6IHZvaWQge1xyXG4gICAgdGhpcy51cGRhdGVTdGF0ZShzdGF0ZSk7XHJcbiAgICB0aGlzLmNoZWNrT3JpZW50YXRpb24oKTtcclxuICAgIHRoaXMuaGFuZGxlcnNVcGRhdGUoKTtcclxuICAgIHRoaXMuY2hlY2tUeXBlKCk7XHJcbiAgICB0aGlzLnRvZ2dsZUhhbmRsZXJzT3JkZXIoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRIYW5kbGVyRWxlbXMoKTogSFRNTEVsZW1lbnRbXSB7XHJcbiAgICByZXR1cm4gW3RoaXMubG93ZXIsIHRoaXMudXBwZXJdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVyc1VwZGF0ZSgpOiB2b2lke1xyXG4gICAgbGV0IFttaW4sIG1heF06IG51bWJlcltdID0gW3RoaXMuaW5pdE9wdGlvbnMudmFsdWVGcm9tLCB0aGlzLmluaXRPcHRpb25zLnZhbHVlVG9dO1xyXG4gICAgdGhpcy5zaGlmdExlZnRIYW5kbGVyKHRoaXMuY29udmVydFRvUGVyY2VudChtaW4pKTtcclxuICAgIHRoaXMuc2hpZnRSaWdodEhhbmRsZXIodGhpcy5jb252ZXJ0VG9QZXJjZW50KG1heCkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEhhbmRsZXJzQ29vcmRzKGVsZW06IEhUTUxFbGVtZW50LCBlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCB8IEtleWJvYXJkRXZlbnQpOiBudW1iZXJbXSB7XHJcbiAgICBsZXQgY3VycmVudENvb3JkOiBudW1iZXIgPSAwO1xyXG4gICAgICBcclxuICAgIGlmIChlIGluc3RhbmNlb2YgTW91c2VFdmVudCkge1xyXG5cclxuICAgICAgaWYgKHRoaXMuaW5pdE9wdGlvbnMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcclxuICAgICAgICBjdXJyZW50Q29vcmQgPSBlLmNsaWVudFk7XHJcbiAgICAgIH0gZWxzZSB7ICAgICBcclxuICAgICAgICBjdXJyZW50Q29vcmQgPSBlLnBhZ2VYO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHdpbmRvdy5Ub3VjaEV2ZW50ICYmIGUgaW5zdGFuY2VvZiBUb3VjaEV2ZW50KSB7XHJcblxyXG4gICAgICBpZiAodGhpcy5pbml0T3B0aW9ucy5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICAgIGN1cnJlbnRDb29yZCA9IGUudG91Y2hlc1swXS5jbGllbnRZO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGN1cnJlbnRDb29yZCA9IGUudG91Y2hlc1swXS5wYWdlWDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChlIGluc3RhbmNlb2YgS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICBjb25zdCBlbGVtQm91bmRpbmcgPSAgKGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC8gMik7XHJcbiAgICAgIGNvbnN0IHN0ZXBJbkNvb3JkcyA9IHRoaXMuY29udmVydEZyb21DdXN0b20odGhpcy5pbml0T3B0aW9ucy5zdGVwKTtcclxuXHJcbiAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93TGVmdCcpIHsgICBcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5pdE9wdGlvbnMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcclxuICAgICAgICAgIGN1cnJlbnRDb29yZCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgZWxlbUJvdW5kaW5nICsgc3RlcEluQ29vcmRzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjdXJyZW50Q29vcmQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSBzdGVwSW5Db29yZHM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZS5rZXkgPT09ICdBcnJvd1JpZ2h0Jykge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbml0T3B0aW9ucy5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICAgICAgY3VycmVudENvb3JkID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBlbGVtQm91bmRpbmcgLSBzdGVwSW5Db29yZHM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGN1cnJlbnRDb29yZCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQgKyBzdGVwSW5Db29yZHM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBzbGlkZXJCb3VuZGluZyA9IHRoaXMuc2xpZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgbGV0IFttaW4sIG1heF06IG51bWJlcltdID0gW107XHJcbiAgICBsZXQgY2xpZW50Q29vcmQ6IG51bWJlciA9IGN1cnJlbnRDb29yZCAtIHNsaWRlckJvdW5kaW5nLmxlZnQ7XHJcblxyXG4gICAgaWYgKHRoaXMuaW5pdE9wdGlvbnMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcclxuICAgICAgY2xpZW50Q29vcmQgPSBzbGlkZXJCb3VuZGluZy5oZWlnaHQgLSBjdXJyZW50Q29vcmQgKyBzbGlkZXJCb3VuZGluZy50b3A7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVsZW0gPT09IHRoaXMubG93ZXIpIHsgIFxyXG4gICAgICBtaW4gPSB0aGlzLmNvbnZlcnRUb0N1c3RvbShjbGllbnRDb29yZCk7XHJcbiAgICB9IFxyXG5cclxuICAgIGlmIChlbGVtID09PSB0aGlzLnVwcGVyKSB7XHJcbiAgICAgIG1heCA9IHRoaXMuY29udmVydFRvQ3VzdG9tKGNsaWVudENvb3JkKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIFttaW4sIG1heF07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVN0YXRlKHN0YXRlOiBJbml0KTogdm9pZCB7XHJcbiAgICB0aGlzLmluaXRPcHRpb25zID0geyAuLi5zdGF0ZSB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0KCk6IHZvaWQgeyBcclxuICAgIHRoaXMuY3JlYXRlRWxlbWVudHMoKTtcclxuICAgIHRoaXMuc2hpZnRMZWZ0SGFuZGxlcih0aGlzLmNvbnZlcnRUb1BlcmNlbnQodGhpcy5pbml0T3B0aW9ucy52YWx1ZUZyb20pKTtcclxuICAgIHRoaXMuc2hpZnRSaWdodEhhbmRsZXIodGhpcy5jb252ZXJ0VG9QZXJjZW50KHRoaXMuaW5pdE9wdGlvbnMudmFsdWVUbykpO1xyXG4gICAgdGhpcy5jaGVja1R5cGUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlRWxlbWVudHMoKTogdm9pZCB7XHJcbiAgICBjb25zdCBsb3dlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgbG93ZXIuY2xhc3NMaXN0LmFkZCgnc2xpZGVyX19oYW5kbGUtbG93ZXInKTtcclxuICAgIGxvd2VyLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcclxuICAgIHRoaXMubG93ZXIgPSBsb3dlcjtcclxuICAgIGNvbnN0IHVwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB1cHBlci5jbGFzc0xpc3QuYWRkKCdzbGlkZXJfX2hhbmRsZS11cHBlcicpO1xyXG4gICAgdXBwZXIuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xyXG4gICAgdGhpcy51cHBlciA9IHVwcGVyO1xyXG4gIH1cclxuICBcclxuICBwcml2YXRlIHRvZ2dsZUhhbmRsZXJzT3JkZXIoKTogdm9pZCB7XHJcbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gdGhpcy5sb3dlciAmJiAhdGhpcy5sb3dlci5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlcl9faGFuZGxlLWxvd2VyX3otaW5kZXgtdXAnKSkge1xyXG4gICAgICB0aGlzLmxvd2VyLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9faGFuZGxlLWxvd2VyX3otaW5kZXgtdXAnKTtcclxuICAgICAgdGhpcy51cHBlci5jbGFzc0xpc3QucmVtb3ZlKCdzbGlkZXJfX2hhbmRsZS11cHBlcl96LWluZGV4LXVwJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMudXBwZXIgJiYgIXRoaXMudXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbGlkZXJfX2hhbmRsZS11cHBlcl96LWluZGV4LXVwJykpIHtcclxuICAgICAgdGhpcy51cHBlci5jbGFzc0xpc3QuYWRkKCdzbGlkZXJfX2hhbmRsZS11cHBlcl96LWluZGV4LXVwJyk7XHJcbiAgICAgIHRoaXMubG93ZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGVyX19oYW5kbGUtbG93ZXJfei1pbmRleC11cCcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzaGlmdExlZnRIYW5kbGVyKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmluaXRPcHRpb25zLm9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcclxuICAgICAgdGhpcy5sb3dlci5zdHlsZS5sZWZ0ID0gdmFsdWUgKyAnJSc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaW5pdE9wdGlvbnMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcclxuICAgICAgdGhpcy5sb3dlci5zdHlsZS50b3AgPSAxMDAgLSB2YWx1ZSArICclJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2hpZnRSaWdodEhhbmRsZXIodmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaW5pdE9wdGlvbnMub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJykge1xyXG4gICAgICB0aGlzLnVwcGVyLnN0eWxlLmxlZnQgPSB2YWx1ZSArICclJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5pbml0T3B0aW9ucy5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICB0aGlzLnVwcGVyLnN0eWxlLnRvcCA9IDEwMCAtIHZhbHVlICsgJyUnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjb252ZXJ0VG9QZXJjZW50KGN1c3RvbVZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgdmFsdWVQZXJjZW50ID0gKDEwMCAvIE1hdGguYWJzKHRoaXMuaW5pdE9wdGlvbnMubWF4IC0gdGhpcy5pbml0T3B0aW9ucy5taW4pKSAqICgtdGhpcy5pbml0T3B0aW9ucy5taW4gKyBjdXN0b21WYWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWVQZXJjZW50O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGVja1NsaWRlck9yaWVudGF0aW9uKCk6IG51bWJlciB7XHJcbiAgICBpZiAodGhpcy5pbml0T3B0aW9ucy5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICByZXR1cm4gdGhpcy5zbGlkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuc2xpZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjb252ZXJ0VG9DdXN0b20odmFsdWU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdmFsdWUgKiAoKE1hdGguYWJzKHRoaXMuaW5pdE9wdGlvbnMubWF4IC0gdGhpcy5pbml0T3B0aW9ucy5taW4pKSAvIHRoaXMuY2hlY2tTbGlkZXJPcmllbnRhdGlvbigpKSArIHRoaXMuaW5pdE9wdGlvbnMubWluO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjb252ZXJ0RnJvbUN1c3RvbSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAodGhpcy5jaGVja1NsaWRlck9yaWVudGF0aW9uKCkgLyAoKE1hdGguYWJzKHRoaXMuaW5pdE9wdGlvbnMubWF4IC0gdGhpcy5pbml0T3B0aW9ucy5taW4pKSkpICogKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tPcmllbnRhdGlvbigpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmluaXRPcHRpb25zLm9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XHJcbiAgICAgIHRoaXMudXBwZXIuc3R5bGUubGVmdCA9ICcnO1xyXG4gICAgICB0aGlzLmxvd2VyLnN0eWxlLmxlZnQgPSAnJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5pbml0T3B0aW9ucy5vcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XHJcbiAgICAgIHRoaXMudXBwZXIuc3R5bGUudG9wID0gJyc7XHJcbiAgICAgIHRoaXMubG93ZXIuc3R5bGUudG9wID0gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrVHlwZSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmluaXRPcHRpb25zLnR5cGUgPT09ICdzaW5nbGUnKSB0aGlzLmxvd2VyLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9faGFuZGxlLWxvd2VyX2hpZGRlbicpO1xyXG5cclxuICAgIGlmICh0aGlzLmluaXRPcHRpb25zLnR5cGUgPT09ICdyYW5nZScpIHRoaXMubG93ZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGVyX19oYW5kbGUtbG93ZXJfaGlkZGVuJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTbGlkZXJIYW5kbGVyczsiLCJjbGFzcyBQcm9ncmVzc0JhciB7XHJcbiAgcHJpdmF0ZSBwcm9ncmVzc0JhciE6IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIGluaXRPcHRpb25zOiBJbml0O1xyXG4gICAgXHJcbiAgY29uc3RydWN0b3IoaW5pdE9wdGlvbnM6IEluaXQpIHtcclxuICAgIHRoaXMuaW5pdE9wdGlvbnMgPSB7IC4uLmluaXRPcHRpb25zIH07XHJcbiAgICB0aGlzLmluaXQoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGVPYnNlcnZlcihzdGF0ZTogSW5pdCk6IHZvaWQge1xyXG4gICAgdGhpcy51cGRhdGVTdGF0ZShzdGF0ZSk7XHJcbiAgICB0aGlzLnByb2dyZXNzQmFyVXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RWxlbXMoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvZ3Jlc3NCYXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVN0YXRlKHN0YXRlOiBJbml0KTogdm9pZCB7XHJcbiAgICB0aGlzLmluaXRPcHRpb25zID0geyAuLi5zdGF0ZSB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5jcmVhdGVFbGVtZW50cygpO1xyXG4gICAgdGhpcy5wcm9ncmVzc0JhclVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVFbGVtZW50cygpOiB2b2lke1xyXG4gICAgY29uc3QgcHJvZ3Jlc3NCYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHByb2dyZXNzQmFyLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9faGlnaGxpZ2h0Jyk7XHJcbiAgICB0aGlzLnByb2dyZXNzQmFyID0gcHJvZ3Jlc3NCYXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByb2dyZXNzQmFyVXBkYXRlKCk6IHZvaWQgeyAgICBcclxuICAgIHRoaXMuY2hlY2tPcmllbnRhdGlvbigpO1xyXG4gICAgY29uc3QgW21pbiwgbWF4XSA9IFt0aGlzLmluaXRPcHRpb25zLnZhbHVlRnJvbSwgdGhpcy5pbml0T3B0aW9ucy52YWx1ZVRvXTtcclxuICAgIGNvbnN0IFttaW5QZXJjZW50LCBtYXhQZXJjZW50XSA9IFt0aGlzLmNvbnZlcnRUb1BlcmNlbnQobWluKSwgdGhpcy5jb252ZXJ0VG9QZXJjZW50KG1heCldO1xyXG4gICAgY29uc3QgcHJvZ3Jlc3NMZW5ndGggPSBtYXhQZXJjZW50IC0gbWluUGVyY2VudDsgXHJcblxyXG4gICAgaWYgKHRoaXMuaW5pdE9wdGlvbnMub3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJykge1xyXG5cclxuICAgICAgaWYgKCBwcm9ncmVzc0xlbmd0aCA+PSAwICkge1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBwcm9ncmVzc0xlbmd0aCArICclJztcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLnN0eWxlLmxlZnQgPSBtaW5QZXJjZW50ICsgJyUnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaW5pdE9wdGlvbnMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcclxuXHJcbiAgICAgIGlmICggcHJvZ3Jlc3NMZW5ndGggPj0gMCApIHtcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLnN0eWxlLmhlaWdodCA9IHByb2dyZXNzTGVuZ3RoICsgJyUnO1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUudG9wID0gMTAwIC0gbWF4UGVyY2VudCArICclJztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0gXHJcblxyXG4gIHByaXZhdGUgY29udmVydFRvUGVyY2VudChjdXN0b21WYWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHsgbWF4LCBtaW4gfSA9IHRoaXMuaW5pdE9wdGlvbnM7XHJcbiAgICBjb25zdCB2YWx1ZVBlcmNlbnQgPSAoMTAwIC8gTWF0aC5hYnMobWF4IC0gbWluKSkgKiAoLW1pbiArIGN1c3RvbVZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZVBlcmNlbnQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrT3JpZW50YXRpb24oKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5pbml0T3B0aW9ucy5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xyXG4gICAgICB0aGlzLnByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gJyc7XHJcbiAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUubGVmdCA9ICcnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wcm9ncmVzc0Jhci5zdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgdGhpcy5wcm9ncmVzc0Jhci5zdHlsZS50b3AgPSAnJztcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByb2dyZXNzQmFyOyIsImltcG9ydCBQcmVzZW50ZXIgZnJvbSAnLi4vUHJlc2VudGVyL1ByZXNlbnRlcic7XHJcbmltcG9ydCBTY2FsZSBmcm9tICcuL3N1YlZpZXdzL1NjYWxlJztcclxuaW1wb3J0IFRvb2xUaXAgZnJvbSAnLi9zdWJWaWV3cy9Ub29sVGlwJztcclxuaW1wb3J0IEhhbmRsZXJzIGZyb20gJy4vc3ViVmlld3MvSGFuZGxlcnMnO1xyXG5pbXBvcnQgUHJvZ3Jlc3NCYXIgZnJvbSAnLi9zdWJWaWV3cy9Qcm9ncmVzc0Jhcic7XHJcblxyXG50eXBlIE9ic2VydmVycyA9IEhhbmRsZXJzIHwgVG9vbFRpcCB8IFNjYWxlIHwgUHJvZ3Jlc3NCYXI7XHJcblxyXG5jbGFzcyBTbGlkZXJWaWV3IHtcclxuICBwcml2YXRlIHJvb3RFbGVtOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSBzbGlkZXIhOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSBpbml0T3B0aW9uczogSW5pdDtcclxuXHJcbiAgcHJpdmF0ZSBzY2FsZSE6IFNjYWxlO1xyXG5cclxuICBwcml2YXRlIHRvb2xUaXAhOiBUb29sVGlwO1xyXG5cclxuICBwcml2YXRlIHByZXNlbnRlcjogUHJlc2VudGVyO1xyXG5cclxuICBwcml2YXRlIGhhbmRsZXJzITogSGFuZGxlcnM7XHJcblxyXG4gIHByaXZhdGUgcHJvZ3Jlc3NCYXIhOiBQcm9ncmVzc0JhcjtcclxuXHJcbiAgcHJpdmF0ZSBvYnNlcnZlcnM6IE9ic2VydmVyc1tdID0gW107XHJcblxyXG4gIHByaXZhdGUgdHJhY2tlciE6IEhUTUxEaXZFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihyb290RWxlbTogSFRNTEVsZW1lbnQsIHByZXNlbnRlcjogUHJlc2VudGVyLCBpbml0T3B0aW9uczogSW5pdCkge1xyXG4gICAgdGhpcy5pbml0T3B0aW9ucyA9IHsgLi4uaW5pdE9wdGlvbnMgfTtcclxuICAgIHRoaXMucm9vdEVsZW0gPSByb290RWxlbTtcclxuICAgIHRoaXMucHJlc2VudGVyID0gcHJlc2VudGVyO1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlVmlldyhzdGF0ZTogSW5pdCk6IHZvaWQge1xyXG4gICAgdGhpcy51cGRhdGVTdGF0ZShzdGF0ZSk7XHJcbiAgICB0aGlzLmNoZWNrU2xpZGVyT3JpZW50YXRpb24oKTtcclxuICAgIHRoaXMudXBkYXRlT2JzZXJ2ZXJzKHN0YXRlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3ViU2NyaWJlKG9ic2VydmVyOiBPYnNlcnZlcnMpOiB2b2lkIHsgXHJcbiAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3Vic2NyaWJlcigpOiB2b2lkIHtcclxuICAgIHRoaXMuc3ViU2NyaWJlKHRoaXMuaGFuZGxlcnMpO1xyXG4gICAgdGhpcy5zdWJTY3JpYmUodGhpcy50b29sVGlwKTtcclxuICAgIHRoaXMuc3ViU2NyaWJlKHRoaXMuc2NhbGUpO1xyXG4gICAgdGhpcy5zdWJTY3JpYmUodGhpcy5wcm9ncmVzc0Jhcik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVN0YXRlKHN0YXRlOiBJbml0KTogdm9pZCB7XHJcbiAgICB0aGlzLmluaXRPcHRpb25zID0geyAuLi5zdGF0ZSB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVPYnNlcnZlcnMoc3RhdGU6IEluaXQpOiB2b2lkIHtcclxuICAgIHRoaXMub2JzZXJ2ZXJzLmZvckVhY2goKG9ic2VydmVyKSA9PiB7ICAgXHJcbiAgICAgIG9ic2VydmVyLnVwZGF0ZU9ic2VydmVyKHN0YXRlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVTbGlkZXIoKTogdm9pZCB7XHJcbiAgICBjb25zdCBzbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHNsaWRlci5jbGFzc0xpc3QuYWRkKCdzbGlkZXInKTtcclxuICAgIHRoaXMuc2xpZGVyID0gc2xpZGVyO1xyXG4gICAgdGhpcy5yb290RWxlbS5hcHBlbmRDaGlsZCh0aGlzLnNsaWRlcik7XHJcbiAgICBjb25zdCBzbGlkZXJUcmFja2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBzbGlkZXJUcmFja2VyLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9fdHJhY2tlcicpO1xyXG4gICAgdGhpcy50cmFja2VyID0gc2xpZGVyVHJhY2tlcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlRWxlbWVudHMoKTogdm9pZCB7XHJcbiAgICB0aGlzLmhhbmRsZXJzID0gbmV3IEhhbmRsZXJzKHRoaXMudHJhY2tlciwgdGhpcy5pbml0T3B0aW9ucyk7XHJcbiAgICB0aGlzLnRvb2xUaXAgPSBuZXcgVG9vbFRpcCh0aGlzLmluaXRPcHRpb25zKTtcclxuICAgIHRoaXMucHJvZ3Jlc3NCYXIgPSBuZXcgUHJvZ3Jlc3NCYXIodGhpcy5pbml0T3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVNjYWxlKCk6IHZvaWQge1xyXG4gICAgY29uc3Qgc2xpZGVyU2NhbGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHNsaWRlclNjYWxlLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9fc2NhbGUtd3JhcHBlcicpO1xyXG4gICAgdGhpcy5zY2FsZSA9IG5ldyBTY2FsZShzbGlkZXJTY2FsZSwgdGhpcy5pbml0T3B0aW9ucyk7XHJcbiAgICB0aGlzLnNsaWRlci5hcHBlbmRDaGlsZChzbGlkZXJTY2FsZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFwcGVuZEVsZW1lbnRzKCk6IHZvaWQge1xyXG4gICAgY29uc3QgW2xvd2VyQ291bnRFbGVtLCB1cHBlckNvdW50RWxlbV0gPSB0aGlzLnRvb2xUaXAuZ2V0RWxlbXMoKTtcclxuICAgIGNvbnN0IFtsb3dlckVsZW0sIHVwcGVyRWxlbV0gPSB0aGlzLmhhbmRsZXJzLmdldEhhbmRsZXJFbGVtcygpO1xyXG4gICAgY29uc3QgcHJvZ3Jlc3NCYXJFbGVtID0gdGhpcy5wcm9ncmVzc0Jhci5nZXRFbGVtcygpO1xyXG4gICAgdGhpcy5zbGlkZXIuYXBwZW5kQ2hpbGQodGhpcy50cmFja2VyKTtcclxuICAgIGxvd2VyRWxlbS5hcHBlbmRDaGlsZChsb3dlckNvdW50RWxlbSk7XHJcbiAgICB1cHBlckVsZW0uYXBwZW5kQ2hpbGQodXBwZXJDb3VudEVsZW0pO1xyXG4gICAgW2xvd2VyRWxlbSwgdXBwZXJFbGVtLCBwcm9ncmVzc0JhckVsZW1dLmZvckVhY2goKGVsZW0pID0+IHRoaXMudHJhY2tlci5hcHBlbmRDaGlsZChlbGVtKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNyZWF0ZVNsaWRlcigpO1xyXG4gICAgdGhpcy5jcmVhdGVFbGVtZW50cygpO1xyXG4gICAgdGhpcy5hcHBlbmRFbGVtZW50cygpO1xyXG4gICAgdGhpcy5jcmVhdGVTY2FsZSgpO1xyXG4gICAgdGhpcy5zdWJzY3JpYmVyKCk7XHJcbiAgICB0aGlzLmNoZWNrU2xpZGVyT3JpZW50YXRpb24oKTtcclxuICAgIHRoaXMuYWRkTGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrU2xpZGVyT3JpZW50YXRpb24oKTogdm9pZCB7XHJcblxyXG4gICAgaWYgKHRoaXMuaW5pdE9wdGlvbnMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcclxuICAgICAgdGhpcy5zbGlkZXIuY2xhc3NMaXN0LmFkZCgnc2xpZGVyX3ZlcnRpY2FsJyk7IFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zbGlkZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGVyX3ZlcnRpY2FsJyk7IFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVIYW5kbGVycyhlbGVtOiBIVE1MRWxlbWVudCwgZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCBbbWluLCBtYXhdID0gdGhpcy5oYW5kbGVycy5nZXRIYW5kbGVyc0Nvb3JkcyhlbGVtLCBlKTtcclxuICAgIHRoaXMucHJlc2VudGVyLmNoYW5nZVZhbHVlcyhbbWluLCBtYXhdKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkRXZlbnRzKGVsZW06IEhUTUxFbGVtZW50LCBlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgdXBkYXRlVmFsdWVzQmluZCA9IHRoaXMudXBkYXRlSGFuZGxlcnMuYmluZCh0aGlzLCBlbGVtKTtcclxuICAgIGNvbnN0IGFjdGlvbnMgPSBbdXBkYXRlVmFsdWVzQmluZF07XHJcbiAgICBjb25zdCByZW1vdmVFdmVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGFjdGlvbnMuZm9yRWFjaCgoYWN0aW9uKSA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgYWN0aW9uKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBhY3Rpb24pO1xyXG4gICAgICB9KTsgXHJcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCByZW1vdmVFdmVudHMpO1xyXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHJlbW92ZUV2ZW50cyk7XHJcbiAgICB9O1xyXG4gICAgYWN0aW9ucy5mb3JFYWNoKChhY3Rpb24pID0+IHtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgYWN0aW9uKTtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgYWN0aW9uKTtcclxuICAgIH0pOyBcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCByZW1vdmVFdmVudHMpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCByZW1vdmVFdmVudHMpO1xyXG4gICAgZG9jdW1lbnQub25kcmFnc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHRvU3Vic2NyaWJlSGFuZGxlcnNPblZpZXcoKTogdm9pZCB7XHJcbiAgICBjb25zdCBlbGVtcyA9IHRoaXMuaGFuZGxlcnMuZ2V0SGFuZGxlckVsZW1zKCk7XHJcbiAgICBlbGVtcy5mb3JFYWNoKChlbGVtKSA9PiB7XHJcbiAgICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGUpID0+IHRoaXMuYWRkRXZlbnRzKGVsZW0sIGUpKTtcclxuICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKGUpID0+IHRoaXMuYWRkRXZlbnRzKGVsZW0sIGUpKTtcclxuICAgICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiBlbGVtLmZvY3VzKCkpO1xyXG4gICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCAoKSA9PiBlbGVtLmZvY3VzKCkpO1xyXG4gICAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xyXG4gICAgICAgIGlmICgoZS5rZXkgIT09ICdBcnJvd0xlZnQnICYmIGUua2V5ICE9PSAnQXJyb3dSaWdodCcpKSB7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMudXBkYXRlSGFuZGxlcnMoZWxlbSwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB0b1N1YnNjcmliZVNjYWxlT25WaWV3KCk6IHZvaWQge1xyXG4gICAgdGhpcy5zbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc2NhbGUuZ2V0U2NhbGVWYWx1ZXMoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpO1xyXG5cclxuICAgICAgaWYgKHZhbHVlIHx8IHZhbHVlID09PSAwKSB7XHJcbiAgICAgICAgdGhpcy5wcmVzZW50ZXIuc2V0U2xpZGVyKCd2YWx1ZUZyb20nLCB0aGlzLmluaXRPcHRpb25zLm1pbik7XHJcbiAgICAgICAgdGhpcy5wcmVzZW50ZXIuc2V0U2xpZGVyKCd2YWx1ZVRvJywgdmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkTGlzdGVuZXJzKCk6IHZvaWQgeyAgICBcclxuICAgIHRoaXMudG9TdWJzY3JpYmVIYW5kbGVyc09uVmlldygpO1xyXG4gICAgdGhpcy50b1N1YnNjcmliZVNjYWxlT25WaWV3KCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTbGlkZXJWaWV3OyIsImltcG9ydCBNb2RlbCBmcm9tICcuLi9Nb2RlbC9Nb2RlbCc7XHJcbmltcG9ydCBWaWV3IGZyb20gJy4uL1ZpZXcvVmlldyc7XHJcblxyXG5jbGFzcyBTbGlkZXJQcmVzZW50ZXIge1xyXG4gIHByaXZhdGUgbW9kZWw6IE1vZGVsO1xyXG5cclxuICBwcml2YXRlIHZpZXc6IFZpZXc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNsaWRlcjogSFRNTEVsZW1lbnQsIHN0YXRlSW5pdDogSW5pdCkge1xyXG4gICAgdGhpcy5tb2RlbCA9IG5ldyBNb2RlbChzdGF0ZUluaXQpO1xyXG4gICAgdGhpcy52aWV3ID0gbmV3IFZpZXcoc2xpZGVyLCB0aGlzLCB0aGlzLmdldFN0YXRlKCkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNoYW5nZVZhbHVlcyhbbWluLCBtYXhdOiBudW1iZXJbXSk6IHZvaWQge1xyXG4gICAgdGhpcy5tb2RlbC5jaGFuZ2VWYWx1ZXMoW21pbiwgbWF4XSk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRTbGlkZXIoYWN0aW9uOiBBY3Rpb25zLCBwYXJhbXM6IFBhcmFtcyk6IHZvaWQge1xyXG4gICAgdGhpcy5tb2RlbC5zZXRTdGF0ZShhY3Rpb24sIHBhcmFtcyk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlVmlldygpOiB2b2lkIHtcclxuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5tb2RlbC5nZXRTdGF0ZSgpO1xyXG4gICAgdGhpcy52aWV3LnVwZGF0ZVZpZXcoc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFN0YXRlKCk6IEluaXQgeyBcclxuICAgIHJldHVybiB0aGlzLm1vZGVsLmdldFN0YXRlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb25DaGFuZ2UoY3VzdG9tRnVuY3Rpb246ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMubW9kZWwuc2V0Q3VzdG9tRnVuY3Rpb24oY3VzdG9tRnVuY3Rpb24pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2xpZGVyUHJlc2VudGVyOyIsImNvbnN0IHNsaWRlckluaXRDb25maWc6IEluaXQgPSB7XHJcbiAgbWluOiAtMTAsXHJcbiAgbWF4OiAwLjAwMDAsXHJcbiAgc3RlcDogMC4wMDA1LFxyXG4gIHZhbHVlRnJvbTogLTUsXHJcbiAgdmFsdWVUbzogMC4wMDAwLFxyXG4gIHR5cGU6ICdyYW5nZScsXHJcbiAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcclxuICBzY2FsZTogdHJ1ZSxcclxuICB0b29sVGlwOiB0cnVlLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2xpZGVySW5pdENvbmZpZzsiLCJpbXBvcnQgalF1ZXJ5IGZyb20gJ2pxdWVyeSc7XHJcbmltcG9ydCBzbGlkZXJQcmVzZW50ZXIgZnJvbSAnLi9QcmVzZW50ZXIvUHJlc2VudGVyJztcclxuaW1wb3J0IHNsaWRlckluaXRDb25maWcgZnJvbSAnLi9zbGlkZXJJbml0Q29uZmlnJztcclxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xyXG5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIGludGVyZmFjZSBKUXVlcnkge1xyXG4gICAgc2xpZGVyUGx1Z2luKHRoaXM6IEpRdWVyeTxIVE1MRWxlbWVudD4sIG9wdGlvbnM6IFVzZXJJbml0KTogSlF1ZXJ5O1xyXG4gICAgc2V0U2xpZGVyKGFjdGlvbjogQWN0aW9ucywgcGFyYW1zOiBQYXJhbXMpOiB2b2lkO1xyXG4gICAgZ2V0U3RhdGUoKTogSW5pdDtcclxuICAgIHNsaWRlck9uQ2hhbmdlKGN1c3RvbUZ1bmN0aW9uOiAoKSA9PiB2b2lkKTogdm9pZDtcclxuICB9XHJcbn1cclxuKGZ1bmN0aW9uICggJCApIHtcclxuICAkLmZuLnNsaWRlclBsdWdpbiA9IGZ1bmN0aW9uICh0aGlzOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LCBvcHRpb25zOiBVc2VySW5pdCk6IEpRdWVyeSB7IFxyXG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IHsgLi4uc2xpZGVySW5pdENvbmZpZywgLi4ub3B0aW9ucyB9O1xyXG4gICAgY29uc3QgcHJlc2VudGVyID0gbmV3IHNsaWRlclByZXNlbnRlcih0aGlzWzBdLCBuZXdPcHRpb25zKTtcclxuICAgIGNvbnN0IHNldFNsaWRlciA9IGZ1bmN0aW9uIChhY3Rpb246IEFjdGlvbnMsIHBhcmFtczogUGFyYW1zKSB7XHJcbiAgICAgIHByZXNlbnRlci5zZXRTbGlkZXIoYWN0aW9uLCBwYXJhbXMpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0U2xpZGVyID0gc2V0U2xpZGVyO1xyXG5cclxuICAgIGNvbnN0IGdldFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gcHJlc2VudGVyLmdldFN0YXRlKCk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5nZXRTdGF0ZSA9IGdldFN0YXRlO1xyXG5cclxuICAgIGNvbnN0IHNsaWRlck9uQ2hhbmdlID0gZnVuY3Rpb24gKGN1c3RvbUZ1bmN0aW9uOiAoKSA9PiB2b2lkKSB7XHJcbiAgICAgIHByZXNlbnRlci5vbkNoYW5nZShjdXN0b21GdW5jdGlvbik7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5zbGlkZXJPbkNoYW5nZSA9IHNsaWRlck9uQ2hhbmdlO1xyXG4gICAgXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG59KShqUXVlcnkpO1xyXG5cclxuLy8gZnVuY3Rpb24gc2xpZGVyQ3JlYXRlKHNsaWRlcjogSFRNTEVsZW1lbnQsIG5ld09wdGlvbnM6IFVzZXJJbml0KSB7XHJcbi8vICAgcmV0dXJuICQoc2xpZGVyKS5zbGlkZXJQbHVnaW4oc2xpZGVyLCBuZXdPcHRpb25zKTtcclxuLy8gfVxyXG5cclxuLy8gZXhwb3J0IGRlZmF1bHQgc2xpZGVyQ3JlYXRlO1xyXG4iLCJ2YXIgX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX18gPSByZXF1aXJlKFwiLSEuL2pxdWVyeS5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXyA9IHJlcXVpcmUoXCIuLi8uLi9leHBvc2UtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRHbG9iYWxUaGlzLmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX18gPSBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXztcbl9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCIkXCJdID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIH1cblxuICB2YXIgZztcblxuICB0cnkge1xuICAgIC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGcgPSB0aGlzIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4gd2luZG93O1xuICAgIH0gLy8gVGhpcyB3b3JrcyBpZiB0aGUgc2VsZiByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cblxuICAgIGlmICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSAvLyBUaGlzIHdvcmtzIGlmIHRoZSBnbG9iYWwgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZztcbn0oKTsiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNi4wXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjEtMDMtMDJUMTc6MDhaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG5cdFx0Ly8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG5cdFx0Ly8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cblx0XHQvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG5cdFx0Ly8gU3VwcG9ydDogUXRXZWIgPD0zLjguNSwgV2ViS2l0IDw9NTM0LjM0LCB3a2h0bWx0b3BkZiB0b29sIDw9MC4xMi41XG5cdFx0Ly8gUGx1cyBmb3Igb2xkIFdlYktpdCwgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIGNvbGxlY3Rpb25zXG5cdFx0Ly8gKGUuZy4sIGB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIikgPT09IFwiZnVuY3Rpb25cImApLiAoZ2gtNDc1Nilcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCIgJiZcblx0XHRcdHR5cGVvZiBvYmouaXRlbSAhPT0gXCJmdW5jdGlvblwiO1xuXHR9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy42LjBcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGZsYXQoIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdFx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNlxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAyMS0wMi0xNlxuICovXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoIHt9ICkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoTmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0WyBpIF0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxcIiArXG5cdFx0XCJpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XVxuXHRcdC8vIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0cmV0dXJuIG5vbkhleCA/XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0bm9uSGV4IDpcblxuXHRcdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgK1xuXHRcdFx0XHRjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICggdGFyZ2V0WyBqKysgXSA9IGVsc1sgaSsrIF0gKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdCggbm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCByY29tYmluYXRvcnMudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoIFwifFwiICksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbIGkgXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5uZXh0U2libGluZyApICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuICggbmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0gJiYgZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IGVsZW0gJiYgKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG5cdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIHByaW1hcnkgRGVmZXJyZWRcblx0XHRcdHByaW1hcnkgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0cHJpbWFyeS5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgcHJpbWFyeS5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBwcmltYXJ5LnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIHByaW1hcnkuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHByaW1hcnkudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgcHJpbWFyeS5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJpbWFyeS5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyIHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0XHRcdC8vIEluIENocm9tZSwgaWYgYW4gZWxlbWVudCBoYXZpbmcgYSBmb2N1c291dCBoYW5kbGVyIGlzIGJsdXJyZWQgYnlcblx0XHRcdFx0XHRcdC8vIGNsaWNraW5nIG91dHNpZGUgb2YgaXQsIGl0IGludm9rZXMgdGhlIGhhbmRsZXIgc3luY2hyb25vdXNseS4gSWZcblx0XHRcdFx0XHRcdC8vIHRoYXQgaGFuZGxlciBjYWxscyBgLnJlbW92ZSgpYCBvbiB0aGUgZWxlbWVudCwgdGhlIGRhdGEgaXMgY2xlYXJlZCxcblx0XHRcdFx0XHRcdC8vIGxlYXZpbmcgYHJlc3VsdGAgdW5kZWZpbmVkLiBXZSBuZWVkIHRvIGd1YXJkIGFnYWluc3QgdGhpcy5cblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQgJiYgcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXHR3aGljaDogdHJ1ZVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwcmVzcyBuYXRpdmUgZm9jdXMgb3IgYmx1ciBhcyBpdCdzIGFscmVhZHkgYmVpbmcgZmlyZWRcblx0XHQvLyBpbiBsZXZlcmFnZU5hdGl2ZS5cblx0XHRfZGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNzArXG5cdFx0Ly8gT25seSBGaXJlZm94IGluY2x1ZGVzIGJvcmRlciB3aWR0aHNcblx0XHQvLyBpbiBjb21wdXRlZCBkaW1lbnNpb25zLiAoZ2gtNDUyOSlcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlXCI7XG5cdFx0XHRcdHRyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjoxcHggc29saWRcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEhlaWdodCBzZXQgdGhyb3VnaCBjc3NUZXh0IGRvZXMgbm90IGdldCBhcHBsaWVkLlxuXHRcdFx0XHQvLyBDb21wdXRlZCBoZWlnaHQgdGhlbiBjb21lcyBiYWNrIGFzIDAuXG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDggQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBJbiBvdXIgYm9keUJhY2tncm91bmQuaHRtbCBpZnJhbWUsXG5cdFx0XHRcdC8vIGRpc3BsYXkgZm9yIGFsbCBkaXYgZWxlbWVudHMgaXMgc2V0IHRvIFwiaW5saW5lXCIsXG5cdFx0XHRcdC8vIHdoaWNoIGNhdXNlcyBhIHByb2JsZW0gb25seSBpbiBBbmRyb2lkIDggQ2hyb21lIDg2LlxuXHRcdFx0XHQvLyBFbnN1cmluZyB0aGUgZGl2IGlzIGRpc3BsYXk6IGJsb2NrXG5cdFx0XHRcdC8vIGdldHMgYXJvdW5kIHRoaXMgaXNzdWUuXG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gKCBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlclRvcFdpZHRoLCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCwgMTAgKSApID09PSB0ci5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApIClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHBhcnNlckVycm9yRWxlbTtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cblxuXHRwYXJzZXJFcnJvckVsZW0gPSB4bWwgJiYgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKVsgMCBdO1xuXHRpZiAoICF4bWwgfHwgcGFyc2VyRXJyb3JFbGVtICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyAoXG5cdFx0XHRwYXJzZXJFcnJvckVsZW0gP1xuXHRcdFx0XHRqUXVlcnkubWFwKCBwYXJzZXJFcnJvckVsZW0uY2hpbGROb2RlcywgZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0XHRcdHJldHVybiBlbC50ZXh0Q29udGVudDtcblx0XHRcdFx0fSApLmpvaW4oIFwiXFxuXCIgKSA6XG5cdFx0XHRcdGRhdGFcblx0XHQpICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKS5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxub3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdCBidXQgbm90IGlmIGpzb25wXG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJqc29uXCIsIHMuZGF0YVR5cGVzICkgPCAwICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLFxuXHRcdGNvbnRlbnQ6IHR5cGUsXG5cdFx0XCJcIjogXCJvdXRlclwiICsgbmFtZVxuXHR9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKFxuXHQoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9XG4pO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcbi8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcbn07XG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xyXG5cclxuY2xhc3MgQ29uZmlnUGFuZWwge1xyXG4gIHByaXZhdGUgdmFsdWVGcm9tSW5wdXQhOiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIHZhbHVlVG9JbnB1dCE6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG4gIHByaXZhdGUgbWluSW5wdXQhOiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIG1heElucHV0ITogSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSBzdGVwSW5wdXQhOiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIG9yaWVudGF0aW9uITogSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSB0eXBlITogSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSB0b29sVGlwITogSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSBzY2FsZSE6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG4gIHByaXZhdGUgcmFuZ2VTbGlkZXI6IEpRdWVyeTxIVE1MRWxlbWVudD47XHJcblxyXG4gIHByaXZhdGUgY29uZmlnUGFuZUVsZW1lbnQhOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSByb290RWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJhbmdlU2xpZGVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LCByb290RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcclxuICAgIHRoaXMucmFuZ2VTbGlkZXIgPSByYW5nZVNsaWRlcjtcclxuICAgIHRoaXMucm9vdEVsZW1lbnQgPSByb290RWxlbWVudDtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNyZWF0ZUNvbmZpZ1BhbmVsKCk7XHJcbiAgICB0aGlzLmNyZWF0ZUlucHV0c0VsZW1zKCk7XHJcbiAgICB0aGlzLmNyZWF0ZUJ0bkVsZW1zKCk7XHJcbiAgICB0aGlzLmluaXRFbGVtcygpO1xyXG4gICAgdGhpcy5pbml0VmFsdWVzKCk7XHJcbiAgICB0aGlzLmFkZExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVDb25maWdQYW5lbCgpOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbmZpZ1BhbmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb25maWdQYW5lbC5jbGFzc0xpc3QuYWRkKCdjb25maWcnLCAnanMtY29uZmlnJyk7XHJcbiAgICB0aGlzLmNvbmZpZ1BhbmVFbGVtZW50ID0gY29uZmlnUGFuZWw7XHJcbiAgICB0aGlzLnJvb3RFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuY29uZmlnUGFuZUVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRFbGVtc0NsYXNzKCkge1xyXG4gICAgY29uc3QgZWxlbXNDbGFzcyA9IHtcclxuICAgICAgdmFsdWVGcm9tOiAndmFsdWUtZnJvbScsXHJcbiAgICAgIHZhbHVlVG86ICd2YWx1ZS10bycsXHJcbiAgICAgIG1pbjogJ21pbicsXHJcbiAgICAgIG1heDogJ21heCcsXHJcbiAgICAgIHN0ZXA6ICdzdGVwJyxcclxuICAgICAgb3JpZW50YXRpb246ICdvcmllbnRhdGlvbicsXHJcbiAgICAgIHR5cGU6ICd0eXBlJyxcclxuICAgICAgdG9vbFRpcDogJ3Rvb2wtdGlwJyxcclxuICAgICAgc2NhbGU6ICdzY2FsZScsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGVsZW1zQ2xhc3M7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXRFbGVtcygpIHtcclxuICAgIGNvbnN0IGVsZW1zID0gdGhpcy5jb25maWdQYW5lRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTtcclxuICAgIGNvbnN0IGNsYXNzZXMgPSB0aGlzLmdldEVsZW1zQ2xhc3MoKTtcclxuXHJcbiAgICBmb3IgKGxldCBlbGVtIG9mIGVsZW1zKSB7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoZWxlbS5tYXRjaGVzKGAuanMtY29uZmlnLSR7Y2xhc3Nlcy52YWx1ZUZyb219YCkpIHtcclxuICAgICAgICB0aGlzLnZhbHVlRnJvbUlucHV0ID0gZWxlbTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVsZW0ubWF0Y2hlcyhgLmpzLWNvbmZpZy0ke2NsYXNzZXMudmFsdWVUb31gKSkge1xyXG4gICAgICAgIHRoaXMudmFsdWVUb0lucHV0ID0gZWxlbTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVsZW0ubWF0Y2hlcyhgLmpzLWNvbmZpZy0ke2NsYXNzZXMubWlufWApKSB7XHJcbiAgICAgICAgdGhpcy5taW5JbnB1dCA9IGVsZW07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChlbGVtLm1hdGNoZXMoYC5qcy1jb25maWctJHtjbGFzc2VzLm1heH1gKSkge1xyXG4gICAgICAgIHRoaXMubWF4SW5wdXQgPSBlbGVtO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZWxlbS5tYXRjaGVzKGAuanMtY29uZmlnLSR7Y2xhc3Nlcy5zdGVwfWApKSB7XHJcbiAgICAgICAgdGhpcy5zdGVwSW5wdXQgPSBlbGVtO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZWxlbS5tYXRjaGVzKGAuanMtY29uZmlnLSR7Y2xhc3Nlcy5vcmllbnRhdGlvbn1gKSkge1xyXG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBlbGVtO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZWxlbS5tYXRjaGVzKGAuanMtY29uZmlnLSR7Y2xhc3Nlcy50eXBlfWApKSB7XHJcbiAgICAgICAgdGhpcy50eXBlID0gZWxlbTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVsZW0ubWF0Y2hlcyhgLmpzLWNvbmZpZy0ke2NsYXNzZXMudG9vbFRpcH1gKSkge1xyXG4gICAgICAgIHRoaXMudG9vbFRpcCA9IGVsZW07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChlbGVtLm1hdGNoZXMoYC5qcy1jb25maWctJHtjbGFzc2VzLnNjYWxlfWApKSB7XHJcbiAgICAgICAgdGhpcy5zY2FsZSA9IGVsZW07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlSW5wdXRzRWxlbXMoKTogdm9pZCB7XHJcbiAgICBjb25zdCBjb25maWdJbnB1dEdyb3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb25maWdJbnB1dEdyb3VwLmNsYXNzTGlzdC5hZGQoJ2NvbmZpZ19fZ3JvdXAnKTtcclxuICAgIGNvbnN0IHsgdmFsdWVGcm9tLCB2YWx1ZVRvLCBtaW4sIG1heCwgc3RlcCB9ID0gdGhpcy5nZXRFbGVtc0NsYXNzKCk7XHJcbiAgICBjb25zdCB2YWx1ZUVsZW1zID0gW1xyXG4gICAgICB7IG5hbWU6ICd2YWx1ZSBmcm9tJywgY2xhc3M6IHZhbHVlRnJvbSB9LFxyXG4gICAgICB7IG5hbWU6ICd2YWx1ZSB0bycsIGNsYXNzOiB2YWx1ZVRvIH0sXHJcbiAgICAgIHsgbmFtZTogJ21pbicsIGNsYXNzOiBtaW4gfSxcclxuICAgICAgeyBuYW1lOiAnbWF4JywgY2xhc3M6IG1heCB9LFxyXG4gICAgICB7IG5hbWU6ICdzdGVwJywgY2xhc3M6IHN0ZXAgfSxcclxuICAgIF07XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZUVsZW1zLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGxldCBpbnB1dEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgaW5wdXRFbGVtLmNsYXNzTGlzdC5hZGQoJ2NvbmZpZ19faW5wdXQnKTtcclxuICAgICAgaW5wdXRFbGVtLmlubmVySFRNTCA9IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29uZmlnX19pbnB1dC1uYW1lXCI+XHJcbiAgICAgICAgICAke3ZhbHVlRWxlbXNbaV0ubmFtZX06XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbmZpZ19faW5wdXRzXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29uZmlnX19kZWNcIj48L2Rpdj5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzcz1cImNvbmZpZ19faW5wdXQtdmFsdWUganMtY29uZmlnLSR7dmFsdWVFbGVtc1tpXS5jbGFzc31cIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb25maWdfX2luY1wiPjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICBgO1xyXG4gICAgICBjb25maWdJbnB1dEdyb3VwLmFwcGVuZENoaWxkKGlucHV0RWxlbSk7XHJcbiAgICB9IFxyXG4gICAgdGhpcy5jb25maWdQYW5lRWxlbWVudC5hcHBlbmRDaGlsZChjb25maWdJbnB1dEdyb3VwKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQnRuRWxlbXMoKTogdm9pZCB7XHJcbiAgICBjb25zdCBjb25maWdCdG5Hcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29uZmlnQnRuR3JvdXAuY2xhc3NMaXN0LmFkZCgnY29uZmlnX19ncm91cCcpO1xyXG4gICAgY29uc3QgeyBvcmllbnRhdGlvbiwgdHlwZSwgdG9vbFRpcCwgc2NhbGUgfSA9IHRoaXMuZ2V0RWxlbXNDbGFzcygpO1xyXG4gICAgY29uc3QgYnRuRWxlbXMgPSBbXHJcbiAgICAgIHsgbmFtZTogJ2hvcml6b250YWwnLCBjbGFzczogb3JpZW50YXRpb24gfSxcclxuICAgICAgeyBuYW1lOiAncmFuZ2UnLCBjbGFzczogdHlwZSB9LFxyXG4gICAgICB7IG5hbWU6ICd0b29sLXRpcCcsIGNsYXNzOiB0b29sVGlwIH0sXHJcbiAgICAgIHsgbmFtZTogJ3NjYWxlJywgY2xhc3M6IHNjYWxlIH0sXHJcbiAgICBdO1xyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ0bkVsZW1zLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGxldCBidG5FbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIGJ0bkVsZW0uY2xhc3NMaXN0LmFkZCgnY29uZmlnX19pbnB1dCcsICdjb25maWdfX2lucHV0X2J0bicpO1xyXG4gICAgICBidG5FbGVtLmlubmVySFRNTCA9IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29uZmlnX19pbnB1dC1uYW1lXCI+XHJcbiAgICAgICAgICAke2J0bkVsZW1zW2ldLm5hbWV9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29uZmlnX19idXR0b25cIj5cclxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImpzLWNvbmZpZy0ke2J0bkVsZW1zW2ldLmNsYXNzfVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbmZpZ19fYnV0dG9uLW9uXCI+PC9kaXY+XHJcbiAgICAgICAgPC9sYWJlbD5cclxuICAgICAgYDtcclxuICAgICAgY29uZmlnQnRuR3JvdXAuYXBwZW5kQ2hpbGQoYnRuRWxlbSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvbmZpZ1BhbmVFbGVtZW50LmFwcGVuZENoaWxkKGNvbmZpZ0J0bkdyb3VwKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkQXR0cmlidXRlcygpOiB2b2lkIHtcclxuICAgIGxldCB7IG1pbiwgbWF4LCBzdGVwIH0gPSAgdGhpcy5yYW5nZVNsaWRlci5nZXRTdGF0ZSgpO1xyXG4gICAgY29uc3QgaW5wdXRzID0gIFtcclxuICAgICAgdGhpcy52YWx1ZUZyb21JbnB1dCxcclxuICAgICAgdGhpcy52YWx1ZVRvSW5wdXQsXHJcbiAgICAgIHRoaXMubWluSW5wdXQsXHJcbiAgICAgIHRoaXMubWF4SW5wdXQsXHJcbiAgICBdO1xyXG4gICAgaW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnbWF4JywgYCR7bWF4fWApO1xyXG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ21pbicsIGAke21pbn1gKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5zdGVwSW5wdXQuc2V0QXR0cmlidXRlKCdtYXgnLCBgJHttYXggLSBtaW59YCk7XHJcbiAgICB0aGlzLnN0ZXBJbnB1dC5zZXRBdHRyaWJ1dGUoJ21pbicsIGAke3N0ZXB9YCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXRWYWx1ZXMoKTogdm9pZCB7XHJcbiAgICBjb25zdCB7IG1pbiwgbWF4LCB2YWx1ZUZyb20sIHZhbHVlVG8sIHN0ZXAgfSA9ICB0aGlzLnJhbmdlU2xpZGVyLmdldFN0YXRlKCk7XHJcbiAgICB0aGlzLnZhbHVlRnJvbUlucHV0LnZhbHVlID0gYCR7dmFsdWVGcm9tfWA7XHJcbiAgICB0aGlzLnZhbHVlVG9JbnB1dC52YWx1ZSA9IGAke3ZhbHVlVG99YDtcclxuICAgIHRoaXMubWluSW5wdXQudmFsdWUgPSBgJHttaW59YDtcclxuICAgIHRoaXMubWF4SW5wdXQudmFsdWUgPSBgJHttYXh9YDtcclxuICAgIHRoaXMuc3RlcElucHV0LnZhbHVlID0gYCR7c3RlcH1gO1xyXG4gICAgdGhpcy5hZGRBdHRyaWJ1dGVzKCk7XHJcbiAgICB0aGlzLmlzQnRuQWN0aXZlKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGlzQnRuQWN0aXZlKCk6IHZvaWQge1xyXG4gICAgbGV0IHsgb3JpZW50YXRpb24sIHR5cGUsIHNjYWxlLCB0b29sVGlwIH0gPSAgdGhpcy5yYW5nZVNsaWRlci5nZXRTdGF0ZSgpO1xyXG5cclxuICAgIGlmIChvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XHJcbiAgICAgIHRoaXMub3JpZW50YXRpb24uY2hlY2tlZCA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm9yaWVudGF0aW9uLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodG9vbFRpcCA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLnRvb2xUaXAuY2hlY2tlZCA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnRvb2xUaXAuY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlID09PSAncmFuZ2UnKSB7XHJcbiAgICAgIHRoaXMudHlwZS5jaGVja2VkID0gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudHlwZS5jaGVja2VkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChzY2FsZSA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLnNjYWxlLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zY2FsZS5jaGVja2VkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldFZhbHVlKHZhbHVlTmFtZTogQWN0aW9ucywgdmFsdWU6IFBhcmFtcyk6IHZvaWQge1xyXG4gICAgdGhpcy5yYW5nZVNsaWRlci5zZXRTbGlkZXIodmFsdWVOYW1lLCB2YWx1ZSk7XHJcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMucmFuZ2VTbGlkZXIuZ2V0U3RhdGUoKVt2YWx1ZU5hbWVdO1xyXG4gICAgXHJcbiAgICBzd2l0Y2ggKHZhbHVlTmFtZSkge1xyXG4gICAgICBjYXNlICd2YWx1ZUZyb20nOiB0aGlzLnZhbHVlRnJvbUlucHV0LnZhbHVlID0gYCR7bmV3VmFsdWV9YDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAndmFsdWVUbyc6IHRoaXMudmFsdWVUb0lucHV0LnZhbHVlID0gYCR7bmV3VmFsdWV9YDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnbWluJzogdGhpcy5taW5JbnB1dC52YWx1ZSA9IGAke25ld1ZhbHVlfWA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ21heCc6IHRoaXMubWF4SW5wdXQudmFsdWUgPSBgJHtuZXdWYWx1ZX1gO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdzdGVwJzogdGhpcy5zdGVwSW5wdXQudmFsdWUgPSBgJHtuZXdWYWx1ZX1gO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGFuZ2VWYWx1ZXMoZTogRXZlbnQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGVsZW0gPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuICAgIGxldCB7IG1pbiwgbWF4LCB2YWx1ZUZyb20sIHZhbHVlVG8sIHN0ZXAsIHR5cGUgfSA9ICB0aGlzLnJhbmdlU2xpZGVyLmdldFN0YXRlKCk7XHJcblxyXG4gICAgaWYgKGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdjb25maWdfX2luYycpIHx8IGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdjb25maWdfX2RlYycpKSB7XHJcbiAgICAgIGNvbnN0IGlucHV0RWxlbSA9IGVsZW0ucGFyZW50Tm9kZSEucXVlcnlTZWxlY3RvcignaW5wdXQnKSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgbGV0IGluYyA9IGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdjb25maWdfX2luYycpID8gc3RlcCA6IC1zdGVwO1xyXG5cclxuICAgICAgaWYgKGlucHV0RWxlbSA9PT0gdGhpcy52YWx1ZUZyb21JbnB1dCAmJiB0eXBlICE9PSAnc2luZ2xlJykge1xyXG4gICAgICAgIHRoaXMuc2V0VmFsdWUoJ3ZhbHVlRnJvbScsIHZhbHVlRnJvbSArIGluYyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpbnB1dEVsZW0gPT09IHRoaXMudmFsdWVUb0lucHV0KSB7XHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSgndmFsdWVUbycsIHZhbHVlVG8gKyBpbmMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaW5wdXRFbGVtID09PSB0aGlzLm1pbklucHV0KSB7ICAgXHJcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSgnbWluJywgbWluICsgaW5jKTtcclxuICAgICAgICBpZiAodHlwZSA9PT0gJ3NpbmdsZScpIHtcclxuICAgICAgICAgICh7IG1pbiB9ID0gdGhpcy5yYW5nZVNsaWRlci5nZXRTdGF0ZSgpKTtcclxuICAgICAgICAgIHRoaXMudmFsdWVGcm9tSW5wdXQudmFsdWUgPSBgJHttaW59YDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpbnB1dEVsZW0gPT09IHRoaXMubWF4SW5wdXQpIHtcclxuICAgICAgICB0aGlzLnNldFZhbHVlKCdtYXgnLCBtYXggKyBpbmMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaW5wdXRFbGVtID09PSB0aGlzLnN0ZXBJbnB1dCkge1xyXG4gICAgICAgIGNvbnN0IGluY1N0ZXAgPSAobWF4IC0gbWluKSAvIDEwMDtcclxuXHJcbiAgICAgICAgaWYgKGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdjb25maWdfX2luYycpKSB0aGlzLnNldFZhbHVlKCdzdGVwJywgKHN0ZXAgKyBpbmNTdGVwKSk7XHJcblxyXG4gICAgICAgIGlmIChlbGVtLmNsYXNzTGlzdC5jb250YWlucygnY29uZmlnX19kZWMnKSkgdGhpcy5zZXRWYWx1ZSgnc3RlcCcsIChzdGVwIC0gaW5jU3RlcCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldFZhbHVlcygpOiB2b2lkIHtcclxuICAgIGxldCB7IHZhbHVlRnJvbSwgdmFsdWVUbyB9ID0gIHRoaXMucmFuZ2VTbGlkZXIuZ2V0U3RhdGUoKTtcclxuICAgIHRoaXMudmFsdWVGcm9tSW5wdXQudmFsdWUgPSB2YWx1ZUZyb20udG9TdHJpbmcoKTtcclxuICAgIHRoaXMudmFsdWVUb0lucHV0LnZhbHVlID0gdmFsdWVUby50b1N0cmluZygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRUeXBlKCk6IHZvaWQge1xyXG4gICAgY29uc3QgeyBtaW4gfSA9ICB0aGlzLnJhbmdlU2xpZGVyLmdldFN0YXRlKCk7XHJcblxyXG4gICAgaWYgKHRoaXMudHlwZS5jaGVja2VkKSB7XHJcbiAgICAgIHRoaXMucmFuZ2VTbGlkZXIuc2V0U2xpZGVyKCd0eXBlJywgJ3JhbmdlJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJhbmdlU2xpZGVyLnNldFNsaWRlcigndHlwZScsICdzaW5nbGUnKTtcclxuICAgICAgdGhpcy52YWx1ZUZyb21JbnB1dC52YWx1ZSA9IGAke21pbn1gO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRUb29sVGlwKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMudG9vbFRpcC5jaGVja2VkKSB7XHJcbiAgICAgIHRoaXMucmFuZ2VTbGlkZXIuc2V0U2xpZGVyKCd0b29sVGlwJywgdHJ1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJhbmdlU2xpZGVyLnNldFNsaWRlcigndG9vbFRpcCcsIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0U2NhbGUoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5zY2FsZS5jaGVja2VkKSB7XHJcbiAgICAgIHRoaXMucmFuZ2VTbGlkZXIuc2V0U2xpZGVyKCdzY2FsZScsIHRydWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yYW5nZVNsaWRlci5zZXRTbGlkZXIoJ3NjYWxlJywgZmFsc2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRPcmllbnRhdGlvbigpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLm9yaWVudGF0aW9uLmNoZWNrZWQpIHtcclxuICAgICAgdGhpcy5yYW5nZVNsaWRlci5zZXRTbGlkZXIoJ29yaWVudGF0aW9uJywgJ2hvcml6b250YWwnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucmFuZ2VTbGlkZXIuc2V0U2xpZGVyKCdvcmllbnRhdGlvbicsICd2ZXJ0aWNhbCcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRTbGlkZXIoZTogRXZlbnQpOiB2b2lkIHtcclxuICAgIHN3aXRjaCAoZS50YXJnZXQpIHtcclxuICAgICAgY2FzZSB0aGlzLm9yaWVudGF0aW9uOiB0aGlzLnNldE9yaWVudGF0aW9uKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgdGhpcy5zY2FsZTogdGhpcy5zZXRTY2FsZSgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIHRoaXMudG9vbFRpcDogdGhpcy5zZXRUb29sVGlwKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgdGhpcy50eXBlOiB0aGlzLnNldFR5cGUoKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0U2xpZGVyVmFsdWVzKGU6IEV2ZW50KTogdm9pZCB7XHJcbiAgICBzd2l0Y2ggKGUudGFyZ2V0KSB7XHJcbiAgICAgIGNhc2UgdGhpcy52YWx1ZUZyb21JbnB1dDogdGhpcy5zZXRWYWx1ZSgndmFsdWVGcm9tJywgK3RoaXMudmFsdWVGcm9tSW5wdXQudmFsdWUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIHRoaXMudmFsdWVUb0lucHV0OiB0aGlzLnNldFZhbHVlKCd2YWx1ZVRvJywgK3RoaXMudmFsdWVUb0lucHV0LnZhbHVlKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSB0aGlzLm1pbklucHV0OiB0aGlzLnNldFZhbHVlKCdtaW4nLCArdGhpcy5taW5JbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgdGhpcy5tYXhJbnB1dDogdGhpcy5zZXRWYWx1ZSgnbWF4JywgK3RoaXMubWF4SW5wdXQudmFsdWUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIHRoaXMuc3RlcElucHV0OiB0aGlzLnNldFZhbHVlKCdzdGVwJywgK3RoaXMuc3RlcElucHV0LnZhbHVlKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkTGlzdGVuZXJzKCk6IHZvaWQge1xyXG4gICAgY29uc3Qgc2V0VmFsdWVzQmluZCA9IHRoaXMuc2V0VmFsdWVzLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLnJhbmdlU2xpZGVyLnNsaWRlck9uQ2hhbmdlKCgpID0+IHNldFZhbHVlc0JpbmQoKSk7XHJcbiAgICB0aGlzLmNvbmZpZ1BhbmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHRoaXMuY2hhbmdlVmFsdWVzKGUpKTtcclxuICAgIHRoaXMuY29uZmlnUGFuZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4gdGhpcy5zZXRTbGlkZXIoZSkpO1xyXG4gICAgdGhpcy5jb25maWdQYW5lRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gdGhpcy5zZXRTbGlkZXJWYWx1ZXMoZSkpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29uZmlnUGFuZWw7IiwiaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xyXG4vLyBpbXBvcnQgJy4vU2xpZGVyL3N0eWxlLnNjc3MnO1xyXG5pbXBvcnQgQ29uZmlnUGFuZWwgZnJvbSAnLi9jb25maWdQYW5lbC9jb25maWdQYW5lbCc7XHJcbmltcG9ydCAnLi9TbGlkZXIvanF1ZXJ5LnNsaWRlci1wbHVnaW4nO1xyXG4vLyBpbXBvcnQgc2xpZGVyQ3JlYXRlIGZyb20gJy4uL2Rpc3Qvc2xpZGVyJztcclxuXHJcbmNvbnN0IHNsaWRlckZpcnN0RWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItZmlyc3QnKSBhcyBIVE1MRWxlbWVudDtcclxuY29uc3QgY29uZmlnRmlyc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29uZmlnLWZpcnN0JykgYXMgSFRNTEVsZW1lbnQ7XHJcbmNvbnN0IGluaXRPcHRpb25zRmlyc3Q6IFVzZXJJbml0ID0ge1xyXG4gIG1heDogMTAsXHJcbiAgc3RlcDogMSxcclxufTtcclxuXHJcbmNvbnN0IHNsaWRlckZpcnN0ID0gJChzbGlkZXJGaXJzdEVsZW0pLnNsaWRlclBsdWdpbihpbml0T3B0aW9uc0ZpcnN0KTtcclxuLy8gY29uc3Qgc2xpZGVyRmlyc3QgPSBzbGlkZXJDcmVhdGUoc2xpZGVyRmlyc3RFbGVtLCBpbml0T3B0aW9uc0ZpcnN0KTtcclxuKCgpID0+IG5ldyBDb25maWdQYW5lbChzbGlkZXJGaXJzdCwgY29uZmlnRmlyc3QpKSgpO1xyXG5cclxuXHJcbi8vIGNvbnN0IHNsaWRlclNlY29uZEVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2xpZGVyLXNlY29uZCcpIGFzIEhUTUxFbGVtZW50O1xyXG4vLyBjb25zdCBpbml0T3B0aW9uc1NlY29uZDogVXNlckluaXQgPSB7XHJcbi8vICAgbWluOiAtMC4xLFxyXG4vLyAgIG1heDogMC4xLFxyXG4vLyAgIHN0ZXA6IDAuMDAwNSxcclxuLy8gICB2YWx1ZUZyb206IC0wLjA1LFxyXG4vLyAgIHZhbHVlVG86IDAuMDUsXHJcbi8vICAgdHlwZTogJ3JhbmdlJyxcclxuLy8gICBzY2FsZTogZmFsc2UsXHJcbi8vIH07XHJcblxyXG4vLyAoKCkgPT4gc2xpZGVyQ3JlYXRlKHNsaWRlclNlY29uZEVsZW0sIGluaXRPcHRpb25zU2Vjb25kKSkoKTtcclxuXHJcbi8vIGNvbnN0IHNsaWRlclRoaXJkRWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItdGhpcmQnKSBhcyBIVE1MRWxlbWVudDtcclxuLy8gY29uc3QgaW5pdE9wdGlvbnNUaGlyZDogVXNlckluaXQgPSB7XHJcbi8vICAgbWluOiAtMTAsXHJcbi8vICAgbWF4OiAxMCxcclxuLy8gICBzdGVwOiAxLFxyXG4vLyAgIHZhbHVlRnJvbTogLTUsXHJcbi8vICAgdmFsdWVUbzogNSxcclxuLy8gICB0eXBlOiAncmFuZ2UnLFxyXG4vLyAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnLFxyXG4vLyAgIHNjYWxlOiB0cnVlLFxyXG4vLyAgIHRvb2xUaXA6IHRydWUsXHJcbi8vIH07XHJcblxyXG4vLyAoKCkgPT4gc2xpZGVyQ3JlYXRlKHNsaWRlclRoaXJkRWxlbSwgaW5pdE9wdGlvbnNUaGlyZCkpKCk7XHJcblxyXG4vLyBjb25zdCBzbGlkZXJGb3VydGhFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNsaWRlci1mb3VydGgnKSBhcyBIVE1MRWxlbWVudDtcclxuLy8gY29uc3QgaW5pdE9wdGlvbnNGb3VydGg6IFVzZXJJbml0ID0ge1xyXG4vLyAgIG1pbjogLTAuMSxcclxuLy8gICBtYXg6IDAuMSxcclxuLy8gICBzdGVwOiAwLjAwMDUsXHJcbi8vICAgdmFsdWVGcm9tOiAtMC4wNSxcclxuLy8gICB2YWx1ZVRvOiAwLjA1LFxyXG4vLyAgIHR5cGU6ICdzaW5nbGUnLFxyXG4vLyAgIG9yaWVudGF0aW9uOiAndmVydGljYWwnLFxyXG4vLyAgIHRvb2xUaXA6IGZhbHNlLFxyXG4vLyB9O1xyXG4vLyAoKCkgPT4gc2xpZGVyQ3JlYXRlKHNsaWRlckZvdXJ0aEVsZW0sIGluaXRPcHRpb25zRm91cnRoKSkoKTsiXSwibmFtZXMiOlsiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJsZW5ndGgiLCJpIiwiYXJyMiIsIkFycmF5IiwiX3NsaWNlZFRvQXJyYXkiLCJpc0FycmF5IiwiX2kiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsImNhbGwiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJ2YWx1ZSIsImVyciIsIm8iLCJtaW5MZW4iLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiVHlwZUVycm9yIiwiU2xpZGVyTW9kZWwiLCJpbml0IiwidGhpcyIsInN0YXRlIiwiY2hlY2tUeXBlIiwicGFyYW0iLCJ0eXBlIiwidmFsdWVGcm9tIiwibWluIiwib3JpZW50YXRpb24iLCJzY2FsZSIsInRvb2xUaXAiLCJzdGVwIiwiY2hlY2tTdGVwIiwicHJldlZhbHVlVG8iLCJ2YWx1ZVRvIiwiY2hlY2tWYWx1ZVRvIiwiY3VzdG9tRnVuY3Rpb24iLCJwcmV2VmFsdWVGcm9tIiwiY2hlY2tWYWx1ZUZyb20iLCJjaGVja01pbiIsIm1heCIsImNoZWNrTWF4IiwibWluTmV3IiwibWF4TmV3IiwidW5kZWZpbmVkIiwiZmluZE5leHRWYWx1ZSIsInNldFN0YXRlIiwiY3VycmVudCIsImN1cnJlbnRWYWx1ZSIsImN1cnNvckNvb3JkIiwic3RlcEluY3IiLCJNYXRoIiwiZmxvb3IiLCJjZWlsIiwibmV3TWluIiwiY2hlY2tFeHRyZW11bVZhbHVlcyIsInRvRml4ZWQiLCJuZXdNYXgiLCJuZXdTdGVwIiwiU2xpZGVyU2NhbGUiLCJzbGlkZXIiLCJpbml0T3B0aW9ucyIsInVwZGF0ZVN0YXRlIiwidXBkYXRlIiwiY3JlYXRlRWxlbWV0cyIsImNyZWF0ZVNjYWxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiLCJzY2FsZVZhbHVlIiwic2xpZGVyU2l6ZSIsInN0ZXBDdXN0b20iLCJudW1PZkRpZ2l0cyIsImVsZW1TY2FsZSIsInZhbHVlSG9yaXpvbnRhbCIsInZhbHVlVmVydGljYWwiLCJlbGVtU2NhbGVWYWx1ZSIsInBlcmNlbnRhZ09mZnNldCIsInN0eWxlIiwidG9wIiwic2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwibGVmdCIsInJlbW92ZSIsImRlc3Ryb3lTY2FsZSIsInRhcmdldCIsImNvbnRhaW5zIiwiTnVtYmVyIiwiZ2V0QXR0cmlidXRlIiwiVG9vbFRpcCIsInRvZ2dsZXRvb2xUaXAiLCJsb3dlckNvdW50IiwidXBwZXJDb3VudCIsImNyZWF0ZUVsZW1lbnRzIiwiU2xpZGVySGFuZGxlcnMiLCJjaGVja09yaWVudGF0aW9uIiwiaGFuZGxlcnNVcGRhdGUiLCJ0b2dnbGVIYW5kbGVyc09yZGVyIiwibG93ZXIiLCJ1cHBlciIsInNoaWZ0TGVmdEhhbmRsZXIiLCJjb252ZXJ0VG9QZXJjZW50Iiwic2hpZnRSaWdodEhhbmRsZXIiLCJlbGVtIiwiZSIsImN1cnJlbnRDb29yZCIsIk1vdXNlRXZlbnQiLCJjbGllbnRZIiwicGFnZVgiLCJ3aW5kb3ciLCJUb3VjaEV2ZW50IiwidG91Y2hlcyIsIktleWJvYXJkRXZlbnQiLCJlbGVtQm91bmRpbmciLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJoZWlnaHQiLCJzdGVwSW5Db29yZHMiLCJjb252ZXJ0RnJvbUN1c3RvbSIsImtleSIsInJpZ2h0Iiwic2xpZGVyQm91bmRpbmciLCJjbGllbnRDb29yZCIsImNvbnZlcnRUb0N1c3RvbSIsImFjdGl2ZUVsZW1lbnQiLCJjdXN0b21WYWx1ZSIsImFicyIsIndpZHRoIiwiY2hlY2tTbGlkZXJPcmllbnRhdGlvbiIsIlByb2dyZXNzQmFyIiwicHJvZ3Jlc3NCYXJVcGRhdGUiLCJwcm9ncmVzc0JhciIsIm1pblBlcmNlbnQiLCJtYXhQZXJjZW50IiwicHJvZ3Jlc3NMZW5ndGgiLCJTbGlkZXJWaWV3Iiwicm9vdEVsZW0iLCJwcmVzZW50ZXIiLCJ1cGRhdGVPYnNlcnZlcnMiLCJvYnNlcnZlciIsIm9ic2VydmVycyIsInN1YlNjcmliZSIsImhhbmRsZXJzIiwiZm9yRWFjaCIsInVwZGF0ZU9ic2VydmVyIiwic2xpZGVyVHJhY2tlciIsInRyYWNrZXIiLCJIYW5kbGVycyIsInNsaWRlclNjYWxlIiwiU2NhbGUiLCJnZXRFbGVtcyIsImxvd2VyQ291bnRFbGVtIiwidXBwZXJDb3VudEVsZW0iLCJnZXRIYW5kbGVyRWxlbXMiLCJsb3dlckVsZW0iLCJ1cHBlckVsZW0iLCJwcm9ncmVzc0JhckVsZW0iLCJjcmVhdGVTbGlkZXIiLCJhcHBlbmRFbGVtZW50cyIsInN1YnNjcmliZXIiLCJhZGRMaXN0ZW5lcnMiLCJnZXRIYW5kbGVyc0Nvb3JkcyIsImNoYW5nZVZhbHVlcyIsInByZXZlbnREZWZhdWx0IiwiYWN0aW9ucyIsInVwZGF0ZUhhbmRsZXJzIiwiYmluZCIsInJlbW92ZUV2ZW50cyIsImFjdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib25kcmFnc3RhcnQiLCJhZGRFdmVudHMiLCJmb2N1cyIsImdldFNjYWxlVmFsdWVzIiwic2V0U2xpZGVyIiwidG9TdWJzY3JpYmVIYW5kbGVyc09uVmlldyIsInRvU3Vic2NyaWJlU2NhbGVPblZpZXciLCJTbGlkZXJQcmVzZW50ZXIiLCJzdGF0ZUluaXQiLCJtb2RlbCIsIk1vZGVsIiwidmlldyIsIlZpZXciLCJnZXRTdGF0ZSIsInVwZGF0ZVZpZXciLCJwYXJhbXMiLCJzZXRDdXN0b21GdW5jdGlvbiIsIiQiLCJmbiIsInNsaWRlclBsdWdpbiIsIm9wdGlvbnMiLCJuZXdPcHRpb25zIiwic2xpZGVySW5pdENvbmZpZyIsInNsaWRlclByZXNlbnRlciIsInNsaWRlck9uQ2hhbmdlIiwib25DaGFuZ2UiLCJqUXVlcnkiLCJfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXyIsIm1vZHVsZSIsImV4cG9ydHMiLCJnbG9iYWxUaGlzIiwiZyIsIkZ1bmN0aW9uIiwic2VsZiIsImdsb2JhbCIsImZhY3RvcnkiLCJ3IiwiRXJyb3IiLCJub0dsb2JhbCIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiYXJyYXkiLCJjb25jYXQiLCJhcHBseSIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXRlbSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJ2YWwiLCJzY3JpcHQiLCJ0ZXh0IiwiaGVhZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInZlcnNpb24iLCJzZWxlY3RvciIsImNvbnRleHQiLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsInRvQXJyYXkiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImFyZ3VtZW50cyIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZXZlbiIsImdyZXAiLCJfZWxlbSIsIm9kZCIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsImV4cGFuZG8iLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJndWlkIiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsIm5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hOYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImRpciIsImNoaWxkTm9kZXMiLCJlbHMiLCJzZWVkIiwibSIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJqb2luIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJfbWF0Y2hJbmRleGVzIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJfbmFtZSIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90Iiwicm9vdGpRdWVyeSIsInJvb3QiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJoYXMiLCJ0YXJnZXRzIiwibCIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJvYmplY3QiLCJfIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwiZW1wdHkiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwicHJpbWFyeSIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJjYXRjaCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJfa2V5Iiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJzZXQiLCJkYXRhIiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwiSlNPTiIsInBhcnNlIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJkaXNwbGF5IiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJtYXhJdGVyYXRpb25zIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwibGV2ZXJhZ2VOYXRpdmUiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwidHJpZ2dlciIsIkV2ZW50IiwiaGFuZGxlT2JqSW4iLCJldmVudEhhbmRsZSIsImV2ZW50cyIsInQiLCJoYW5kbGVPYmoiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImNyZWF0ZSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWSIsInNoaWZ0S2V5IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50Iiwid2hpY2giLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJwYXJzZUludCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsImdldENsaWVudFJlY3RzIiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJwYXJzZXJFcnJvckVsZW0iLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInMiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwidHJpbSIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2RlZmluZVByb3BlcnR5IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fZXNNb2R1bGUiLCJkIiwiZGVmaW5pdGlvbiIsIkNvbmZpZ1BhbmVsIiwicmFuZ2VTbGlkZXIiLCJyb290RWxlbWVudCIsImNyZWF0ZUNvbmZpZ1BhbmVsIiwiY3JlYXRlSW5wdXRzRWxlbXMiLCJjcmVhdGVCdG5FbGVtcyIsImluaXRFbGVtcyIsImluaXRWYWx1ZXMiLCJjb25maWdQYW5lbCIsImNvbmZpZ1BhbmVFbGVtZW50IiwiZ2V0RWxlbXNDbGFzcyIsInZhbHVlRnJvbUlucHV0IiwidmFsdWVUb0lucHV0IiwibWluSW5wdXQiLCJtYXhJbnB1dCIsInN0ZXBJbnB1dCIsImNvbmZpZ0lucHV0R3JvdXAiLCJ2YWx1ZUVsZW1zIiwiY2xhc3MiLCJpbnB1dEVsZW0iLCJjb25maWdCdG5Hcm91cCIsImJ0bkVsZW1zIiwiYnRuRWxlbSIsImFkZEF0dHJpYnV0ZXMiLCJpc0J0bkFjdGl2ZSIsInZhbHVlTmFtZSIsIm5ld1ZhbHVlIiwicXVlcnlTZWxlY3RvciIsImluYyIsInNldFZhbHVlIiwiaW5jU3RlcCIsInNldE9yaWVudGF0aW9uIiwic2V0U2NhbGUiLCJzZXRUb29sVGlwIiwic2V0VHlwZSIsInNldFZhbHVlc0JpbmQiLCJzZXRWYWx1ZXMiLCJzZXRTbGlkZXJWYWx1ZXMiLCJzbGlkZXJGaXJzdEVsZW0iLCJjb25maWdGaXJzdCJdLCJzb3VyY2VSb290IjoiIn0=